name: Build and test

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - develop
  schedule:
    # 03:00 every Saturday morning
    - cron: '0 3 * * 6'
  workflow_dispatch: {}

env:
  conan_version: 2.0.5

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check_changes:
    name: Check tket library version
    runs-on: ubuntu-22.04
    outputs:
      tket_changed: ${{ steps.filter.outputs.tket }}
      doxyfile_changed: ${{ steps.filter.outputs.doxyfile }}
      pytket_changed: ${{ steps.filter.outputs.pytket }}
      tket_ver: ${{ steps.tket_ver.outputs.tket_ver }}
      tket_package_exists: ${{ steps.tket_package_exists.outputs.tket_package_exists }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - uses: dorny/paths-filter@v2.11.1
      id: filter
      with:
        base: ${{ github.ref }}
        filters: |
          tket:
            - '{tket/src/**,tket/include/**,tket/conanfile.py,tket/CMakeLists.txt,tket/cmake/**,tket/test/**,tket/proptest/**}'
          doxyfile:
            - '{tket/Doxyfile}'
          pytket:
            - 'pytket/**'
    - name: Install conan
      uses: turtlebrowser/get-conan@v1.2
      with:
        version: ${{ env.conan_version }}
    - name: parse version from conanfile
      id: tket_ver
      run: |
        tket_ver=$(conan inspect tket/conanfile.py | grep "^version: " | awk '{print $2}')
        echo "tket_ver=${tket_ver}" >> $GITHUB_OUTPUT
    - name: See if version exists on remote
      id: test_package_exists
      run: |
        conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs
        tket_package_exists=`conan search -r tket-libs "tket/${{ steps.tket_ver.outputs.tket_ver }}@tket/stable" | grep "not found" > /dev/null 2>&1 && echo false || echo true`
        echo "tket_package_exists=${tket_package_exists}" >> $GITHUB_OUTPUT
    - name: Check tket version bump
      if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop' && steps.filter.outputs.tket == 'true' && steps.test_package_exists.outputs.tket_package_exists == 'true'
      run: exit 1

  #check_docs_tket:
  #  name: Check documentation build
  #  needs: check_changes
  #  if: needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.doxyfile_changed == 'true'
  #  runs-on: 'ubuntu-22.04'
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Check doxygen
  #      run: |
  #        sudo apt install -y doxygen graphviz
  #        cd tket && doxygen

  #check_format_tket:
  #  name: Check C++ code formatting
  #  needs: check_changes
  #  if: needs.check_changes.outputs.tket_changed == 'true'
  #  runs-on: 'macos-12'
  #  steps:
  #    - uses: actions/checkout@v3
  #    - name: Check C++ code formatting
  #      run: |
  #        brew update
  #        brew install clang-format@16
  #        git ls-files "*.cpp" "*.hpp" | xargs clang-format -style=file --dry-run --Werror

  build_test_tket:
    name: Build and test (tket)
    needs: check_changes
    if: needs.check_changes.outputs.tket_changed == 'true'
    strategy:
      matrix:
        os: ['windows-2022'] #, 'macos-12', 'windows-2022']
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3
    - name: show
      shell: bash
      run: |
        ls
        cd tket
        ls
    - name: apt update
      if: matrix.os == 'ubuntu-22.04'
      run: sudo apt update
    - name: normalize line endings in conanfile and src directory
      if: matrix.os == 'windows-2022'
      # This is necessary to ensure consistent revisions across platforms.
      # Conan's revision hash is composed of hashes of all the exported files,
      # so we must normalize the line endings in these.
      run: |
        $tket_files = Get-ChildItem "tket" -File -Recurse
        foreach ($f in $tket_files) {
          $normalized_file = [IO.File]::ReadAllText($f) -replace "`r`n", "`n"
          [IO.File]::WriteAllText($f, $normalized_file)
        }
    - name: Install runtime test requirements
      if: matrix.os == 'ubuntu-22.04' && github.event_name == 'schedule'
      run: |
        sudo apt install texlive texlive-latex-extra latexmk
        mkdir -p ~/texmf/tex/latex
        wget http://mirrors.ctan.org/graphics/pgf/contrib/quantikz/tikzlibraryquantikz.code.tex -P ~/texmf/tex/latex
    - name: ccache
      if: matrix.os != 'windows-2022'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: tket-${{ matrix.os }}
    - name: further ccache config
      if: matrix.os != 'windows-2022'
      run: |
        ccache --set-config base_dir=${HOME}
        ccache --set-config compiler_check=content
        ccache -p
    - name: ninja ccache setup
      # This is what hendrikmuhs/ccache-action does, but for windows (theirs is buggy on windows)
      id: ninja-ccache-setup
      run: |
          choco upgrade ccache
          $ccache_dir = ccache --get-config cache_dir
          echo ccache_dir=$ccache_dir >> $env:GITHUB_OUTPUT
          ccache --set-config=max_size='500M'
          ccache --set-config=compression=true
          ccache --set-config compiler_check=content
          ccache -p
          dir "D:\a\tket\tket\tket" -recurse
    - name: Get current time
      uses: josStorer/get-current-time@v2.1.1
      id: current_time
      with:
        format: YYYYMMDDHHmmss
    - name: ccache windows
      uses: actions/cache@v3
      with:
        path: ${{ steps.ninja-ccache-setup.outputs.ccache_dir }}
        key: tket-ccache-dynamic-${{ matrix.os }}-${{ steps.current_time.outputs.formattedTime }}
        restore-keys: |
          tket-ccache-dynamic-${{ matrix.os }}-
    - name: Select Python 3.10
      # otherwise turtlebrowser/get-conan@v1.2 fails on macos-12
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install conan
      uses: turtlebrowser/get-conan@v1.2
      with:
        version: ${{ env.conan_version }}
    - name: Set up conan
      id: conan-setup
      run: |
        conan profile detect
        conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs --index 0
        PROFILE_FILE=$(conan profile path default)
        echo "Update profile file: $PROFILE_FILE"
        echo "[buildenv]" >> $PROFILE_FILE 
        echo "CC=ccache cl" >> $PROFILE_FILE
        echo "CXX=ccache cl" >> $PROFILE_FILE
        cat $PROFILE_FILE
      shell: bash
    - name: Build tket
      run: |
        Get-Command ccache
        conan install tket -s build_type=Release --user=tket --channel=stable --build=missing -o boost/*:header_only=True -o with_all_tests=True
        conan build tket -s build_type=Release --user=tket --channel=stable --build=missing -o boost/*:header_only=True -o with_all_tests=True
        dir "D:\a\tket\tket\tket\build" -recurse
        #Get-Content -Path "D:\a\tket\tket\tket\build\Release\tket.sln" | Write-Host
    - name: Upload package
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
      run: |
        conan create tket --user=tket --channel=stable --build=missing -o boost/*:header_only=True
        conan remote login -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_2 }} tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_2 }}
        conan upload tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable -r=tket-libs
    - name: ccache stats on windows
      if: matrix.os == 'windows-2022'
      run: |
        ccache -s
        ccache -z

#  build_test_tket_macos_arm64:
#    name: Build and test tket (macos-arm64)
#    runs-on: ['self-hosted', 'macOS', 'ARM64']
#    needs: check_changes
#    if: needs.check_changes.outputs.tket_changed == 'true' && github.repository == 'CQCL/tket'
#    steps:
#    - uses: actions/checkout@v3
#    - name: Install conan
#      uses: turtlebrowser/get-conan@v1.2
#      with:
#        version: ${{ env.conan_version }}
#    - name: Set up conan
#      run: |
#        conan profile detect --force
#        conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs --force
#        conan cache clean
#    - name: Build tket
#      run: conan create tket --user=tket --channel=test_build --build=missing -o boost/*:header_only=True -o with_test=True -o with_proptest=True
#    - name: Upload package
#      if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
#      run: |
#        conan create tket --user=tket --channel=stable --build=missing -o boost/*:header_only=True
#        conan remote login -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_2 }} tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_2 }}
#        conan upload tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable -r=tket-libs
#
#  build_test_pytket_ubuntu:
#    name: Build and test pytket (ubuntu)
#    needs: check_changes
#    if: needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.pytket_changed == 'true'
#    runs-on: ubuntu-22.04
#    steps:
#    - uses: actions/checkout@v3
#    - name: Install conan
#      uses: turtlebrowser/get-conan@v1.2
#      with:
#        version: ${{ env.conan_version }}
#    - name: Set up conan
#      run: |
#        conan profile detect
#        conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs
#    - name: check that version is consistent
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      run: ./.github/workflows/check-tket-reqs  ${{ needs.check_changes.outputs.tket_ver }}
#    - name: Build tket
#      if: needs.check_changes.outputs.tket_changed == 'true'
#      run: conan create tket --user tket --channel stable --build=missing -o boost/*:header_only=True -o tklog/*:shared=True -o tket/*:shared=True -tf ""
#    - name: Install tket
#      if: needs.check_changes.outputs.tket_changed != 'true'
#      run: conan install --requires tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable --build=missing -o boost/*:header_only=True -o tklog/*:shared=True -o tket/*:shared=True
#    - name: Install pytket requirements
#      run: |
#        conan create recipes/pybind11
#        conan create recipes/pybind11_json/all --version 0.2.13
#    - name: Set up Python (pull request)
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.9"
#    - name: Set up Python (push)
#      if: github.event_name == 'push'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.10"
#    - name: Set up Python (schedule)
#      if: github.event_name == 'schedule'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.11"
#    - name: Build pytket
#      run: |
#        cd pytket
#        pip install -e .[ZX] -v
#    - name: Run doctests
#      run: |
#        cd pytket
#        pip install pytest
#        pytest --doctest-modules pytket
#    - name: Test pytket with coverage
#      if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
#      run: |
#        cd pytket/tests
#        pip install -r requirements.txt
#        pytest --ignore=simulator/ --hypothesis-seed=1 --cov=../pytket --cov-branch --cov-report=html --cov-report=xml:htmlcov/cov.xml
#    - name: Test pytket
#      if: github.event_name != 'pull_request' || github.event_name == 'workflow_dispatch'
#      run: |
#        cd pytket/tests
#        pip install -r requirements.txt
#        pytest --ignore=simulator/
#    - name: Test building docs
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      timeout-minutes: 20
#      run: |
#        pip install -r pytket/docs/requirements.txt
#        ./.github/workflows/build-docs
#    - name: Upload artefact
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      uses: actions/upload-artifact@v3
#      with:
#        name: pytket_docs
#        path: pytket/docs/build/html/
#    - name: Upload pytket coverage artefact
#      if: github.event_name == 'pull_request' || github.event_name == 'push' || github.event_name == 'workflow_dispatch'
#      uses: actions/upload-artifact@v3
#      with:
#        name: pytket_test_coverage
#        path: pytket/tests/htmlcov
#    - name: Upload package
#      if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.check_changes.outputs.tket_changed == 'true'
#      run: |
#        conan remote login -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_2 }} tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_2 }}
#        conan upload tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable -r=tket-libs
#
#  build_test_pytket_macos:
#    name: Build and test pytket (macos)
#    needs: check_changes
#    if: needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.pytket_changed == 'true'
#    runs-on: macos-12
#    steps:
#    - uses: actions/checkout@v3
#    - name: Select Python 3.10
#      # otherwise turtlebrowser/get-conan@v1.2 fails on macos-12
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.10'
#    - name: Install conan
#      uses: turtlebrowser/get-conan@v1.2
#      with:
#        version: ${{ env.conan_version }}
#    - name: Set up conan
#      run: |
#        conan profile detect
#        conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs
#    - name: check that version is consistent
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      run: ./.github/workflows/check-tket-reqs  ${{ needs.check_changes.outputs.tket_ver }}
#    - name: Build tket
#      if: needs.check_changes.outputs.tket_changed == 'true'
#      run: conan create tket --user tket --channel stable --build=missing -o boost/*:header_only=True -o tklog/*:shared=True -o tket/*:shared=True -tf ""
#    - name: Install tket
#      if: needs.check_changes.outputs.tket_changed != 'true'
#      run: conan install --requires tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable --build=missing -o boost/*:header_only=True -o tklog/*:shared=True -o tket/*:shared=True
#    - name: Install pytket requirements
#      run: |
#        conan create recipes/pybind11
#        conan create recipes/pybind11_json/all --version 0.2.13
#    - name: Set up Python (pull request)
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.9"
#    - name: Set up Python (push)
#      if: github.event_name == 'push'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.10"
#    - name: Set up Python (schedule)
#      if: github.event_name == 'schedule'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.11"
#    - name: Build pytket
#      run: |
#        cd pytket
#        pip install -e .[ZX] -v
#    - name: Run doctests
#      run: |
#        cd pytket
#        pip install pytest
#        pytest --doctest-modules pytket
#    - name: Test pytket
#      run: |
#        cd pytket/tests
#        pip install -r requirements.txt
#        pytest --ignore=simulator/
#    - name: Run mypy
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      run: |
#        pip install -U mypy
#        cd pytket
#        mypy --config-file=mypy.ini --no-incremental -p pytket -p tests
#    - name: Upload package
#      if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.check_changes.outputs.tket_changed == 'true'
#      run: |
#        conan remote login -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_2 }} tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_2 }}
#        conan upload tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable -r=tket-libs
#
#  build_test_pytket_windows:
#    name: Build and test pytket (windows)
#    needs: check_changes
#    if: needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.pytket_changed == 'true'
#    runs-on: windows-2022
#    steps:
#    - uses: actions/checkout@v3
#    - name: Install conan
#      uses: turtlebrowser/get-conan@v1.2
#      with:
#        version: ${{ env.conan_version }}
#    - name: Set up conan
#      run: |
#        conan profile detect
#        conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs
#    - name: check that version is consistent
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      run: ./.github/workflows/check-tket-reqs  ${{ needs.check_changes.outputs.tket_ver }}
#    - name: normalize line endings in conanfile and src directory
#      # This is necessary to ensure consistent revisions across platforms.
#      # Conan's revision hash is composed of hashes of all the exported files,
#      # so we must normalize the line endings in these.
#      run: |
#        $conanfile = 'tket/conanfile.py'
#        $cmakelists = 'tket/CMakeLists.txt'
#        $src_files = Get-ChildItem "tket/src" -File -Recurse
#        $include_files = Get-ChildItem "tket/include" -File -Recurse
#        $test_files = Get-ChildItem "tket/test" -File -Recurse
#        $proptest_files = Get-ChildItem "tket/proptest" -File -Recurse
#        foreach ($f in @($conanfile) + @($cmakelists) + $src_files + $include_files + $test_files + $proptest_files) {
#          $normalized_file = [IO.File]::ReadAllText($f) -replace "`r`n", "`n"
#          [IO.File]::WriteAllText($f, $normalized_file)
#        }
#    - name: Build tket
#      if: needs.check_changes.outputs.tket_changed == 'true'
#      run: conan create tket --user tket --channel stable --build=missing -o boost/*:header_only=True -o tklog/*:shared=True -o tket/*:shared=True -tf `"`"
#    - name: Install tket
#      if: needs.check_changes.outputs.tket_changed != 'true'
#      run: conan install --requires tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable --build=missing -o boost/*:header_only=True -o tklog/*:shared=True -o tket/*:shared=True
#    - name: Install pytket requirements
#      run: |
#        conan create recipes/pybind11
#        conan create recipes/pybind11_json/all --version 0.2.13
#    - name: Set up Python (3.9)
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.9"
#    - name: Set up Python (3.10)
#      if: github.event_name == 'push'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.10"
#    - name: Set up Python (3.11)
#      if: github.event_name == 'schedule'
#      uses: actions/setup-python@v4
#      with:
#        python-version: "3.11"
#    - name: Build pytket
#      run: |
#        cd pytket
#        pip install -e .[ZX] -v
#    - name: Run doctests
#      run: |
#        cd pytket
#        pip install pytest
#        pytest --doctest-modules pytket
#    - name: Test pytket
#      run: |
#        cd pytket/tests
#        pip install -r requirements.txt
#        pytest --ignore=simulator/
#    - name: Upload package
#      if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.check_changes.outputs.tket_changed == 'true'
#      run: |
#        conan remote login -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_2 }} tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_2 }}
#        conan upload tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable -r=tket-libs
#
#  build_test_pytket_macos_arm64:
#    name: Build and test pytket (macos-arm64)
#    runs-on: ['self-hosted', 'macOS', 'ARM64']
#    needs: check_changes
#    if: (needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.pytket_changed == 'true') && github.repository == 'CQCL/tket'
#    steps:
#    - uses: actions/checkout@v3
#    - name: Install conan
#      uses: turtlebrowser/get-conan@v1.2
#      with:
#        version: ${{ env.conan_version }}
#    - name: Set up conan
#      run: |
#        conan profile detect --force
#        conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs --force
#    - name: check that version is consistent
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      run: ./.github/workflows/check-tket-reqs  ${{ needs.check_changes.outputs.tket_ver }}
#    - name: Remove tket package from cache
#      run: conan remove -c 'tket/*'
#    - name: Build tket
#      if: needs.check_changes.outputs.tket_changed == 'true'
#      run: conan create tket --user tket --channel stable --build=missing -o boost/*:header_only=True -o tklog/*:shared=True -o tket/*:shared=True -tf ""
#    - name: Uninstall conan
#      run: pip3 uninstall -y conan
#    - name: Build and test pytket (3.9)
#      if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#      run: |
#        eval "$(pyenv init -)"
#        pyenv shell tket-3.9
#        PKG_CONFIG_PATH="$(brew --prefix openblas)"/lib/pkgconfig pip install -U scipy
#        pip install conan==${{ env.conan_version }}
#        conan remove -c "pybind11/*"
#        conan remove -c "pytket/*"
#        conan create recipes/pybind11
#        conan create recipes/pybind11_json/all --version 0.2.13
#        cd pytket
#        pip uninstall -y pytket
#        pip install -e .[ZX] -v
#        pytest --doctest-modules pytket
#        cd tests
#        pip install -r requirements.txt
#        pytest --ignore=simulator/
#    - name: Build and test pytket (3.10)
#      if: github.event_name == 'push'
#      run: |
#        eval "$(pyenv init -)"
#        pyenv shell tket-3.10
#        PKG_CONFIG_PATH="$(brew --prefix openblas)"/lib/pkgconfig pip install -U scipy
#        pip install conan==${{ env.conan_version }}
#        conan remove -c "pybind11/*"
#        conan remove -c "pytket/*"
#        conan create recipes/pybind11
#        conan create recipes/pybind11_json/all --version 0.2.13
#        cd pytket
#        pip uninstall -y pytket
#        pip install -e .[ZX] -v
#        pytest --doctest-modules pytket
#        cd tests
#        pip install -r requirements.txt
#        pytest --ignore=simulator/
#    - name: Build and test pytket (3.11)
#      if: github.event_name == 'schedule'
#      run: |
#        eval "$(pyenv init -)"
#        pyenv shell tket-3.11
#        PKG_CONFIG_PATH="$(brew --prefix openblas)"/lib/pkgconfig pip install -U scipy
#        pip install conan==${{ env.conan_version }}
#        conan remove -c "pybind11/*"
#        conan remove -c "pytket/*"
#        conan create recipes/pybind11
#        conan create recipes/pybind11_json/all --version 0.2.13
#        cd pytket
#        pip uninstall -y pytket
#        pip install -e .[ZX] -v
#        pytest --doctest-modules pytket
#        cd tests
#        pip install -r requirements.txt
#        pytest --ignore=simulator/
#    - name: Install conan
#      uses: turtlebrowser/get-conan@v1.2
#      with:
#        version: ${{ env.conan_version }}
#    - name: Upload package
#      if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.check_changes.outputs.tket_changed == 'true'
#      run: |
#        conan remote login -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_2 }} tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_2 }}
#        conan upload tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable -r=tket-libs
#        conan remote logout tket-libs
#
#  publish_pytket_coverage:
#    name: Publish pytket coverage
#    needs: build_test_pytket_ubuntu
#    concurrency: gh_pages
#    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
#    runs-on: ubuntu-22.04
#    steps:
#    - uses: actions/checkout@v3
#      with:
#        ref: gh-pages
#    - name: Download artefact
#      uses: actions/download-artifact@v3
#      with:
#        name: pytket_test_coverage
#        path: htmlcov/
#    - name: Configure git
#      run: |
#        git config --global user.email "tket-bot@cambridgequantum.com"
#        git config --global user.name  "«$GITHUB_WORKFLOW» github action"
#    - name: Remove old report
#      run: git rm -r docs/pytket/test-coverage
#    - name: Add report to repository
#      run: |
#        mv htmlcov docs/pytket/test-coverage
#        git add -f docs/pytket/test-coverage
#        git commit --allow-empty -m "Add generated pytket coverage report."
#    - name: Publish report
#      run: git push origin gh-pages:gh-pages
#
#  check_pytket_coverage:
#    name: Check pytket line and branch coverage
#    needs: build_test_pytket_ubuntu
#    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
#    runs-on: ubuntu-22.04
#    steps:
#    - uses: actions/checkout@v3
#    - name: Download artefact
#      uses: actions/download-artifact@v3
#      with:
#        name: pytket_test_coverage
#        path: pytket-test-coverage/
#    - name: Compare with latest report from develop
#      run: |
#        wget https://cqcl.github.io/tket/pytket/test-coverage/cov.xml -O oldcov.xml
#        ./.github/workflows/compare-pytket-coverage oldcov.xml pytket-test-coverage/cov.xml
