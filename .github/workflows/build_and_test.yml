name: Build and test

on:
  pull_request:
    branches:
      - main
      - develop
  push:
    branches:
      - develop
  schedule:
    # 03:00 every Saturday morning
    - cron: '0 3 * * 6'

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  check_changes:
    name: Check tket library version
    runs-on: ubuntu-22.04
    outputs:
      tket_changed: ${{ steps.filter.outputs.tket }}
      tket_tests_changed: ${{ steps.filter.outputs.tket_tests }}
      tket_proptests_changed: ${{ steps.filter.outputs.tket_proptests }}
      pytket_changed: ${{ steps.filter.outputs.pytket }}
      tket_ver: ${{ steps.tket_ver.outputs.tket_ver }}
      tket_package_exists: ${{ steps.tket_package_exists.outputs.tket_package_exists }}
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - uses: dorny/paths-filter@v2.11.0
      id: filter
      with:
        base: ${{ github.ref }}
        filters: |
          tket:
            - '{tket/src/**,recipes/tket/conanfile.py}'
          tket_tests:
            - '{tket/tests/**,recipes/tket-tests/conanfile.py}'
          tket_proptests:
            - '{tket/proptests/**,recipes/tket-proptests/conanfile.py}'
          pytket:
            - 'pytket/**'
    - name: parse version from conanfile
      id: tket_ver
      run: |
        pip install conan~=1.53
        tket_ver=$(conan inspect --raw version recipes/tket/conanfile.py)
        echo "::set-output name=tket_ver::${tket_ver}"
    - name: See if version exists on remote
      id: test_package_exists
      run: |
        conan remote clean
        conan remote add tket-libs https://quantinuumsw.jfrog.io/artifactory/api/conan/tket1-libs
        tket_package_exists=`conan search -r tket-libs "tket/${{ steps.tket_ver.outputs.tket_ver }}@tket/stable" > /dev/null 2>&1 && echo true || echo false`
        echo "::set-output name=tket_package_exists::${tket_package_exists}"
    - name: Check tket version bump
      if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'develop' && steps.filter.outputs.tket == 'true' && steps.test_package_exists.outputs.tket_package_exists == 'true'
      run: exit 1

  build_test_tket:
    name: Build and test (tket)
    needs: check_changes
    strategy:
      matrix:
        os: ['ubuntu-22.04', 'macos-12', 'windows-2022']
    runs-on: ${{ matrix.os }}
    env:
      CONAN_REVISIONS_ENABLED: 1
    steps:
    - uses: actions/checkout@v3
    - name: Check C++ code formatting
      if: matrix.os == 'macos-12' && github.event_name == 'pull_request'
      run: |
        brew update
        brew install clang-format@14
        git ls-files "*.cpp" "*.hpp" | xargs clang-format -style=file --dry-run --Werror
    - name: Get current time
      uses: josStorer/get-current-time@v2.0.1
      id: current_time
      with:
        format: YYYYMMDDHHmmss
    - name: Use ccache
      uses: hendrikmuhs/ccache-action@v1.2.2
      with:
        key: ${{ github.job }}-${{ runner.os }}-ccache-${{ steps.current_time.outputs.formattedTime }}
        restore-keys: |
          ${{ github.job }}-${{ runner.os }}-ccache-
    - name: apt update
      if: matrix.os == 'ubuntu-22.04'
      run: sudo apt update
    - name: Check doxygen
      if: matrix.os == 'ubuntu-22.04' && github.event_name == 'pull_request'
      run: |
        sudo apt install -y doxygen graphviz
        cd tket && doxygen
    - name: Install conan
      uses: turtlebrowser/get-conan@v1.1
      with:
        version: '1.53.0'
    - name: Set up conan
      shell: bash
      run: ./.github/workflows/conan-setup
    - name: set option to run full test suite
      if: github.event_name == 'schedule'
      run: conan profile update options.tket-tests:full=True tket
    - name: normalize line endings in conanfile and src directory
      if: matrix.os == 'windows-2022'
      # This is necessary to ensure consistent revisions across platforms.
      # Conan's revision hash is composed of hashes of all the exported files,
      # so we must normalize the line endings in these.
      run: |
        $conanfile ='recipes/tket/conanfile.py'
        $normalized_file = [IO.File]::ReadAllText($conanfile) -replace "`r`n", "`n"
        [IO.File]::WriteAllText($conanfile, $normalized_file)
        $src_files = Get-ChildItem "tket/src" -File -Recurse
        foreach ($f in $src_files) {
          $normalized_file = [IO.File]::ReadAllText($f) -replace "`r`n", "`n"
          [IO.File]::WriteAllText($f, $normalized_file)
        }
    - name: Build tket
      if: needs.check_changes.outputs.tket_changed == 'true'
      run: conan create --profile=tket recipes/tket tket/stable --build=missing --build=tket
    - name: Install tket
      if: needs.check_changes.outputs.tket_changed != 'true'
      run: conan install --profile=tket tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable
    - name: check that version is consistent
      if: matrix.os == 'ubuntu-22.04' && github.event_name == 'pull_request'
      run: |
        conan create --profile=tket recipes/pybind11
        ./.github/workflows/check-tket-reqs  ${{ needs.check_changes.outputs.tket_ver }}
    - name: Install runtime test requirements
      if: matrix.os == 'ubuntu-22.04' && (needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.tket_tests_changed == 'true') && github.event_name == 'schedule'
      run: |
        sudo apt install texlive texlive-latex-extra latexmk
        mkdir -p ~/texmf/tex/latex
        wget http://mirrors.ctan.org/graphics/pgf/contrib/quantikz/tikzlibraryquantikz.code.tex -P ~/texmf/tex/latex
    - name: Build and run tket tests
      if: needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.tket_tests_changed == 'true'
      run: conan create --profile=tket recipes/tket-tests
    - name: Build and run tket proptests
      if: needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.tket_proptests_changed == 'true'
      run: conan create --profile=tket recipes/tket-proptests --build=missing --build=tket-proptests
    - name: Upload tket conan package
      uses: actions/upload-artifact@v3
      with:
        name: tket_conan_${{ matrix.os }}
        path: ~/.conan/data/tket
    - name: Upload package
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.check_changes.outputs.tket_changed == 'true'
      run: |
        conan user -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_2 }} -r tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_2 }}
        conan upload tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable --all -r=tket-libs

  build_test:
    name: Build and test
    needs: build_test_tket
    strategy:
      matrix:
        os: ['ubuntu-22.04', 'macos-12', 'windows-2022']
        pyver: ['3.8', '3.9', '3.10']
    runs-on: ${{ matrix.os }}
    env:
      CONAN_REVISIONS_ENABLED: 1
    steps:
    - uses: actions/checkout@v3
    - name: Install conan
      uses: turtlebrowser/get-conan@v1.1
      with:
        version: '1.53.0'
    - name: Set up conan
      shell: bash
      run: ./.github/workflows/conan-setup
    - name: Download tket conan package
      uses: actions/download-artifact@v3
      with:
        name: tket_conan_${{ matrix.os }}
        path: ~/.conan/data/tket
    - name: Install pybind11
      run: conan create --profile=tket recipes/pybind11
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.pyver }}
    - name: Build pytket
      run: |
        cd pytket
        pip install -e . -v
    - name: Test pytket with coverage
      if: matrix.os == 'ubuntu-22.04' && matrix.pyver == '3.8'
      run: |
        cd pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules --hypothesis-seed=1 --cov=../pytket --cov-branch --cov-report=html --cov-report=xml:htmlcov/cov.xml
    - name: Test pytket
      if: matrix.os != 'ubuntu-22.04' || matrix.pyver != '3.8'
      run: |
        cd pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules
    - name: Test building docs
      if: matrix.os == 'ubuntu-22.04' && matrix.pyver == '3.9' && github.event_name == 'pull_request'
      timeout-minutes: 20
      run: |
        pip install -r pytket/docs/requirements.txt
        ./.github/workflows/build-docs
    - name: Run mypy
      if: matrix.os == 'macos-12' && matrix.pyver == '3.9' && github.event_name == 'pull_request'
      run: |
        pip install -U mypy
        cd pytket
        mypy --config-file=mypy.ini --no-incremental -p pytket -p tests
    - name: Upload pytket coverage artefact
      if: matrix.os == 'ubuntu-22.04' && matrix.pyver == '3.8' && (github.event_name == 'pull_request' || github.event_name == 'push')
      uses: actions/upload-artifact@v3
      with:
        name: pytket_test_coverage
        path: pytket/tests/htmlcov

  macos-m1:
    name: Build and test (MacOS M1)
    runs-on: ['self-hosted', 'macOS', 'ARM64']
    needs: check_changes
    if: github.event_name == 'push' || github.event_name == 'schedule' || github.event.pull_request.head.repo.full_name == github.repository
    env:
      CONAN_REVISIONS_ENABLED: 1
    steps:
    - uses: actions/checkout@v3
    - name: Set up conan
      shell: bash
      run: |
        ./.github/workflows/conan-setup
        export CC=`which conan`
        echo "CONAN_CMD=${CC}" >> $GITHUB_ENV
    - name: set option to run full test suite
      if: github.event_name == 'schedule'
      run: conan profile update options.tket-tests:full=True tket
    - name: Remove tket package from cache
      run: conan remove -f 'tket/*'
    - name: Build tket
      if: needs.check_changes.outputs.tket_changed == 'true'
      run: conan create --profile=tket recipes/tket tket/stable --build=missing --build=tket
    - name: Build and run tket tests
      if: needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.tket_tests_changed == 'true'
      run: conan create --profile=tket recipes/tket-tests
    - name: Build and run tket proptests
      if: needs.check_changes.outputs.tket_changed == 'true' || needs.check_changes.outputs.tket_proptests_changed == 'true'
      run: conan create --profile=tket recipes/tket-proptests
    - name: Install pybind11
      run: conan create --profile=tket recipes/pybind11
    - name: Build pytket (3.8)
      if: github.event_name == 'push'
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-3.8
        PKG_CONFIG_PATH="$(brew --prefix openblas)"/lib/pkgconfig pip install -U scipy
        cd pytket
        pip uninstall -y pytket
        pip install -e . -v
    - name: Test pytket (3.8)
      if: github.event_name == 'push'
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-3.8
        cd pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules
    - name: Build pytket (3.9)
      if: github.event_name == 'pull_request'
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-3.9
        PKG_CONFIG_PATH="$(brew --prefix openblas)"/lib/pkgconfig pip install -U scipy
        cd pytket
        pip uninstall -y pytket
        pip install -e . -v
    - name: Test pytket (3.9)
      if: github.event_name == 'pull_request'
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-3.9
        cd pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules
    - name: Build pytket (3.10)
      if: github.event_name == 'schedule'
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-3.10
        PKG_CONFIG_PATH="$(brew --prefix openblas)"/lib/pkgconfig pip install -U scipy
        cd pytket
        pip uninstall -y pytket
        pip install -e . -v
    - name: Test pytket (3.10)
      if: github.event_name == 'schedule'
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-3.10
        cd pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules
    - name: Upload package
      if: github.event_name == 'push' && github.ref == 'refs/heads/develop' && needs.check_changes.outputs.tket_changed == 'true'
      run: |
        conan user -p ${{ secrets.JFROG_ARTIFACTORY_TOKEN_2 }} -r tket-libs ${{ secrets.JFROG_ARTIFACTORY_USER_2 }}
        conan upload tket/${{ needs.check_changes.outputs.tket_ver }}@tket/stable --all -r=tket-libs
        conan user -c


  publish_pytket_coverage:
    name: Publish pytket coverage
    needs: build_test
    concurrency: gh_pages
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
      with:
        ref: gh-pages
    - name: Download artefact
      uses: actions/download-artifact@v3
      with:
        name: pytket_test_coverage
        path: htmlcov/
    - name: Configure git
      run: |
        git config --global user.email "tket-bot@cambridgequantum.com"
        git config --global user.name  "«$GITHUB_WORKFLOW» github action"
    - name: Remove old report
      run: git rm -r docs/pytket/test-coverage
    - name: Add report to repository
      run: |
        mv htmlcov docs/pytket/test-coverage
        git add -f docs/pytket/test-coverage
        git commit --allow-empty -m "Add generated pytket coverage report."
    - name: Publish report
      run: git push origin gh-pages:gh-pages

  check_pytket_coverage:
    name: Check pytket line and branch coverage
    needs: build_test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    - name: Download artefact
      uses: actions/download-artifact@v3
      with:
        name: pytket_test_coverage
        path: pytket-test-coverage/
    - name: Compare with latest report from develop
      run: |
        wget https://cqcl.github.io/tket/pytket/test-coverage/cov.xml -O oldcov.xml
        ./.github/workflows/compare-pytket-coverage oldcov.xml pytket-test-coverage/cov.xml
