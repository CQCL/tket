name: Release

on:
  release:
    types:
      - created
      - edited
  push:
    branches:
      - 'wheel/**'

jobs:
  build_Linux_wheels:
    name: Build manylinux
    runs-on: ubuntu-20.04
    env:
      PY_VERS: cp38-cp38 cp39-cp39 cp310-cp310
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up container
      run: |
        docker create --name linux_build -i -v /:/host quay.io/pypa/manylinux2014_x86_64:latest /bin/bash
        docker cp . linux_build:/tket/
    - name: Run build
      run: |
        docker start linux_build
        docker exec -e PY_VERS="${PY_VERS}" linux_build /bin/bash -c "/tket/.github/workflows/linuxbuildwheel"
        mkdir wheelhouse
        docker cp linux_build:/tket/pytket/audited/. wheelhouse/
        docker rm --force -v linux_build
    - uses: actions/upload-artifact@v3
      with:
        name: Linux_wheels
        path: wheelhouse/

  build_macos_wheels:
    name: Build macos wheels
    runs-on: macos-11
    env:
      CONAN_REVISIONS_ENABLED: 1
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Get current time
      uses: srfrnk/current-time@v1.1.0
      id: current_time
      with:
        format: YYYYMMDDHHmmss
    - name: Cache conan data
      uses: actions/cache@v3
      with:
        path: ~/.conan
        key: ${{ runner.os }}-tket-conan-${{ steps.current_time.outputs.formattedTime }}
        restore-keys: |
          ${{ runner.os }}-tket-conan-
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    - name: Build tket C++
      run: |
        pip install conan
        conan profile new tket --detect --force
        conan profile update options.tket:shared=True tket
        conan remote add tket-conan https://tket.jfrog.io/artifactory/api/conan/tket-conan --force
        conan install --profile=tket boost/1.79.0@ --build=missing
        conan create --profile=tket recipes/tket
    - name: Install pybind11
      run: conan create --profile=tket recipes/pybind11
    - name: Build wheel (3.8)
      run: .github/workflows/build_macos_wheel
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Build wheel (3.9)
      run: .github/workflows/build_macos_wheel
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Build wheel (3.10)
      run: .github/workflows/build_macos_wheel
    - uses: actions/upload-artifact@v3
      with:
        name: MacOS_wheels
        path: wheelhouse/

  build_macos_M1_wheels:
    name: Build macos (M1) wheels
    runs-on: [self-hosted, macos, M1]
    env:
      CONAN_REVISIONS_ENABLED: 1
    defaults:
      run:
        shell: "/usr/bin/arch -arch arm64e /bin/bash {0}"
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Build wheels
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-3.8
        conan profile new tket --detect --force
        conan profile update options.tket:shared=True tket
        conan remote add tket-conan https://tket.jfrog.io/artifactory/api/conan/tket-conan --force
        conan install --profile=tket boost/1.79.0@ --build=missing
        conan create --profile=tket recipes/tket
        conan create --profile=tket recipes/pybind11
        .github/workflows/build_macos_m1_wheel
        pyenv shell tket-3.9
        .github/workflows/build_macos_m1_wheel
        pyenv shell tket-3.10
        .github/workflows/build_macos_m1_wheel
    - uses: actions/upload-artifact@v3
      with:
        name: MacOS_M1_wheels
        path: wheelhouse/

  build_Windows_wheels:
    name: Build Windows wheels
    runs-on: windows-2019
    env:
      CONAN_REVISIONS_ENABLED: 1
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - name: Hash tket source
      id: hash_tket_source
      run: |
        Function Get-FolderHash
        {
            param ($folder)
            $files = dir $folder -Recurse |? { -not $_.psiscontainer }
            $allBytes = new-object System.Collections.Generic.List[byte]
            foreach ($file in $files)
            {
                $allBytes.AddRange([System.IO.File]::ReadAllBytes($file.FullName))
                $allBytes.AddRange([System.Text.Encoding]::UTF8.GetBytes($file.Name))
            }
            $hasher = [System.Security.Cryptography.MD5]::Create()
            $ret = [string]::Join("",$($hasher.ComputeHash($allBytes.ToArray()) | %{"{0:x2}" -f $_}))
            return $ret
        }
        $tket_hash = Get-FolderHash tket
        echo "::set-output name=tket_hash::${tket_hash}"
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Install conan
      run: |
        pip install conan
        conan profile new tket --detect
        conan profile update options.tket:shared=True tket
        $conan_cmd = (gcm conan).Path
        echo "CONAN_CMD=${conan_cmd}" >> $GITHUB_ENV
    - name: add remote
      run: conan remote add tket-conan https://tket.jfrog.io/artifactory/api/conan/tket-conan
    - name: Cache tket build
      id: cache-tket
      uses: actions/cache@v3
      with:
        path: C:\Users\runneradmin\.conan\data\tket
        key: ${{ runner.os }}-tket-tket-${{ steps.hash_tket_source.outputs.tket_hash }}-11
    - name: Build tket
      if: steps.cache-tket.outputs.cache-hit != 'true'
      run: conan create --profile=tket recipes/tket
    - name: Install pybind11
      run: conan create --profile=tket recipes/pybind11
    - name: Set up Python 3.8
      uses: actions/setup-python@v3
      with:
        python-version: '3.8'
    - name: Build wheel (3.8)
      run: |
        cd pytket
        python -m pip install -U pip build
        python -m build --outdir "${{ github.workspace }}/wheelhouse/3.8"
    - uses: actions/upload-artifact@v3
      with:
        name: Windows_wheels
        path: wheelhouse/
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Build wheel (3.9)
      run: |
        cd pytket
        python -m pip install -U pip build
        python -m build --outdir "${{ github.workspace }}/wheelhouse/3.9"
    - uses: actions/upload-artifact@v3
      with:
        name: Windows_wheels
        path: wheelhouse/
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
    - name: Build wheel (3.10)
      run: |
        cd pytket
        python -m pip install -U pip build
        python -m build --outdir "${{ github.workspace }}/wheelhouse/3.10"
    - uses: actions/upload-artifact@v3
      with:
        name: Windows_wheels
        path: wheelhouse/

  test_linux_wheels:
    name: Test linux wheels
    needs: build_Linux_wheels
    runs-on: ubuntu-20.04
    env:
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download wheels
        uses: actions/download-artifact@v3
        with:
          name: Linux_wheels
          path: wheelhouse/
      - name: Install wheel
        run: pip install wheelhouse/${{ matrix.python-version }}.*/pytket-*.whl
      - uses: actions/checkout@v3
        with:
            path: tket
      - name: Setup tests
        run: |
          cd tket/pytket/tests
          pip install -r requirements.txt
      - name: Run tests
        run: cd tket/pytket/tests && pytest --ignore=simulator/ --doctest-modules

  test_macos_wheels:
    name: Test macos wheels
    needs: build_macos_wheels
    runs-on: macos-11
    env:
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: MacOS_wheels
        path: wheelhouse/
    - uses: actions/checkout@v3
      with:
        path: tket
    - name: Install wheel
      run: |
        pip install $GITHUB_WORKSPACE/wheelhouse/${{ matrix.python-version }}.*/pytket-*.whl
    - name: Run tests
      run: |
        cd tket/pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules

  test_macos_wheels_10_15:
    name: Test macos wheels on 10.15
    needs: build_macos_wheels
    runs-on: macos-10.15
    env:
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: MacOS_wheels
        path: wheelhouse/
    - uses: actions/checkout@v3
      with:
        path: tket
    - name: Install wheel
      run: |
        pip install $GITHUB_WORKSPACE/wheelhouse/${{ matrix.python-version }}.*/pytket-*.whl
    - name: Run tests
      run: |
        cd tket/pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules

  test_macos_M1_wheels:
    name: Test macos (M1) wheels
    needs: build_macos_M1_wheels
    runs-on: [self-hosted, macos, M1]
    defaults:
      run:
        shell: "/usr/bin/arch -arch arm64e /bin/bash {0}"
    env:
      PRIVATE_PYPI_PASS: ${{ secrets.PRIVATE_PYPI_PASS }}
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: MacOS_M1_wheels
        path: wheelhouse/
    - uses: actions/checkout@v3
      with:
        path: tket
    - name: Install wheel
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-${{ matrix.python-version }}
        pip uninstall -y pytket
        pip install $GITHUB_WORKSPACE/wheelhouse/${{ matrix.python-version }}.*/pytket-*.whl
    - name: Run tests
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-${{ matrix.python-version }}
        cd pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules

  test_Windows_wheels:
    name: Test Windows wheels
    needs: build_Windows_wheels
    runs-on: windows-2019
    env:
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: Windows_wheels
        path: wheelhouse/
    - name: Install wheel
      shell: bash
      run: for i in wheelhouse/${{ matrix.python-version }}/pytket-*.whl ; do pip install $i ; done
    - uses: actions/checkout@v3
      with:
          path: tket
    - name: Run tests
      run: |
        pip install pytest hypothesis
        cd tket/pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules

  publish_to_pypi:
    name: Publish to pypi
    if: github.event_name == 'release'
    needs: [test_linux_wheels, test_macos_wheels, test_macos_wheels_10_15, test_macos_M1_wheels, test_Windows_wheels]
    runs-on: ubuntu-20.04
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v3
      with:
        path: wheelhouse
    - name: Put them all in the dist folder
      run: |
        mkdir dist
        for w in `find wheelhouse/ -type f -name "*.whl"` ; do cp $w dist/ ; done
    - name: Publish wheels
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_PYTKET_API_TOKEN }}
        verbose: true

  build_docs:
    name: Build docs
    needs: publish_to_pypi
    if: github.event_name == 'release'
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: '0'
    - name: Set up Python 3.9
      uses: actions/setup-python@v3
      with:
        python-version: '3.9'
    - name: Download wheels
      uses: actions/download-artifact@v3
      with:
        name: Linux_wheels
        path: wheelhouse/
    - name: Install pip, wheel
      run: pip install -U pip wheel
    - name: Install pytket
      run: for w in `find wheelhouse/ -type f -name "*-cp39-cp39-*.whl"` ; do pip install $w ; done
    - name: Install docs dependencies
      run: pip install -r pytket/docs/requirements.txt
    - name: Build docs
      timeout-minutes: 20
      run: ./.github/workflows/build-docs
    - name: Upload artefact
      uses: actions/upload-artifact@v3
      with:
        name: pytket_docs
        path: pytket/docs/build/html/

  publish_docs:
    name: Publish docs
    needs: build_docs
    concurrency: gh_pages
    if: github.event_name == 'release' && github.event.release.prerelease != true
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
      with:
        ref: gh-pages
    - name: Download artefact
      uses: actions/download-artifact@v3
      with:
        name: pytket_docs
        path: api/
    - name: Configure git
      run: |
        git config --global user.email "tket-bot@cambridgequantum.com"
        git config --global user.name  "«$GITHUB_WORKFLOW» github action"
    - name: Remove old docs
      run: git rm -r docs/pytket/api
    - name: Add generated docs to repository
      run: |
        mkdir -p docs/pytket/
        mv api/ docs/pytket/
        git add -f docs/pytket/api/
        git commit --allow-empty -m "Add generated pytket documentation."
    - name: Publish docs
      run:  git push origin gh-pages:gh-pages
