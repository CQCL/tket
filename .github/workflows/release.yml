name: Release

on:
  release:
    types:
      - created
      - edited
  push:
    branches:
      - 'wheel/**'

jobs:
  build_Linux_wheels:
    name: Build manylinux
    runs-on: ubuntu-20.04
    env:
      PY_VERS: cp37-cp37m cp38-cp38 cp39-cp39
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up container
      run: |
        docker create --name linux_build -i -v /:/host quay.io/pypa/manylinux2014_x86_64:2021-08-01-bce1ff9 /bin/bash
        docker cp . linux_build:/tket/
    - name: Run build
      run: |
        docker start linux_build
        docker exec -e PY_VERS="${PY_VERS}" linux_build /bin/bash -c "/tket/.github/workflows/linuxbuildwheel"
        mkdir wheelhouse
        docker cp linux_build:/tket/pytket/audited/. wheelhouse/
        docker rm --force -v linux_build
    - uses: actions/upload-artifact@v2
      with:
        name: Linux_wheels
        path: wheelhouse/

  build_macos_wheels:
    name: Build macos wheels
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Build bubble
      run: |
        pip install conan
        conan profile new tket --detect --force
        conan config set general.revisions_enabled=1
        conan create --profile=tket --build=missing recipes/tket
    - name: Build wheel (3.7)
      run: .github/workflows/build_macos_wheel
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Build wheel (3.8)
      run: .github/workflows/build_macos_wheel
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Build wheel (3.9)
      run: .github/workflows/build_macos_wheel
    - uses: actions/upload-artifact@v2
      with:
        name: MacOS_wheels
        path: wheelhouse/

  build_macos_M1_wheels:
    name: Build macos (M1) wheels
    runs-on: [self-hosted, macos, M1]
    defaults:
      run:
        shell: "/usr/bin/arch -arch arm64e /bin/bash {0}"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Build wheels
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-3.8
        conan profile new tket --detect --force
        conan config set general.revisions_enabled=1
        conan install --profile=tket boost/1.77.0@ --build=missing -o boost:without_fiber=True -o boost:without_json=True -o boost:without_nowide=True
        conan create --profile=tket recipes/tket -o boost:without_fiber=True -o boost:without_json=True -o boost:without_nowide=True
        .github/workflows/build_macos_m1_wheel
        pyenv shell tket-3.9
        .github/workflows/build_macos_m1_wheel
    - uses: actions/upload-artifact@v2
      with:
        name: MacOS_M1_wheels
        path: wheelhouse/

  build_Windows_wheels:
    name: Build Windows wheels
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Hash bubble source
      id: hash_bubble_source
      run: |
        Function Get-FolderHash
        {
            param ($folder)
            $files = dir $folder -Recurse |? { -not $_.psiscontainer }
            $allBytes = new-object System.Collections.Generic.List[byte]
            foreach ($file in $files)
            {
                $allBytes.AddRange([System.IO.File]::ReadAllBytes($file.FullName))
                $allBytes.AddRange([System.Text.Encoding]::UTF8.GetBytes($file.Name))
            }
            $hasher = [System.Security.Cryptography.MD5]::Create()
            $ret = [string]::Join("",$($hasher.ComputeHash($allBytes.ToArray()) | %{"{0:x2}" -f $_}))
            return $ret
        }
        $bubble_hash = Get-FolderHash bubble
        echo "::set-output name=bubble_hash::${bubble_hash}"
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Install conan
      run: |
        pip install conan
        conan profile new tket --detect
        conan config set general.revisions_enabled=1
        $conan_cmd = (gcm conan).Path
        echo "CONAN_CMD=${conan_cmd}" >> $GITHUB_ENV
    - name: Cache bubble build
      id: cache-bubble
      uses: actions/cache@v2
      with:
        path: C:\Users\runneradmin\.conan\data\tket
        key: ${{ runner.os }}-tket-bubble-${{ steps.hash_bubble_source.outputs.bubble_hash }}-5
    - name: Build tket
      if: steps.cache-bubble.outputs.cache-hit != 'true'
      run: |
        conan create --profile=tket recipes/tket
    - name: Set up Python 3.7
      uses: actions/setup-python@v2
      with:
        python-version: 3.7
    - name: Build wheel (3.7)
      run: |
        pip install wheel
        cd pytket
        python -m pip install -U pip setuptools_scm
        python setup.py bdist_wheel -d "${{ github.workspace }}/wheelhouse/3.7"
    - uses: actions/upload-artifact@v2
      with:
        name: Windows_wheels
        path: wheelhouse/
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Build wheel (3.8)
      run: |
        pip install wheel
        cd pytket
        python -m pip install -U pip setuptools_scm
        python setup.py bdist_wheel -d "${{ github.workspace }}/wheelhouse/3.8"
    - uses: actions/upload-artifact@v2
      with:
        name: Windows_wheels
        path: wheelhouse/
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Build wheel (3.9)
      run: |
        pip install wheel
        cd pytket
        python -m pip install -U pip setuptools_scm
        python setup.py bdist_wheel -d "${{ github.workspace }}/wheelhouse/3.9"
    - uses: actions/upload-artifact@v2
      with:
        name: Windows_wheels
        path: wheelhouse/

  test_linux_wheels:
    name: Test linux wheels
    needs: build_Linux_wheels
    runs-on: ubuntu-20.04
    env:
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download wheels
        uses: actions/download-artifact@v2
        with:
          name: Linux_wheels
          path: wheelhouse/
      - name: Install wheel
        run: pip install wheelhouse/${{ matrix.python-version }}.*/pytket-*.whl
      - uses: actions/checkout@v2
        with:
            path: tket
      - name: Setup tests
        run: |
          cd tket/pytket/tests
          pip install -r requirements.txt
      - name: Run tests
        run: cd tket/pytket/tests && pytest --ignore=simulator/ --doctest-modules

  test_macos_wheels:
    name: Test macos wheels
    needs: build_macos_wheels
    runs-on: macos-11
    env:
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheels
      uses: actions/download-artifact@v2
      with:
        name: MacOS_wheels
        path: wheelhouse/
    - uses: actions/checkout@v2
      with:
        path: tket
    - name: Install wheel
      run: |
        pip install $GITHUB_WORKSPACE/wheelhouse/${{ matrix.python-version }}.*/pytket-*.whl
    - name: Run tests
      run: |
        cd tket/pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules

  test_macos_wheels_10_15:
    name: Test macos wheels on 10.15
    needs: build_macos_wheels
    runs-on: macos-10.15
    env:
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheels
      uses: actions/download-artifact@v2
      with:
        name: MacOS_wheels
        path: wheelhouse/
    - uses: actions/checkout@v2
      with:
        path: tket
    - name: Install wheel
      run: |
        pip install $GITHUB_WORKSPACE/wheelhouse/${{ matrix.python-version }}.*/pytket-*.whl
    - name: Run tests
      run: |
        cd tket/pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules

  test_macos_M1_wheels:
    name: Test macos (M1) wheels
    needs: build_macos_M1_wheels
    runs-on: [self-hosted, macos, M1]
    defaults:
      run:
        shell: "/usr/bin/arch -arch arm64e /bin/bash {0}"
    env:
      PRIVATE_PYPI_PASS: ${{ secrets.PRIVATE_PYPI_PASS }}
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
    - name: Download wheels
      uses: actions/download-artifact@v2
      with:
        name: MacOS_M1_wheels
        path: wheelhouse/
    - uses: actions/checkout@v2
      with:
        path: tket
    - name: Install wheel
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-${{ matrix.python-version }}
        pip uninstall -y pytket
        pip install $GITHUB_WORKSPACE/wheelhouse/${{ matrix.python-version }}.*/pytket-*.whl
    - name: Run tests
      run: |
        eval "$(pyenv init -)"
        pyenv shell tket-${{ matrix.python-version }}
        cd pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules

  test_Windows_wheels:
    name: Test Windows wheels
    needs: build_Windows_wheels
    runs-on: windows-2019
    env:
      PYTKET_SKIP_REGISTRATION: "true"
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Download wheels
      uses: actions/download-artifact@v2
      with:
        name: Windows_wheels
        path: wheelhouse/
    - name: Install wheel
      shell: bash
      run: for i in wheelhouse/${{ matrix.python-version }}/pytket-*.whl ; do pip install $i ; done
    - uses: actions/checkout@v2
      with:
          path: tket
    - name: Run tests
      run: |
        pip install pytest hypothesis
        cd tket/pytket/tests
        pip install -r requirements.txt
        pytest --ignore=simulator/ --doctest-modules

  publish_to_pypi:
    name: Publish to pypi
    if: github.event_name == 'release'
    needs: [test_linux_wheels, test_macos_wheels, test_macos_wheels_10_15, test_macos_M1_wheels, test_Windows_wheels]
    runs-on: ubuntu-20.04
    steps:
    - name: Download all wheels
      uses: actions/download-artifact@v2
      with:
        path: wheelhouse
    - name: Put them all in the dist folder
      run: |
        mkdir dist
        for w in `find wheelhouse/ -type f -name "*.whl"` ; do cp $w dist/ ; done
    - name: Publish wheels
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_PYTKET_API_TOKEN }}
        verbose: true

  docs:
    name: Build and publish docs
    if: github.event_name == 'release'
    needs: publish_to_pypi
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '0'
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - name: Download wheels
      uses: actions/download-artifact@v2
      with:
        name: Linux_wheels
        path: wheelhouse/
    - name: Install pip, wheel
      run: pip install -U pip wheel
    - name: Install pytket
      run: for w in `find wheelhouse/ -type f -name "*-cp39-cp39-*.whl"` ; do pip install $w ; done
    - name: Install docs dependencies
      run: pip install -r pytket/docs/requirements.txt
    - name: Build docs
      timeout-minutes: 20
      run: ./.github/workflows/build-docs
    - name: Configure git
      run: |
        git config --global user.email "tket-bot@cambridgequantum.com"
        git config --global user.name  "«$GITHUB_WORKFLOW» github action"
    - name: Check out gh-pages branch
      run: git checkout gh-pages
    - name: Remove old docs
      run: git rm -r --ignore-unmatch doc/pytket/api
    - name: Add generated docs to repository
      run: |
        mkdir -p doc/pytket/
        mv pytket/docs/build/html/ doc/pytket/api
        git add -f doc/pytket/api/
        git commit --allow-empty -m "Add generated pytket documentation."
    - name: Publish docs
      run:  git push origin gh-pages:gh-pages
