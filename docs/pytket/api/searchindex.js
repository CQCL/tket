Search.setIndex({"docnames": ["architecture", "backends", "changelog", "circuit", "circuit_class", "classical", "config", "display", "extensions", "faqs", "getting_started", "index", "install", "logging", "mapping", "optype", "partition", "passes", "pauli", "placement", "predicates", "qasm", "quipper", "tableau", "tailoring", "transform", "unit_id", "utils", "wasm", "zx"], "filenames": ["architecture.rst", "backends.rst", "changelog.rst", "circuit.rst", "circuit_class.rst", "classical.rst", "config.rst", "display.rst", "extensions.rst", "faqs.rst", "getting_started.rst", "index.rst", "install.rst", "logging.rst", "mapping.rst", "optype.rst", "partition.rst", "passes.rst", "pauli.rst", "placement.rst", "predicates.rst", "qasm.rst", "quipper.rst", "tableau.rst", "tailoring.rst", "transform.rst", "unit_id.rst", "utils.rst", "wasm.rst", "zx.rst"], "titles": ["pytket.architecture", "pytket.backends", "Changelog", "pytket.circuit", "pytket.circuit.Circuit", "pytket.circuit.logic_exp", "pytket.config", "pytket.circuit.display", "pytket extensions", "TKET FAQs", "Getting Started", "pytket", "Installation Troubleshooting", "pytket.logging", "pytket.mapping", "pytket.circuit.OpType", "pytket.partition", "pytket.passes", "pytket.pauli", "pytket.placement", "pytket.predicates", "pytket.qasm", "pytket.quipper", "pytket.tableau", "pytket.tailoring", "pytket.transform", "pytket.unit_id", "pytket.utils", "pytket.wasm", "pytket.zx"], "terms": {"class": [0, 1, 2, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29], "_tket": [0, 1, 3, 4, 5, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 29], "describ": [0, 1, 3, 4, 11, 12, 17, 19, 23, 26, 29], "connect": [0, 1, 2, 4, 7, 8, 10, 11, 17, 19, 20, 25, 27, 29], "qubit": [0, 1, 2, 3, 4, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29], "gener": [0, 1, 2, 4, 7, 9, 10, 11, 15, 16, 17, 18, 19, 21, 22, 25, 27, 29], "devic": [0, 1, 2, 8, 10, 11, 15, 17, 19, 25, 26, 27], "__init__": [0, 1, 3, 4, 6, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29], "arg": [0, 1, 2, 3, 4, 17, 18, 20, 23, 25, 26, 29], "kwarg": [0, 1, 2, 3, 4, 7, 17, 18, 19, 20, 23, 25, 26, 27, 29], "overload": [0, 3, 4, 17, 18, 20, 23, 25, 26, 29], "function": [0, 2, 3, 4, 5, 7, 9, 11, 14, 15, 17, 18, 20, 21, 23, 25, 26, 27, 28, 29], "self": [0, 3, 4, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 29], "none": [0, 1, 3, 4, 5, 6, 7, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29], "produc": [0, 1, 2, 4, 8, 17, 25, 27], "an": [0, 1, 2, 3, 4, 7, 8, 10, 11, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29], "empti": [0, 1, 2, 4, 16, 17, 18, 29], "sequenc": [0, 1, 2, 3, 4, 10, 11, 14, 15, 16, 17, 18, 20, 23, 25, 26, 27, 29], "tupl": [0, 1, 3, 4, 5, 14, 18, 19, 24, 25, 27, 29], "int": [0, 1, 3, 4, 5, 7, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29], "The": [0, 1, 2, 3, 4, 6, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29], "constructor": [0, 2, 3, 14, 19, 20, 24, 29], "between": [0, 1, 2, 3, 9, 10, 11, 15, 19, 24, 25, 27, 29], "paramet": [0, 1, 2, 3, 4, 6, 7, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "A": [0, 1, 2, 3, 4, 5, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 23, 24, 25, 26, 27, 29], "list": [0, 1, 2, 3, 4, 5, 7, 8, 11, 16, 17, 18, 19, 24, 25, 26, 27, 29], "pair": [0, 2, 3, 4, 17, 18, 19, 25, 27, 29], "repres": [0, 1, 3, 4, 6, 8, 10, 11, 15, 18, 19, 22, 23, 25, 27, 29], "indic": [0, 2, 3, 4, 16, 19, 23, 27, 29], "can": [0, 1, 2, 3, 7, 8, 9, 10, 11, 14, 16, 17, 19, 20, 21, 25, 27, 29], "perform": [0, 1, 2, 3, 4, 9, 10, 16, 17, 18, 19, 23, 24, 25, 27, 29], "two": [0, 1, 2, 3, 4, 5, 8, 9, 15, 17, 18, 19, 20, 25, 27, 29], "oper": [0, 1, 2, 3, 4, 5, 8, 9, 11, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 27, 29], "unit_id": [0, 1, 3, 4, 5, 11, 14, 17, 18, 19, 20, 23, 25, 29], "node": [0, 1, 2, 11, 17, 19, 20, 25, 26, 27, 29], "static": [0, 3, 4, 15, 16, 17, 18, 19, 20, 25, 26, 27, 29], "from_dict": [0, 1, 2, 3, 4, 5, 16, 17, 19, 20, 27], "arg0": [0, 3, 4, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 29], "dict": [0, 1, 3, 4, 5, 6, 7, 14, 16, 17, 18, 19, 20, 24, 25, 27, 29], "construct": [0, 1, 2, 3, 4, 5, 6, 10, 15, 16, 17, 18, 19, 20, 23, 26, 27, 28, 29], "instanc": [0, 1, 2, 3, 4, 6, 7, 8, 15, 16, 17, 18, 19, 20, 24, 26, 27, 29], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29], "json": [0, 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 26, 27], "serializ": [0, 1, 2, 3, 4, 5, 16, 17, 18, 19, 20, 26, 27], "represent": [0, 1, 3, 4, 11, 16, 17, 18, 19, 20, 26, 27, 28], "get_adjacent_nod": 0, "set": [0, 1, 2, 3, 4, 5, 7, 9, 10, 11, 13, 15, 16, 17, 20, 21, 22, 24, 25, 27, 29], "given": [0, 1, 2, 3, 4, 6, 7, 14, 15, 17, 19, 20, 22, 23, 24, 25, 27, 28, 29], "return": [0, 1, 2, 3, 4, 5, 8, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29], "adjac": [0, 2, 15, 25, 29], "get_dist": 0, "node_0": 0, "node_1": 0, "distanc": [0, 19], "them": [0, 2, 4, 10, 11, 16, 17, 25, 27, 29], "to_dict": [0, 1, 2, 3, 4, 5, 6, 16, 17, 19, 20, 27], "contain": [0, 1, 2, 3, 4, 7, 9, 14, 15, 17, 19, 20, 21, 23, 26, 27, 29], "link": [0, 11, 12], "valid_oper": [0, 2], "uid": [0, 29], "bool": [0, 1, 3, 4, 5, 7, 14, 16, 17, 18, 19, 20, 23, 25, 27, 28, 29], "execut": [0, 1, 2, 3, 10, 15, 20], "graph": [0, 2, 11, 16, 17, 19, 20, 25, 27, 29], "unitid": [0, 1, 2, 3, 4, 11, 14, 26, 29], "valid": [0, 1, 2, 4, 5, 17, 21, 29], "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29], "being": [0, 2, 3, 4, 5, 12, 14, 18, 19, 24], "check": [0, 1, 2, 3, 4, 11, 14, 16, 17, 27, 28, 29], "properti": [0, 1, 2, 3, 4, 7, 13, 15, 16, 17, 18, 20, 25, 26, 27, 29], "coupl": [0, 1, 2, 11, 12], "map": [0, 1, 2, 3, 4, 5, 11, 16, 17, 18, 19, 20, 24, 25, 27, 29], "all": [0, 1, 2, 3, 4, 5, 7, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 24, 25, 27, 29], "object": [0, 1, 2, 3, 4, 6, 7, 14, 16, 17, 18, 19, 20, 21, 27, 29], "fullyconnect": [0, 1, 2, 11, 19], "specialis": [0, 2, 8, 29], "non": [0, 1, 2, 4, 17, 20, 23, 25, 27, 29], "emul": [0, 2, 11], "Not": [0, 15], "compat": [0, 1, 2, 3, 7, 10, 12, 15, 17, 25, 28, 29], "rout": [0, 1, 2, 4, 11, 14, 17, 19, 25], "placement": [0, 2, 11, 17, 20, 25], "method": [0, 1, 2, 3, 4, 6, 9, 10, 11, 14, 16, 17, 19, 21, 23, 25, 27, 29], "n": [0, 2, 3, 4, 15, 16, 17, 18, 20, 23, 25, 27, 29], "label": [0, 2, 14, 15, 17, 19], "str": [0, 1, 3, 4, 5, 6, 7, 15, 17, 21, 22, 25, 26, 27, 28, 29], "fcnode": 0, "fulli": [0, 2], "number": [0, 1, 2, 3, 4, 7, 10, 14, 16, 17, 18, 19, 20, 23, 24, 25, 27, 28, 29], "name": [0, 1, 2, 3, 4, 8, 11, 13, 15, 16, 17, 18, 22, 25, 26, 27, 28, 29], "ringarch": [0, 2, 11], "inherit": [0, 1, 14, 29], "arrang": [0, 17], "ring": 0, "ringnod": 0, "ringarchitectur": 0, "some": [0, 1, 2, 3, 4, 7, 9, 11, 12, 14, 15, 16, 17, 20, 23, 24, 26, 27, 29], "undirect": [0, 20, 29], "squaregrid": [0, 2, 11], "squar": [0, 25], "lattic": 0, "row": [0, 1, 2, 4, 23, 26, 27], "column": [0, 1, 3, 4, 26, 27], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27, 28, 29], "valu": [0, 1, 2, 3, 4, 5, 6, 10, 15, 16, 17, 18, 25, 26, 27, 28, 29], "increas": [0, 1, 2, 3, 4, 12, 17, 20, 27], "first": [0, 2, 4, 5, 14, 15, 16, 19, 27, 29], "along": [0, 1, 4, 19], "e": [0, 1, 2, 3, 4, 5, 8, 9, 12, 15, 17, 19, 23, 25, 26, 27, 29], "3": [0, 1, 4, 9, 10, 11, 12, 15, 17, 25, 27], "x": [0, 3, 4, 9, 10, 11, 12, 15, 17, 18, 23, 25, 27, 29], "grid": [0, 2, 26], "0": [0, 1, 3, 4, 7, 9, 10, 12, 15, 17, 18, 20, 25, 27, 29], "1": [0, 1, 3, 4, 7, 8, 9, 10, 12, 14, 15, 17, 18, 19, 20, 23, 24, 25, 27, 29], "2": [0, 1, 3, 4, 7, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 25, 27, 29], "4": [0, 1, 3, 4, 7, 15, 17, 25, 27], "5": [0, 1, 4, 5, 7, 20, 27, 29], "6": [0, 1, 12, 27], "7": [0, 1, 4], "8": [0, 1, 3, 4, 21, 23, 27], "n_row": 0, "n_column": 0, "gridnod": 0, "n_layer": 0, "layer": [0, 14, 26], "qind_to_squind": 0, "index": [0, 2, 3, 4, 11, 16, 17, 18, 21, 23, 26, 27], "convert": [0, 1, 2, 7, 9, 11, 17, 21, 22, 23, 27, 29], "singl": [0, 1, 2, 3, 4, 7, 15, 17, 18, 19, 23, 25, 26, 27, 29], "global": [0, 2, 4, 13, 15, 17, 18, 22, 25, 27, 29], "correspond": [0, 1, 2, 3, 4, 10, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 29], "squind_to_qind": 0, "abstract": [1, 2, 4, 6, 10], "associ": [1, 2, 3, 4, 27], "In": [1, 2, 3, 4, 8, 9, 10, 14, 17, 19, 20, 21, 25, 27, 29], "interfac": [1, 2, 8, 10, 11], "quantum": [1, 2, 3, 4, 8, 9, 10, 11, 15, 17, 20, 25, 27, 29], "simul": [1, 2, 10, 11, 23, 27], "differ": [1, 8, 9, 10, 15, 29], "defin": [1, 3, 4, 6, 7, 8, 9, 10, 14, 15, 17, 20, 22, 27, 29], "variou": [1, 2, 17, 27], "extens": [1, 2, 6, 7, 9, 10, 12, 21, 29], "modul": [1, 2, 3, 6, 8, 10, 11, 17, 19, 21, 24, 27], "core": [1, 7, 12], "There": [1, 2, 8, 9, 10, 11, 12, 17, 20, 27, 29], "sever": [1, 2, 3, 7, 11, 17], "exampl": [1, 2, 3, 8, 9, 10, 11, 17, 20, 27], "notebook": [1, 2, 4, 10, 11, 17, 20], "": [1, 2, 3, 4, 8, 9, 10, 15, 16, 17, 18, 19, 24, 25, 27, 29], "If": [1, 3, 4, 7, 11, 12, 17, 19, 20, 25, 27, 28, 29], "you": [1, 4, 7, 10, 11, 12, 15, 27], "interest": [1, 4], "develop": [1, 11, 12], "your": [1, 11, 12, 17, 21, 27, 28], "own": [1, 2, 10, 17, 20, 27], "see": [1, 3, 4, 5, 9, 10, 11, 12, 15, 17, 19, 20, 25, 27], "creat": [1, 2, 3, 4, 11, 17, 19, 27, 29], "tutori": [1, 2, 4, 10, 11, 15, 17, 19], "specif": [1, 2, 3, 8, 10, 11, 17, 27, 29], "quantinuumbackend": [1, 8], "found": [1, 11, 17, 19, 24, 29], "here": [1, 9, 10, 11], "also": [1, 4, 7, 8, 10, 11, 15, 17, 20, 21, 25, 27, 29], "run": [1, 2, 8, 10, 11, 12, 16, 17, 20, 22, 25, 27, 29], "section": [1, 5, 9, 10, 17, 20], "user": [1, 2, 3, 4, 8, 9, 10, 15, 17, 19, 20, 27], "manual": [1, 2, 4, 5, 9, 10, 11, 17, 19, 20], "directli": [1, 2, 7, 10, 11, 29], "sourc": [1, 2, 4, 5, 6, 7, 10, 17, 21, 22, 27, 28, 29], "thi": [1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 19, 20, 21, 23, 24, 25, 26, 27, 29], "structur": [1, 2, 3, 17, 27, 29], "someth": 1, "circuit": [1, 2, 8, 9, 10, 11, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "output": [1, 2, 3, 4, 5, 7, 15, 17, 20, 21, 23, 24, 27, 29], "least": [1, 17, 18, 25, 29], "one": [1, 2, 3, 4, 5, 7, 9, 11, 15, 17, 20, 25, 27, 29], "shot": [1, 2, 3, 8, 16, 27], "count": [1, 2, 3, 17, 23, 25, 27, 29], "state": [1, 2, 3, 4, 8, 10, 15, 17, 18, 27, 29], "unitari": [1, 2, 3, 4, 11, 15, 23, 24, 25, 27, 29], "classmethod": [1, 5, 6, 27], "available_devic": [1, 2], "ani": [1, 2, 3, 4, 5, 6, 11, 17, 20, 21, 24, 25, 27, 29], "retriev": [1, 2, 4, 16, 27], "avail": [1, 2, 7, 8, 9, 11, 12, 15, 16, 17, 25, 27, 29], "includ": [1, 2, 3, 8, 10, 12, 16, 17, 20, 21, 27, 28, 29], "architectur": [1, 2, 4, 11, 14, 17, 19, 20, 25, 27], "support": [1, 2, 3, 4, 10, 12, 14, 17, 21, 22, 25, 27], "gate": [1, 2, 3, 4, 7, 9, 10, 11, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27], "error": [1, 2, 4, 13, 17, 19, 25, 27, 29], "other": [1, 2, 3, 4, 10, 11, 12, 15, 17, 18, 20, 21, 25, 27, 29], "hardwar": [1, 9], "inform": [1, 2, 3, 13, 14, 15, 17, 27, 29], "type": [1, 2, 3, 4, 5, 9, 11, 17, 20, 22, 23, 25, 26, 27, 29], "cancel": [1, 2, 17, 25], "handl": [1, 2, 9, 21, 26, 29], "job": 1, "rais": [1, 2, 4, 5, 17, 27, 29], "notimplementederror": 1, "doe": [1, 2, 3, 15, 16, 17, 19, 27], "circuit_statu": 1, "circuitstatu": [1, 2], "report": [1, 2, 11, 12], "default_compilation_pass": [1, 2], "optimisation_level": [1, 2], "basepass": [1, 2, 11, 17], "suggest": 1, "compil": [1, 2, 8, 10, 11, 12, 15, 17, 20, 27], "pass": [1, 2, 4, 10, 11, 19, 25, 27], "possibl": [1, 2, 4, 7, 10, 12, 16, 17, 25, 27, 29], "equival": [1, 2, 4, 5, 15, 16, 17, 25], "suitabl": [1, 2, 4, 17, 27], "At": [1, 12], "minimum": [1, 3, 16, 27], "ensur": [1, 2, 29], "us": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 14, 15, 16, 17, 18, 19, 20, 21, 23, 25, 27, 28, 29], "interact": [1, 3, 4, 7, 10, 11, 12, 15, 19], "higher": [1, 9, 10], "optimis": [1, 2, 4, 10, 11, 17, 23, 25], "level": [1, 2, 9, 10, 11, 13, 27], "further": [1, 2, 4, 17, 25, 27, 29], "mai": [1, 3, 4, 11, 12, 15, 16, 17, 20, 24, 25, 27, 29], "appli": [1, 2, 3, 4, 8, 10, 11, 15, 17, 19, 23, 25, 27, 29], "which": [1, 2, 3, 4, 8, 9, 10, 15, 16, 17, 19, 20, 22, 25, 27, 29], "implement": [1, 2, 3, 4, 9, 14, 17, 18, 27, 29], "itself": 1, "so": [1, 2, 9, 12, 17, 18, 23, 25, 27, 29], "tailor": [1, 2, 11], "requir": [1, 2, 4, 7, 10, 12, 16, 17, 20, 24, 27, 29], "option": [1, 2, 3, 4, 6, 7, 8, 16, 17, 21, 25, 27, 29], "dure": [1, 2], "solv": [1, 11, 19], "constraint": [1, 2, 8, 19], "without": [1, 4, 18, 27, 29], "addition": [1, 8], "light": 1, "default": [1, 2, 3, 4, 6, 7, 8, 10, 13, 16, 17, 18, 20, 21, 23, 25, 26, 27, 29], "add": [1, 2, 4, 5, 10, 11, 12, 16, 17, 23, 27, 28, 29], "more": [1, 2, 4, 5, 10, 11, 12, 15, 17, 18, 19, 20, 25, 27], "computation": 1, "intens": 1, "should": [1, 2, 4, 9, 17, 21, 25, 27], "give": [1, 2, 3, 11, 24, 25, 27, 29], "best": [1, 2, 17, 19, 25, 27], "result": [1, 2, 3, 4, 8, 9, 10, 12, 16, 17, 25, 27, 29], "guarante": [1, 2, 3, 4, 29], "predic": [1, 2, 3, 4, 5, 11, 15, 17], "empty_cach": 1, "cach": 1, "get_compiled_circuit": [1, 2, 10], "act": [1, 2, 3, 4, 5, 15, 17, 20, 24, 27, 29], "place": [1, 2, 3, 4, 15, 17, 19, 25, 27, 29], "As": [1, 10, 12, 16, 17], "well": [1, 2, 4, 10, 12, 19], "degre": [1, 15, 16, 29], "control": [1, 2, 3, 4, 10, 15, 17, 20, 22, 25], "tri": [1, 19], "successfulli": 1, "process_circuit": [1, 2], "rebas": [1, 2, 17, 25, 29], "match": [1, 2, 3, 4, 5, 18, 19, 23, 25, 27, 29], "howev": [1, 3, 17, 21], "alwai": [1, 2, 17, 20, 25], "classic": [1, 2, 3, 4, 5, 7, 8, 10, 15, 17, 20, 21, 22, 25, 26, 27, 29], "valid_circuit": 1, "whether": [1, 2, 3, 4, 7, 14, 16, 17, 25, 27], "meet": [1, 10], "after": [1, 2, 17, 19, 23, 25, 27], "befor": [1, 2, 7, 16, 17, 19, 20, 23, 25, 29], "submit": [1, 11], "fail": [1, 4, 12, 17], "obtain": [1, 12, 17, 25, 27], "about": [1, 2, 29], "failur": [1, 2], "iter": [1, 2, 3, 4, 5, 16, 17, 25, 27, 29], "through": [1, 2, 3, 4, 8, 10, 15, 16, 25, 29], "required_pred": 1, "verifi": [1, 16, 20], "each": [1, 2, 3, 4, 10, 11, 14, 16, 17, 19, 20, 24, 25, 27, 29], "turn": [1, 2, 3, 4, 15, 17, 25, 29], "descript": [1, 29], "get_result": [1, 2], "float": [1, 2, 3, 4, 7, 17, 19, 25, 27, 29], "keyword": [1, 2, 4, 17, 22, 25], "argument": [1, 2, 3, 4, 5, 17, 19, 21, 25, 27], "specifi": [1, 2, 3, 4, 9, 15, 17, 20, 23, 24, 25, 27, 29], "deriv": [1, 27], "follow": [1, 2, 3, 4, 5, 7, 8, 10, 11, 12, 17, 20, 21, 25, 27, 29], "timeout": [1, 2, 19], "maximum": [1, 2, 3, 14, 17, 19, 21, 25], "time": [1, 2, 3, 4, 7, 16, 19, 27], "wait": [1, 7], "remot": [1, 8], "finish": 1, "poll": 1, "interv": [1, 3, 17, 20, 25], "call": [1, 2, 3, 4, 15, 17, 25, 29], "pop_result": 1, "remov": [1, 2, 4, 7, 17, 18, 19, 25, 27, 29], "entri": [1, 3, 18, 19, 27], "wa": [1, 17, 19, 25], "present": [1, 2, 9, 17, 29], "resultcach": 1, "n_shot": [1, 2, 10, 27], "valid_check": 1, "true": [1, 2, 3, 4, 7, 16, 17, 18, 20, 25, 27, 28, 29], "store": [1, 2, 4, 15, 27, 28, 29], "get_": 1, "data": [1, 2, 3, 4, 15, 26, 27, 29], "postprocess": 1, "featur": [1, 2, 4, 8, 10, 11], "supports_contextual_optimis": 1, "contextu": [1, 2], "optimisatioon": 1, "have": [1, 2, 3, 4, 8, 9, 11, 12, 15, 17, 19, 20, 21, 25, 27, 29], "necessari": [1, 27], "enabl": [1, 2, 8, 10, 17], "seed": [1, 2], "rng": 1, "note": [1, 9, 15, 17, 20, 21, 27], "reus": 1, "mani": [1, 2, 4, 9, 10, 17, 29], "memori": [1, 2], "grow": 1, "indefinit": 1, "therefor": [1, 15], "when": [1, 2, 4, 9, 14, 15, 17, 19, 21, 25, 27, 29], "process": [1, 2, 8, 17, 25, 27, 29], "statevector": [1, 2, 3, 11, 18, 27], "whose": [1, 3, 4, 17, 23, 27], "occupi": [1, 3], "signific": [1, 2, 18, 27], "amount": 1, "advis": 1, "union": [1, 3, 4, 5, 17, 27, 29], "per": 1, "separ": [1, 2, 4, 8, 10, 11, 12, 25, 27], "explicitli": [1, 3, 27], "satisfi": [1, 2, 17, 20, 25], "input": [1, 2, 3, 4, 15, 16, 17, 20, 23, 24, 25, 27, 29], "inter": [1, 14], "same": [1, 2, 3, 4, 7, 12, 16, 17, 23, 25, 27, 29], "order": [1, 2, 3, 4, 5, 9, 11, 14, 15, 16, 17, 18, 19, 20, 24, 27, 29], "rebase_pass": [1, 2], "optyp": [1, 2, 3, 4, 9, 11, 17, 20, 23, 24, 25, 27], "ignor": [1, 2, 4, 17, 22, 24, 27], "primit": [1, 2], "run_circuit": [1, 2, 10], "conveni": [1, 17, 21, 25], "addit": [1, 2, 4, 8, 10, 12, 15, 16, 17, 21], "backend_info": [1, 2], "exist": [1, 2, 4, 17, 25, 27, 29], "expectation_allows_nonhermitian": 1, "expect": [1, 2, 15, 16, 18, 27, 29], "allow": [1, 2, 4, 8, 10, 11, 17, 21, 25, 27], "hermitan": 1, "persistent_handl": 1, "must": [1, 2, 3, 4, 11, 17, 19, 20, 21, 22, 23, 25, 27, 29], "supports_count": 1, "via": [1, 2, 3, 8, 10, 16, 17, 27, 29], "get_count": [1, 2, 10, 27], "supports_density_matrix": 1, "densiti": [1, 11], "matrix": [1, 2, 3, 4, 11, 15, 17, 18, 27], "get_density_matrix": 1, "supports_expect": 1, "calcul": [1, 2, 4, 8, 18, 27], "supports_shot": 1, "get_shot": [1, 2, 27], "supports_st": 1, "get_stat": [1, 2], "supports_unitari": 1, "get_unitari": [1, 2, 3, 4], "complex": [1, 2, 17, 18, 27, 29], "byte": [1, 27], "multidimension": 1, "identifi": [1, 2, 4, 25, 29], "sent": 1, "initialis": [1, 2, 10], "hashabl": 1, "basic": [1, 2, 3, 11, 25, 29], "either": [1, 2, 3, 4, 5, 11, 17, 23, 25, 26, 27, 29], "persist": 1, "transient": 1, "depend": [1, 2, 15, 17, 22], "consult": 1, "determin": [1, 2, 27], "from_str": 1, "string": [1, 2, 3, 4, 16, 18, 21, 23, 27, 29], "valueerror": [1, 5, 27], "format": [1, 3, 7, 9, 21, 22, 27], "invalid": [1, 2, 29], "q_bit": 1, "c_bit": 1, "bit": [1, 2, 3, 4, 5, 7, 10, 11, 15, 16, 17, 18, 21, 26, 27], "counter": [1, 3, 27], "outcomearrai": [1, 11, 27], "density_matrix": [1, 8], "ppcirc": [1, 27], "encapsul": [1, 2, 3, 4, 16, 29], "case": [1, 2, 3, 9, 11, 16, 17, 25, 27], "real": [1, 3, 8, 27], "base": [1, 2, 3, 6, 8, 12, 15, 17, 19, 24, 27, 29], "typic": [1, 14, 29], "collect": [1, 4, 17, 25, 27], "measur": [1, 2, 4, 10, 15, 16, 17, 19, 20, 25, 27, 29], "ideal": 1, "These": [1, 4, 8, 9, 15, 16, 17, 22, 25], "take": [1, 2, 3, 4, 8, 10, 15, 16, 17, 25, 27], "form": [1, 3, 6, 15, 17, 18, 25, 27, 29], "arrai": [1, 3, 15, 17, 25, 27], "matric": [1, 2, 27], "provid": [1, 2, 3, 4, 8, 9, 10, 11, 17, 19, 20, 24, 25, 27], "res_dict": 1, "dictionari": [1, 2, 3, 4, 5, 6, 17, 18, 19, 27], "get_bitlist": 1, "intern": [1, 2, 7, 29], "storag": 1, "attributeerror": 1, "sort": 1, "cbit": 1, "basi": [1, 2, 3, 4, 15, 16, 17, 27, 29], "basisord": [1, 2, 3, 11, 27], "ilo": [1, 3, 4, 18, 27], "outcom": [1, 15, 27], "subset": [1, 27], "toggl": [1, 3], "lexicograph": [1, 2, 3, 4, 14], "id": [1, 2, 3, 4, 26], "dlo": [1, 3], "decreas": [1, 2, 3, 17], "post": [1, 25, 27], "invalidresulttyp": 1, "get_debug_info": [1, 2], "success": [1, 25], "rate": [1, 2, 19], "assert": [1, 2, 3, 4, 20], "averag": [1, 19, 25, 27], "across": [1, 27], "decompos": [1, 2, 3, 9, 14, 17, 25, 27], "transform": [1, 2, 3, 4, 11, 15, 17, 24, 27, 29], "onli": [1, 2, 3, 4, 5, 7, 9, 13, 14, 17, 20, 22, 24, 25, 27, 29], "its": [1, 2, 4, 10, 15, 17, 20, 23, 25, 27, 29], "yield": [1, 23, 29], "correct": [1, 2, 4, 16, 27, 28, 29], "debug": [1, 13], "qbit": 1, "ndarrai": [1, 3, 4, 8, 18, 23, 27], "permut": [1, 2, 3, 14, 15, 17, 21, 27], "d": [1, 3, 27, 29], "numpi": [1, 3, 4, 18, 23, 27], "np": [1, 27], "get_distribut": 1, "unit": [1, 2, 4, 8, 26], "exact": [1, 17, 25, 27], "approxim": [1, 2, 17, 25, 27], "probabl": [1, 2, 27], "distribut": [1, 2, 11, 12], "over": [1, 2, 4, 5, 15, 17, 18, 22, 23, 25, 27, 29], "known": [1, 2, 12, 17, 25, 27], "otherwis": [1, 4, 12, 17, 25, 27, 29], "estim": [1, 2, 17, 19, 25, 27], "deprec": [1, 2, 3, 17, 19], "pleas": [1, 11, 19], "get_empirical_distribut": 1, "get_probability_distribut": 1, "instead": [1, 2, 9, 12, 17, 19], "marginalis": 1, "bitstr": [1, 3, 27], "empiricaldistribut": [1, 27], "util": [1, 2, 11], "where": [1, 2, 3, 4, 5, 7, 9, 11, 12, 15, 17, 19, 27, 29], "observ": [1, 27], "margin": [1, 27], "probabilitydistribut": [1, 2, 27], "get_qbitlist": 1, "request_id": 1, "storedresult": 1, "accord": [1, 4, 5, 16, 18, 19, 23, 27], "For": [1, 2, 3, 4, 5, 8, 9, 10, 12, 17, 19, 20, 24, 25, 27], "request": [1, 11], "relev": [1, 11, 27, 29], "mixtur": [1, 8], "runtimeerror": [1, 27], "qu": [1, 2, 23], "2d": [1, 4, 27], "readout": [1, 3, 4, 10, 19, 27], "serial": [1, 2, 6, 7, 27], "write": [1, 3, 4, 6, 7, 11, 21, 27], "contains_measured_result": 1, "contains_state_result": 1, "vector": [1, 3, 4, 8, 24, 26, 27], "namedtupl": 1, "field": [1, 2, 3], "alia": [1, 5], "statusenum": 1, "messag": [1, 2], "error_detail": 1, "completed_tim": 1, "datetim": 1, "queued_tim": 1, "submitted_tim": 1, "running_tim": 1, "cancelled_tim": 1, "error_tim": 1, "queue_posit": 1, "extra": [1, 2, 15, 18, 29], "detail": [1, 2, 10, 11, 27], "timestamp": 1, "chang": [1, 2, 3, 7, 17, 24, 25, 29], "queue": [1, 2], "posit": [1, 2, 3, 26, 27, 29], "dic": [1, 5], "9": [1, 4, 10, 11, 12], "enum": [1, 2, 3, 5, 15, 16, 17, 25, 26, 29], "enumer": [1, 5], "complet": [1, 2, 4, 14, 29], "ha": [1, 2, 3, 4, 8, 11, 12, 16, 17, 19, 20, 27, 29], "readi": 1, "queu": 1, "been": [1, 2, 3, 11, 12, 20, 27, 29], "device_nam": 1, "version": [1, 2, 10, 11, 29], "gate_set": 1, "n_cl_reg": 1, "supports_fast_feedforward": 1, "fals": [1, 3, 4, 7, 16, 17, 18, 20, 25, 27, 28, 29], "supports_reset": 1, "supports_midcircuit_measur": 1, "all_node_gate_error": 1, "all_edge_gate_error": 1, "all_readout_error": 1, "averaged_node_gate_error": 1, "averaged_edge_gate_error": 1, "averaged_readout_error": 1, "misc": 1, "factori": [1, 5], "instal": [1, 2, 7, 8, 9, 10, 11, 27], "regist": [1, 2, 3, 4, 5, 15, 17, 18, 20, 21, 23, 26, 27], "flag": [1, 2, 3, 10, 16], "fast": [1, 20, 25], "feedforward": [1, 20], "reset": [1, 2, 3, 4, 15, 17], "supports_midcircuit_mea": 1, "midcircuit": 1, "uncorrel": 1, "2x2": [1, 3], "kei": 1, "add_misc": 1, "val": [1, 5], "new": [1, 2, 3, 4, 7, 11, 14, 16, 17, 18, 19, 24, 25, 26, 27, 29], "get_misc": 1, "keyerror": 1, "n_node": 1, "api": [2, 10], "make": [2, 3, 4, 21, 27, 29], "backendinfo": [2, 11], "synthesisehq": [2, 11, 17], "fix": [2, 3, 4, 10, 11, 12, 25, 27], "squash": [2, 17, 25], "long": 2, "multipl": [2, 3, 4, 15, 17, 24, 27, 29], "due": [2, 4, 17, 22], "round": [2, 17, 25, 27], "pauliframerandomis": [2, 11, 24], "sample_circuit": [2, 24], "noiseawareplac": [2, 11, 19], "now": [2, 12, 22], "assign": [2, 3, 4, 19], "lowest": 2, "q_regist": [2, 4], "c_regist": [2, 4], "regress": 2, "introduc": [2, 17, 24, 25, 27, 29], "certain": [2, 3, 17, 25], "minor": 2, "qasm": [2, 8, 10, 11], "convers": [2, 3, 21], "width": [2, 3, 4, 7, 21, 27], "32": [2, 17, 21, 28], "c": [2, 3, 4, 10, 12, 15, 17, 20, 22, 24, 25, 27, 29], "csdg": [2, 4, 15], "resourcebound": [2, 3, 4, 11], "resourcedata": [2, 3, 4, 11], "dummybox": [2, 3, 4, 11, 15], "get_resourc": [2, 3, 4], "reason": 2, "resourc": [2, 3, 4, 10, 15, 29], "templat": 2, "express": [2, 3, 4, 5, 7, 17, 20, 25, 27, 29], "classicalexpbox": [2, 3, 4, 11, 15, 17], "preserv": [2, 17, 24, 25], "cmd": 2, "incorrect": 2, "serialis": 2, "pauliexppairbox": [2, 3, 4, 11, 15], "pauli": [2, 3, 11, 15, 16, 17, 23, 24, 25, 27, 29], "length": [2, 23, 26, 27, 28], "conjugationbox": [2, 3, 4, 11], "drop": 2, "maco": [2, 10, 11, 12], "full": [2, 7, 8, 14, 17, 18, 22, 27], "strict_check": [2, 17], "repeatpass": [2, 11, 17], "forc": [2, 27], "stop": [2, 15, 17, 19], "unchang": [2, 17], "excluded_typ": [2, 17, 25], "excluded_opgroup": [2, 17, 25], "decomposebox": [2, 11, 17, 25], "effici": [2, 4, 25], "decomposit": [2, 3, 9, 11, 16, 17, 25], "passselector": [2, 11, 17], "automat": [2, 15, 16, 17, 27], "pauliexpbox": [2, 3, 4, 11, 15, 27], "pauliexpcommutingsetbox": [2, 4, 15], "squashrzphasedx": [2, 11, 17], "symbol": [2, 3, 4, 10, 11, 15, 17, 20, 21, 25, 29], "symbol_substit": 2, "circbox": [2, 3, 4, 11, 15, 17, 27], "render": [2, 7, 27], "improv": [2, 17, 23, 25], "bitregist": [2, 4, 5, 11, 26], "qubitregist": [2, 4, 11, 26], "angl": [2, 3, 4, 10, 15, 17, 25, 29], "zzphasetorz": [2, 11, 17, 25], "bind": 2, "sympi": [2, 3, 4, 17, 27, 29], "exp": 2, "command": [2, 3, 4, 8, 11, 12], "phase": [2, 3, 4, 11, 15, 17, 20, 22, 23, 24, 25, 27, 29], "op": [2, 3, 4, 5, 11, 15, 17, 28], "runtim": 2, "cliffordsimp": [2, 11, 17], "slow": [2, 27], "issu": [2, 11, 12], "free_symbol": [2, 3, 4, 29], "symbol_substitut": [2, 3, 4, 29], "pytket": [2, 9, 10], "individu": [2, 10, 17, 24, 25, 27, 29], "rang": [2, 3, 4, 8, 15, 27], "later": [2, 10], "mix": [2, 29], "up": [2, 3, 4, 9, 10, 11, 15, 17, 23, 25, 27], "wasm": [2, 3, 4, 11, 15, 21], "file": [2, 4, 6, 7, 21, 22, 27, 28], "scratch": 2, "overwritten": 2, "condit": [2, 3, 4, 10, 11, 15, 17, 20, 25, 27], "add_conditional_barri": [2, 4], "apply_clifford_basis_change_tensor": [2, 11, 24], "barrier": [2, 4, 14, 15, 17, 20], "metaop": 2, "barrierop": 2, "rebasecustom": [2, 9, 11, 17], "tk2": [2, 4, 9, 15, 17, 20, 25], "box": [2, 3, 4, 14, 15, 17, 23, 25, 29], "cannot": [2, 3, 9, 12, 17], "major": 2, "comput": [2, 3, 4, 8, 10, 11, 17, 24, 26, 27], "action": [2, 3, 23, 24], "uncomput": [2, 3], "pattern": [2, 3, 19], "ad": [2, 3, 4, 8, 11, 17, 19, 23, 25], "equal": [2, 3, 5, 17, 24, 25, 27], "is_clifford": [2, 3], "python": [2, 3, 8, 10, 11, 12, 14, 17], "chain": [2, 17, 29], "would": 2, "overal": [2, 3, 4, 17], "behaviour": [2, 4], "overridden": 2, "always_squash_symbol": [2, 17], "squashcustom": [2, 11, 17], "control_st": [2, 3], "qcontrolbox": [2, 3, 4, 11, 15], "qubitpaulitensor": [2, 11, 18, 23, 24], "combin": [2, 4, 16, 23, 24, 25, 27, 29], "qubitpaulistr": [2, 11, 16, 18, 24, 27], "coeffici": [2, 18], "incorpor": 2, "unitarytableau": [2, 11, 23], "inspect": [2, 17], "track": 2, "backendresult": [2, 11, 27], "depth_2q": [2, 4], "allow_swap": [2, 17, 25], "auto_rebase_pass": [2, 9, 17], "get_statevector": [2, 3, 4], "recent": [2, 12], "x86_64": 2, "conda": [2, 12], "environ": [2, 7, 12], "toffolibox": [2, 3, 4, 11, 15], "switch": 2, "strategi": [2, 3, 11, 16, 17, 25, 27], "toffoliboxsynthstrat": [2, 3], "cycl": [2, 24], "prefer": [2, 3, 11, 17, 25], "zzphase": [2, 4, 15, 17, 25], "cx": [2, 3, 4, 7, 9, 10, 15, 16, 17, 24, 25], "zzmax": [2, 4, 15, 17, 25], "work": [2, 10, 11, 17, 25], "pauliexponenti": [2, 11, 17], "rewrit": [2, 11, 17, 25, 29], "clifford": [2, 3, 11, 16, 17, 20, 23, 24, 25, 29], "peepholeoptimise2q": [2, 11, 17], "miss": [2, 21], "accept": [2, 4, 12], "with_initial_reset": [2, 3], "statepreparationbox": [2, 3, 4, 11, 15], "permit": [2, 14, 20], "prepar": [2, 3, 8, 15, 27], "start": [2, 11, 17, 20, 25], "unknown": 2, "stat": [2, 11], "gate_count": [2, 27], "flattenregist": [2, 11, 17], "updat": [2, 6, 12, 23, 27, 29], "flattenrelabelregisterspass": [2, 11, 17], "even": [2, 7, 15, 17], "target": [2, 4, 9, 10, 17, 19, 25], "2q": 2, "su": 2, "multiplexedtensoredu2box": [2, 3, 4, 11, 15], "synthesis": [2, 3, 15, 17, 23, 25], "multiplex": [2, 3, 15], "tensor": [2, 3, 15, 16, 18, 29], "product": [2, 3, 4, 18, 27], "u2": [2, 3, 4, 15, 25], "maxnclregpred": [2, 11, 20], "most": [2, 11, 12, 17, 18, 20, 27, 29], "left": [2, 4, 15, 17, 19, 25, 27], "tk1": [2, 4, 9, 15, 17, 25], "expos": [2, 17], "circuitrender": [2, 3, 7], "recognis": [2, 4], "rxxyyzz": 2, "hqslib1": [2, 21], "header": [2, 21], "round_angl": [2, 25], "roundangl": [2, 11, 17], "below": [2, 4, 8, 17, 27], "threshold": [2, 27], "dyadic": 2, "fraction": 2, "pi": [2, 3, 4, 10, 15, 17, 25, 27, 29], "throughout": 2, "bug": [2, 10, 11], "get_operator_expectation_valu": [2, 11, 27], "term": [2, 4, 9, 11, 15, 16, 18, 25, 27], "code": [2, 10, 11, 12], "occur": [2, 4, 17, 19, 20, 25, 29], "wire": [2, 3, 4, 7, 17, 20, 22, 24, 25, 29], "pre": [2, 17, 25], "arm": [2, 12], "linux": [2, 10, 11, 12], "platform": [2, 8, 10, 11], "utilis": 2, "multiplexor": [2, 3, 15], "diagonalbox": [2, 3, 4, 11, 15], "diagon": [2, 3, 15, 17], "rz": [2, 3, 4, 7, 9, 10, 15, 17, 24, 25], "networkx": [2, 27], "custom": [2, 3, 4, 10, 14, 17], "relabel": [2, 17, 19], "multipli": [2, 3, 4, 29], "auto": 2, "definit": [2, 3, 4, 10, 17, 27], "circuit_to_qasm_io": [2, 11, 21], "throw": [2, 17, 23], "rather": [2, 4, 17, 27], "than": [2, 4, 5, 17, 20, 25, 27], "abort": 2, "try": [2, 9, 12, 17], "arbitrari": [2, 15, 16, 17, 25, 26, 29], "wasmwir": 2, "keep": [2, 10, 17], "initi": [2, 3, 4, 7, 10, 14, 17, 27], "zxgraphlikeoptimis": [2, 11, 17], "simplifi": [2, 17, 25, 27], "zx": [2, 7, 11, 17, 23], "calculu": [2, 11, 17], "extract": [2, 17, 29], "back": [2, 12, 17, 27, 29], "out": [2, 4, 10, 17, 27, 29], "commutablemeasurespred": [2, 11, 17, 20], "precondit": [2, 17], "delaymeasur": [2, 11, 17], "allow_parti": [2, 17], "delai": [2, 17, 20], "much": [2, 16, 17], "thei": [2, 4, 15, 17, 18, 19, 25, 29], "end": [2, 4, 15, 17, 20, 22, 29], "fullpeepholeoptimis": [2, 11, 17], "correctli": 2, "get_op_map": [2, 3], "unhash": 2, "both": [2, 3, 15, 21, 27, 29], "arm64": [2, 12], "uniformli": [2, 3, 15, 24], "multiplexorbox": [2, 3, 4, 11, 15], "multiplexedrotationbox": [2, 3, 4, 11, 15], "multiplexedu2box": [2, 3, 4, 11, 15], "qubit_readout": [2, 4], "qubit_to_bit_map": [2, 4], "removeimplicitqubitpermut": [2, 11, 17], "paulisimp": [2, 11, 17, 27], "implicit": [2, 4, 17, 21, 25], "swap": [2, 4, 11, 14, 15, 17, 19, 20, 25, 27], "multigatereorderroutingmethod": [2, 11, 14], "edg": [2, 4, 17, 19, 25, 29], "lexiroutelabellingmethod": 2, "hit": 2, "dynam": 2, "alloc": [2, 11], "phasedx": [2, 4, 15, 17, 25], "synthesi": [2, 3, 11, 14, 17], "tdg": [2, 4, 15], "cy": [2, 4, 15], "yyphas": [2, 4, 15, 17], "disallow": 2, "strict": [2, 17], "subregist": 2, "larger": 2, "reorder": [2, 17, 25], "view_brows": [2, 7], "open": [2, 3, 4, 7, 29], "browser": [2, 7], "warn": [2, 3, 13, 27], "detect": [2, 3], "copybit": [2, 15], "read": [2, 3, 6, 20, 22, 23, 27], "respect": [2, 4, 17, 18, 27], "reli": 2, "routingmethod": [2, 11, 14, 17], "defaultmappingpass": [2, 11, 17], "could": [2, 3, 24], "dag": [2, 4, 27], "ecr": [2, 4, 15, 17], "backend": [2, 3, 4, 10, 11, 19, 20, 21, 27], "shortcut": [2, 10], "u1": [2, 4, 15, 25], "u3": [2, 4, 15, 25], "cu1": [2, 4, 15], "cu3": [2, 4, 15], "iswap": [2, 4, 15], "phasediswap": [2, 4, 15], "eswap": [2, 4, 15], "fsim": [2, 4, 15], "sycamor": [2, 4, 15], "iswapmax": [2, 4, 15], "n_1qb_gate": [2, 4], "n_2qb_gate": [2, 4], "n_nqb_gate": [2, 4], "empriricaldistribut": [2, 27], "manipul": [2, 10], "filter": [2, 27, 29], "multi": [2, 14, 17, 25], "affect": [2, 17, 29], "cnxpairwisedecomposit": [2, 11, 17, 25], "replace_swap": [2, 4], "replace_implicit_wire_swap": [2, 4], "unus": [2, 4], "tk_scratch_bit": 2, "logicexp": [2, 3, 5], "everi": [2, 3, 17, 24, 25, 29], "rename_unit": [2, 4], "schema": 2, "lineplac": [2, 11, 19], "ident": [2, 4, 15, 17, 18, 23, 25, 27, 29], "kakdecomposit": [2, 11, 17, 25], "except": [2, 17, 20, 23, 29], "created_qubit": [2, 4], "discarded_qubit": [2, 4], "insid": [2, 29], "signatur": [2, 28, 29], "account": [2, 4, 17, 21], "creation": 2, "discard": [2, 4, 17, 27], "shown": [2, 8], "__repr__": [2, 3, 4, 28], "simplif": [2, 17, 25, 27], "cny": [2, 15, 17], "cnz": [2, 15, 17], "decomposearbitrarilycontrolledg": [2, 11, 17], "cnx": [2, 15, 17, 25], "critic": [2, 13], "decomposetk2": [2, 11, 17, 25], "fidel": [2, 17, 19, 25], "fewer": [2, 4, 17, 25], "while": [2, 16, 25], "commut": [2, 14, 15, 16, 17, 18, 25], "properli": 2, "target_2qb_g": [2, 17, 25], "point": [2, 4, 12, 17, 25, 27, 29], "inaccuraci": 2, "normalisedtk2pred": [2, 11, 17, 20, 25], "threequbitsquash": [2, 11, 17, 25], "altern": [2, 10, 27], "unitary3qbox": [2, 3, 4, 9, 11, 15], "get_circuit": [2, 3, 23], "custompass": [2, 11, 17], "suppli": 2, "measure_regist": [2, 4], "replac": [2, 4, 9, 12, 17, 25, 27, 29], "int_dist_from_st": 2, "relax": 2, "replace_tk2_2cx": 2, "avoid": 2, "crash": 2, "normalisetk2": [2, 11, 17, 25], "half": [2, 3, 4, 15, 17, 25, 29], "normalis": [2, 3, 17, 20, 25], "circuit_to_zx": [2, 11, 29], "zxdiagram": [2, 11, 29], "to_circuit": [2, 23, 29], "diagram": [2, 7, 29], "to_graphviz_str": [2, 29], "graphviz": [2, 27, 29], "packag": [2, 4, 6, 10, 11, 12], "kak": [2, 17, 25], "globalisephasedx": [2, 11, 17, 25], "rotat": [2, 3, 4, 15, 16, 17, 25], "homonym": 2, "algorithm": [2, 17, 27], "significantli": 2, "reduc": [2, 4, 16, 17, 19, 25, 27, 29], "nphasedx": [2, 15, 17, 25], "decomposenphasedx": [2, 25], "extend": [2, 17, 27], "recogn": [2, 25], "cliffordcircuitpred": [2, 11, 20], "circuit_from_qasm_wasm": [2, 11, 21], "pars": 2, "extern": [2, 3, 21], "faster": [2, 16], "capabl": 2, "grammar": [2, 17], "explicit": [2, 3, 27, 29], "three": [2, 3, 4, 9, 15, 17, 19, 25], "synthesisetk": [2, 11, 17], "optimisestandard": [2, 25], "synthes": 2, "phasepolybox": [2, 3, 4, 11, 15], "composephasepolybox": [2, 11, 17], "measurementsetup": [2, 11, 16], "measurementbitmap": [2, 11, 16], "nobarrierspred": [2, 11, 20], "qubitpaulioper": [2, 11, 27], "to_sparse_matrix": [2, 18, 27], "nan": 2, "appear": [2, 5, 15, 20, 29], "substitut": [2, 3, 4, 14, 15, 17, 24, 25, 27, 29], "anymor": 2, "problem": [2, 11, 12], "unassign": 2, "ancilla": [2, 4], "squashhq": 2, "rebasehq": 2, "rebaseprojectq": 2, "rebasepyzx": 2, "rebasequil": 2, "rebaseumd": 2, "rebaseufr": 2, "rebaseoqc": 2, "compile_circuit": 2, "graphplac": [2, 11, 17, 19], "import": [2, 4, 7, 9, 10, 11, 21], "logic": [2, 5, 14, 15, 19, 25, 27], "physic": [2, 14, 19, 25, 26, 27], "def": [2, 4], "add_custom_g": [2, 4], "customgatedef": [2, 3, 4, 11, 15], "gateset": [2, 9, 17, 20, 25], "multiqubit": [2, 25], "characteris": [2, 27], "from_openfermion": 2, "to_openfermion": 2, "program": [2, 15, 19, 22], "telemetri": 2, "subcircuit": [2, 14, 15, 17, 24, 25], "want": [2, 11], "alreadi": [2, 4, 11, 12, 17, 25], "lexirouteroutingmethod": [2, 11, 14, 17], "lexilabellingmethod": [2, 11, 14, 17], "aasrouteroutingmethod": [2, 11, 14], "boxdecompositionroutingmethod": [2, 11, 14], "aaslabellingmethod": [2, 11, 14], "delay_measur": [2, 17], "auto_squash_pass": [2, 17], "attempt": [2, 4, 5, 17, 27, 29], "passess": 2, "get_c_regist": [2, 4], "get_q_regist": [2, 4], "naiveplacementpass": [2, 11, 17], "opgroup": [2, 3, 4, 17, 25], "stamp": 2, "statu": [2, 11], "connectivitypred": [2, 11, 20], "impli": [2, 17, 20], "isol": 2, "second": [2, 4, 7, 15, 27], "jinja2": [2, 7], "caus": 2, "tableaux": 2, "is_clifford_typ": [2, 3], "nodegraph": 2, "__version__": 2, "attribut": 2, "py": [2, 4, 29], "meth": 2, "dagger": [2, 3, 4, 15, 24], "transpos": [2, 3, 4], "globalphasedxpred": 2, "introduct": [2, 10, 11], "paulisquash": [2, 11, 17], "guidedpaulisimp": [2, 11, 17, 27], "xxphase3": [2, 4, 15], "cxconfigtyp": [2, 3, 16, 17, 25], "multiqg": 2, "config": [2, 11, 17], "compilation_pass_from_script": [2, 17], "simpl": [2, 5, 17, 25, 27], "textual": 2, "rebasetotket": [2, 25], "squashtotk1": 2, "rebasetoqiskit": 2, "decomposemultiqubitsibm": 2, "rebaseibm": 2, "synthesiseibm": 2, "usquashibm": 2, "optimisepostrout": [2, 25], "u": [2, 4, 10, 11, 12, 15, 23, 29], "add_assert": [2, 4], "stabiliserassertionbox": [2, 3, 4, 11], "projectorassertionbox": [2, 3, 4, 11], "summaris": [2, 27], "paulistabilis": [2, 3, 11, 18], "nativ": [2, 10, 12, 27], "m1": [2, 12], "compilerpass": 2, "awar": [2, 14, 17, 25], "polynomi": [2, 3, 15, 17], "aasrout": [2, 11, 17], "displai": [2, 3, 11], "style": [2, 7, 23], "colour": [2, 16, 27, 29], "consid": [2, 17, 19, 20, 23, 25], "decomposemultiqubitscx": [2, 11, 17], "decomposesinglequbitstk1": [2, 11, 17], "synthesisetket": [2, 11, 17], "reducesingl": [2, 25], "optimisepauligadget": [2, 25], "optimisephasegadget": [2, 11, 17, 25], "o2pass": 2, "o1pass": 2, "decomposesinglequbitsibm": 2, "g": [2, 3, 8, 9, 12, 15, 23, 26, 27, 29], "numer": [2, 4, 11, 17, 25, 26, 27, 29], "reliabl": 2, "configur": [2, 6, 7, 8, 16, 17], "occasion": 2, "segfault": 2, "do": [2, 4, 17, 20, 21, 25], "still": [2, 20], "achiev": [2, 9, 17, 24, 25], "circ": [2, 3, 7, 10, 16, 17, 21, 23, 25, 27], "former": 2, "add_phas": [2, 4], "qubiterrorcontain": 2, "bugfix": 2, "longer": [2, 19, 25, 27, 29], "toward": [2, 17, 25], "depth": [2, 3, 4, 11, 14, 19, 29], "lead": 2, "shorter": 2, "around": [2, 29], "symengin": 2, "synthesiseoqc": [2, 11, 17], "simplifyiniti": [2, 11, 17], "html": [2, 7, 15, 27], "jupyt": [2, 7], "render_circuit_jupyt": [2, 7], "euleranglereduct": [2, 11, 17], "triplet": 2, "removebarri": [2, 11, 17], "triangulargrid": 2, "hexagonalgrid": 2, "cyclicbutterfli": 2, "small": [2, 27], "optim": [2, 10, 17, 25], "knowledg": [2, 17], "refactor": 2, "pytketconfig": [2, 6, 11], "qiskit": [2, 3, 8, 10, 11, 12, 15], "honeywel": 2, "aqt": [2, 8, 11], "ionq": 2, "qsharp": [2, 8, 11], "braket": [2, 8, 11], "authent": 2, "workspac": 2, "move": [2, 17, 25], "namespac": [2, 4], "cirq": [2, 8, 10, 11], "projectq": [2, 3, 8, 11, 25], "pyquil": [2, 8, 11, 12], "pyzx": [2, 8, 11, 25], "qulac": [2, 8, 11], "corrupt": 2, "window": [2, 10, 11], "encrypt": 2, "password": 2, "recommend": [2, 10, 11, 17, 23, 25], "retri": 2, "openfermion": 2, "break": 2, "aerbackend": [2, 8, 10], "_process_model": 2, "ibmqemulatorbackend": [2, 8], "nois": [2, 8, 17, 24, 25, 27], "model": [2, 8], "subsitut": 2, "abil": 2, "compound": [2, 15], "AND": [2, 4, 5], "OR": [2, 4, 5], "xor": [2, 3, 4, 5], "decomposeclassicalexp": [2, 11, 17], "honeywellbackend": 2, "direct": [2, 4, 9, 17, 20, 25, 27, 29], "ops_of_typ": [2, 4], "commands_of_typ": [2, 4], "spam": [2, 11], "graphcolourmethod": [2, 11, 16, 27], "exhaust": [2, 16], "gen_term_sequence_circuit": [2, 11, 27], "partit": [2, 11, 27], "crx": [2, 4, 15], "cry": [2, 4, 15], "sx": [2, 4, 9, 15, 17], "sxdg": [2, 4, 15], "csx": [2, 4, 15], "csxdg": [2, 4, 15], "cv": [2, 4, 15], "cvdg": [2, 4, 15], "get_config": 2, "sequencepass": [2, 11, 17], "get_sequ": [2, 17], "get_pass": [2, 17], "repeatwithmetricpass": [2, 11, 17], "repeatuntilsatisfiedpass": [2, 11, 17], "get_pred": [2, 17], "get_metr": [2, 17], "spamcorrect": [2, 27], "azur": [2, 8], "mid": [2, 17, 27], "ibmq": [2, 8, 10], "premium": 2, "minimis": [2, 27], "renamequbitspass": [2, 11, 17], "tool": [2, 8, 10, 11, 15, 24, 27], "onlin": 2, "hermitian": [2, 3, 15], "greater": [2, 4, 5], "gatesetpred": [2, 11, 20], "wrap": 2, "softwar": [2, 8, 10, 11, 12], "ibmqbackend": [2, 8, 10], "amazon": [2, 8], "resulthandl": [2, 11], "etc": [2, 3, 12, 27, 29], "qubitmap": 2, "condition_valu": [2, 4], "convent": [2, 3, 4, 9, 18, 27], "opposit": [2, 9], "access": [2, 11, 24], "violat": 2, "circumst": 2, "redesign": 2, "speed": 2, "visualis": [2, 4, 27], "relat": [2, 9, 11, 29], "qubitoper": 2, "pauli_tensor_matrix": 2, "operator_matrix": 2, "renam": [2, 4, 5, 17], "high": [2, 27], "routin": [2, 10, 29], "trotteris": [2, 11, 27], "hamiltonian": [2, 19, 27], "reduct": [2, 17, 25, 27], "diagonalis": [2, 11, 16, 17], "asynchron": 2, "mitig": 2, "facil": 2, "flow": [2, 11, 15, 29], "generalis": 2, "depth_by_typ": [2, 4], "select": [2, 3, 17], "parameteris": [2, 3, 4, 29], "subclass": 2, "within": [2, 3, 4, 7, 11, 15, 17, 25, 27, 29], "free": [2, 4, 11, 12, 27, 29], "stream": [2, 21], "log": [2, 11], "cleaner": 2, "natur": [2, 3], "uniform": 2, "getter": 2, "gateerror": 2, "made": [2, 3, 4, 15, 25, 29], "readonli": 2, "stabil": [2, 23], "document": [2, 10, 15], "stricter": 2, "submodul": 2, "top": 2, "favour": 2, "pytket_aqt": 2, "pytket_honeywel": 2, "q": [2, 4, 9, 17, 22, 23], "pytket_qsharp": 2, "familiar": 2, "textbook": 2, "popular": [2, 10], "optimisecliffordszx": 2, "contractur": 2, "how": [2, 3, 9, 10, 12, 27, 29], "stage": 2, "composit": [2, 3, 4, 10, 17], "simpler": 2, "flexibl": 2, "contigu": [2, 17, 27], "dimension": [2, 26], "refer": [2, 4, 16, 27], "linear": [2, 3, 4, 15, 26], "latex": [2, 3, 4], "quantikz": [2, 4], "build": [2, 6, 10, 11, 16, 27], "final": [2, 3, 4, 10, 27], "entir": [2, 3, 27], "procedur": [2, 27], "compilationunit": [2, 11, 17, 20], "wrapper": [2, 3], "quipper": [2, 10, 11], "consist": [2, 4, 15, 17, 18], "batch": 2, "bridg": [2, 4, 15, 17, 25], "insert": [2, 11, 14, 25, 27], "cost": [2, 17], "physicalcircuit": 2, "just": 2, "sped": 2, "redund": [2, 17], "fragment": 2, "forestbackend": [2, 8], "rigett": 2, "qvm": 2, "qc": [2, 9, 10], "aerunitarybackend": [2, 8], "export": [2, 21], "pytket_qiskit": 2, "go": 2, "straight": 2, "quantumcircuit": [2, 9, 10], "dagcircuit": 2, "cswap": [2, 4, 15, 22], "add_circuit": [2, 4], "sensibl": 2, "append": [2, 4, 17, 27], "expon": 2, "doc": [2, 11, 27], "quantomat": 2, "chemistri": 2, "part": 2, "eumen": 2, "cnot": [2, 3, 17, 22], "4x4": [2, 3, 15], "patch": 2, "terra": 2, "aqua": 2, "rigetti": [2, 8], "analys": 2, "notat": 2, "ibm": [2, 8, 9, 10, 15], "tketpass": 2, "plug": 2, "stack": [2, 11], "advantag": [2, 27], "tket": [2, 10, 11, 14, 15, 21, 22], "subspac": 2, "expans": 2, "alongsid": 2, "power": [2, 10], "safe": [2, 25], "googl": 2, "logic_exp": [3, 4, 11], "And": [3, 5], "binaryop": [3, 5], "bitand": [3, 5], "biteq": [3, 5], "bitlogicexp": [3, 4, 5], "bitneq": [3, 5], "bitnot": [3, 5], "bitor": [3, 5], "bitwiseop": [3, 5], "bitxor": [3, 5], "constpred": [3, 5], "eq": [3, 5], "neq": [3, 5], "Or": [3, 5, 10], "predicateexp": [3, 5], "regadd": [3, 5], "regand": [3, 5], "regdiv": [3, 5], "regeq": [3, 5], "reggeq": [3, 5], "reggt": [3, 5], "regleq": [3, 5], "reglogicexp": [3, 4, 5], "reglsh": [3, 5], "reglt": [3, 5], "regmul": [3, 5], "regneg": [3, 5], "regneq": [3, 5], "regnot": [3, 5], "regor": [3, 5], "regpow": [3, 5], "regrsh": [3, 5], "regsub": [3, 5], "regwiseop": [3, 5], "regxor": [3, 5], "unaryop": [3, 5], "filter_by_typ": [3, 5], "if_bit": [3, 5], "if_not_bit": [3, 5], "reg_eq": [3, 5], "reg_geq": [3, 5], "reg_gt": [3, 5], "reg_leq": [3, 5], "reg_lt": [3, 5], "reg_neq": [3, 5], "get_circuit_render": [3, 7], "usag": [3, 14, 23], "fresh_symbol": [3, 11], "find": [3, 12, 16, 19, 24], "appropri": [3, 11, 19, 27], "suffix": 3, "yet": [3, 27, 29], "current": [3, 4, 6, 7, 8, 11, 12, 17, 20, 22, 23, 25, 27, 29], "session": 3, "readabl": [3, 4, 26, 29], "arg1": [3, 4, 5, 24], "expr": [3, 4, 17, 27, 29], "get_nam": [3, 29], "complex128": [3, 4, 18], "m": [3, 4, 12, 18, 23], "test": [3, 11, 25], "group": [3, 4, 17], "is_gat": 3, "n_qubit": [3, 4, 18], "param": [3, 4, 29], "angular": 3, "radian": [3, 15, 29], "constrain": [3, 17], "canon": 3, "usual": [3, 11], "rx": [3, 4, 15, 17, 25], "ry": [3, 4, 15, 17, 25], "view": [3, 7, 17, 27], "our": [3, 10, 11, 12], "lvert": 3, "abc": 3, "rangl": [3, 27], "b": [3, 17, 18, 20, 25, 27], "interpret": [3, 9, 27], "big": [3, 27], "endian": [3, 4, 27], "BE": [3, 4, 18, 27], "fashion": 3, "a_": 3, "00": 3, "01": 3, "10": [3, 4, 10, 11, 12, 14, 27], "11": [3, 10, 11, 12], "le": 3, "littl": [3, 4, 27], "tabl": [3, 4, 15, 23, 27], "intuit": [3, 25], "manner": 3, "member": [3, 13, 15, 16, 17, 18, 25, 26, 27, 29], "symbol_map": [3, 4, 29], "underli": [3, 17, 18, 27], "potenti": 3, "mutat": [3, 10], "propag": 3, "add_circbox": [3, 4], "unitary1qbox": [3, 4, 11, 15], "get_matrix": 3, "unitary2qbox": [3, 4, 11, 15], "expbox": [3, 4, 11, 15], "exponenti": [3, 11, 15, 16, 17, 27], "t": [3, 4, 5, 6, 15, 17, 24, 25], "ita": [3, 15], "possibli": [3, 4, 17, 29], "cx_config_typ": 3, "tree": [3, 5, 17, 25], "frac12": [3, 15], "sigma_0": 3, "otim": [3, 15, 27], "sigma_1": 3, "cdot": [3, 15], "sigma_i": 3, "y": [3, 4, 15, 18, 25, 27, 29], "z": [3, 4, 15, 18, 23, 25, 27, 29], "get_cx_config": 3, "get_pauli": 3, "get_phas": 3, "paulis0": 3, "t0": [3, 27], "paulis1": 3, "t1": [3, 27], "t_j": 3, "j": [3, 4, 7], "get_paulis_pair": 3, "get_phase_pair": 3, "strat": [3, 16, 17], "rotation_axi": 3, "35": 3, "axi": [3, 15, 29], "applic": [3, 17, 25, 29], "backward": [3, 17, 25], "subject": 3, "get_permut": 3, "get_rotation_axi": 3, "get_strat": 3, "integ": [3, 4, 27, 28, 29], "n_control": 3, "low": 3, "port": [3, 29], "get_control_st": 3, "binari": [3, 4, 5, 10, 15, 23, 27], "get_control_state_bit": 3, "get_n_control": 3, "get_op": 3, "ariti": [3, 4, 23, 29], "customg": [3, 4, 11, 15], "parametris": [3, 15], "condition": [3, 15], "openqasm": [3, 10, 21], "10b": 3, "mean": [3, 4, 17, 19, 27], "hold": [3, 4, 6, 15, 20, 27], "content_equ": 3, "content": [3, 28, 29], "get_exp": 3, "get_n_i": 3, "pure": [3, 4, 8, 17, 27], "get_n_io": 3, "get_n_o": 3, "qubit_indic": 3, "phase_polynomi": 3, "linear_transform": 3, "boolean": [3, 15, 17, 27, 29], "repeat": [3, 17, 25, 27, 29], "last": [3, 20, 29], "bistr": 3, "phase_polynomial_as_list": 3, "8x8": 3, "projector": 3, "stabilis": [3, 18, 29], "get_stabilis": 3, "wasmop": [3, 11], "num_bit": 3, "num_w": 3, "n_input": 3, "n_output": 3, "func_nam": 3, "wasm_uid": 3, "bitwidth": 3, "input_width": 3, "n_i32": 3, "output_width": 3, "multibitop": [3, 11], "parallel": [3, 4, 15, 27, 29], "classicalevalop": [3, 11], "basic_op": 3, "bitwis": [3, 4, 27], "setbitsop": [3, 11], "constant": [3, 5, 29], "evaluat": 3, "classicalop": [3, 11], "n_input_output": 3, "copybitsop": [3, 11], "copi": [3, 4, 15, 20, 28, 29], "rangepredicateop": [3, 11], "encod": [3, 4, 5, 15, 21, 27], "upper": [3, 4, 19], "lower": [3, 4, 19, 27], "bound": [3, 4, 15, 19], "inclus": 3, "sor": 3, "bistring_to_op_list": 3, "spair": 3, "bitstring_to_op_list": 3, "op_map": 3, "get_bitstring_op_pair_list": 3, "share": [3, 4, 29], "activ": 3, "impl_diag": 3, "get_impl_diag": 3, "size": [3, 4, 17, 25, 26, 27], "is_invers": 3, "zero": [3, 4, 17, 25, 27], "assum": [3, 4, 16, 17, 19, 25, 27], "upper_triangl": 3, "shape": 3, "triangl": [3, 29], "get_diagon": 3, "is_upper_triangl": 3, "need": [3, 4, 11, 12, 16, 17, 20, 25], "sure": 3, "get_act": 3, "get_comput": 3, "get_uncomput": 3, "unsign": [3, 4, 17, 27], "min": 3, "max": 3, "get_max": 3, "get_min": 3, "absenc": 3, "imagin": 3, "op_type_count": [3, 4], "gate_depth": [3, 4], "op_type_depth": [3, 4], "two_qubit_gate_depth": [3, 4], "get_gate_depth": 3, "get_op_type_count": 3, "get_op_type_depth": 3, "get_two_qubit_gate_depth": 3, "placehold": [3, 15], "It": [3, 4, 10, 17, 19, 25, 27], "serv": 3, "record": [3, 10], "region": [3, 17], "n_bit": [3, 4], "resource_data": [3, 4], "get_n_bit": 3, "cover": [3, 4], "get_n_qubit": 3, "get_resource_data": 3, "step": [4, 17, 27], "analysi": 4, "condition_bit": 4, "thu": [4, 27], "wai": [4, 11, 12], "h": [4, 7, 9, 10, 15, 17, 24, 25, 27, 29], "save": [4, 6, 21, 27], "ccx": [4, 10, 15, 17, 25], "control_0": 4, "control_1": 4, "ch": [4, 15], "control_qubit": 4, "target_qubit": 4, "crz": [4, 15, 25], "target_0": 4, "target_1": 4, "angle0": 4, "angle1": 4, "angle2": 4, "cz": [4, 15, 25], "qubit_0": 4, "qubit_1": 4, "qubit0": 4, "qubit1": 4, "hadamard": [4, 10, 15, 29], "bit_index": 4, "posisbli": 4, "25": [4, 10, 17, 27], "sdg": [4, 15], "v": [4, 15, 25, 26, 29], "vdg": [4, 15], "xxphase": [4, 15, 17], "xx": [4, 23], "qubit2": 4, "yy": 4, "zz": [4, 23], "__eq__": [4, 27], "__getstate__": 4, "__hash__": 4, "hash": 4, "blank": [4, 11], "add_blank_wir": 4, "__iter__": 4, "__mul__": 4, "__rshift__": 4, "sequenti": [4, 14, 18, 23, 27], "unifi": 4, "__setstate__": 4, "__str__": [4, 28], "add_barri": 4, "add_bit": 4, "reject_dup": 4, "uniqu": [4, 16, 29], "fill": 4, "add_c_and": 4, "arg0_in": 4, "arg1_in": 4, "arg_out": 4, "add_gate_method": 4, "add_c_and_to_regist": 4, "reg0_in": 4, "reg1_in": 4, "reg_out": 4, "smallest": 4, "add_c_copybit": 4, "args_in": 4, "args_out": 4, "destin": 4, "add_c_copyreg": 4, "input_reg": 4, "output_reg": 4, "anoth": [4, 12, 20, 24, 27, 29], "truncat": 4, "smaller": [4, 17], "add_c_modifi": 4, "arg_inout": 4, "explicitmodifi": [4, 15], "add_c_not": 4, "arg_in": 4, "NOT": [4, 5], "add_c_not_to_regist": 4, "reg_in": 4, "add_c_or": 4, "add_c_or_to_regist": 4, "add_c_pred": 4, "explicitpred": [4, 15], "add_c_range_pred": 4, "minval": 4, "maxval": 4, "distinct": 4, "add_c_regist": 4, "add_c_setbit": 4, "add_c_setreg": 4, "_tket_reg_width": 4, "pad": [4, 18, 27], "add_c_transform": 4, "classicaltransform": [4, 15], "sum_i": 4, "a_i": [4, 27], "add_c_xor": 4, "add_c_xor_to_regist": 4, "onto": [4, 25], "add_gat": [4, 15], "add_classicalexpbox_bit": 4, "add_classicalexpbox_regist": 4, "barrier_qubit": 4, "barrier_bit": 4, "barrier_arg": 4, "add_conjugation_box": 4, "instanti": [4, 7], "halfturn": 4, "add_diagonal_box": 4, "add_dummybox": 4, "add_expbox": 4, "particular": [4, 29], "add_multiplexed_tensored_u2": 4, "add_multiplexedrot": 4, "add_multiplexedu2": 4, "add_multiplexor": 4, "add_pauliexpbox": 4, "add_pauliexpcommutingsetbox": 4, "add_pauliexppairbox": 4, "add_phasepolybox": 4, "add_q_regist": 4, "add_qcontrolbox": 4, "add_qubit": 4, "add_state_preparation_box": 4, "add_toffolibox": 4, "add_unitary1qbox": 4, "unitarybox": 4, "add_unitary2qbox": 4, "add_unitary3qbox": 4, "qubit_2": 4, "add_wasm": 4, "funcnam": 4, "filehandl": 4, "wasmfilehandl": [4, 11, 28], "list_i": 4, "list_o": 4, "args_wasm": 4, "handler": [4, 28], "variabl": [4, 5, 15], "wasmstat": 4, "add_wasm_to_reg": 4, "get": [4, 6, 7, 11, 19, 27], "causal": [4, 17, 29], "invers": [4, 17, 25, 27], "adjoint": 4, "interior": [4, 29], "vertic": [4, 16, 19, 29], "longest": 4, "path": [4, 6, 17, 19, 21, 27, 28], "exclud": [4, 17, 25], "sub": [4, 5, 27], "element": [4, 5, 26, 27], "flatten_regist": 4, "likewis": 4, "get_command": 4, "resource_data0": 4, "dbox0": 4, "resource_data1": 4, "dbox1": 4, "print": [4, 7, 10], "15": 4, "23": 4, "12": 4, "17": 4, "13": 4, "pybind11": 4, "peculiar": 4, "treat": [4, 27], "genuin": 4, "reshap": 4, "dimens": [4, 26, 27], "get_unitary_times_oth": 4, "matr": 4, "um": 4, "implicit_qubit_permut": 4, "is_symbol": [4, 29], "measure_al": [4, 7, 10], "doesn": [4, 17, 24], "qreg": 4, "creg_nam": 4, "n_gates_of_typ": 4, "search": [4, 11, 19], "qubit_cr": 4, "qubit_create_al": 4, "qubit_discard": 4, "qubit_discard_al": 4, "qubit_is_cr": 4, "queri": 4, "qubit_is_discard": 4, "remove_blank_wir": 4, "interven": 4, "untouch": [4, 17, 25], "simultan": [4, 14, 15], "substitute_nam": 4, "retain": [4, 17], "were": [4, 25, 27, 29], "repl": 4, "modifi": [4, 14, 15, 17, 19, 27], "to_latex_fil": 4, "filenam": [4, 21, 27], "tex": 4, "valid_connect": 4, "arch": 4, "allow_bridg": 4, "confirm": 4, "captur": [4, 14, 29], "desir": [4, 13, 16, 17, 23, 27], "middl": 4, "neighbour": [4, 15, 29], "bit_readout": 4, "right": [4, 15, 27], "organ": 4, "consecut": 4, "is_simpl": 4, "simpli": [4, 11, 29], "classicl": 4, "n_gate": 4, "meaning": 4, "neither": 4, "nor": 4, "subsequ": 4, "discuss": [5, 11], "eval_v": 5, "evalu": 5, "fold": [5, 17], "expres": 5, "arg2": [5, 24], "all_input": 5, "involv": 5, "all_inputs_ord": 5, "load": [5, 6, 7], "nest": [5, 7, 17], "rename_arg": 5, "cmap": [5, 29], "wise": 5, "set_valu": 5, "var": 5, "recurs": [5, 7, 14, 17, 25, 29], "lt": 5, "gt": 5, "leq": 5, "geq": 5, "mul": [5, 27], "div": 5, "pow": 5, "lsh": 5, "rsh": 5, "seq": 5, "var_typ": 5, "r": 5, "less": [5, 17, 25, 27], "inequ": 5, "userspac": 6, "get_config_file_path": [6, 11], "machin": [6, 27], "load_config_fil": [6, 11], "write_config_fil": [6, 11], "pytket_config": 6, "init": 6, "read_fil": 6, "config_file_path": 6, "write_fil": 6, "pytketextconfig": [6, 11], "from_default_config_fil": 6, "from_extension_dict": 6, "ext_dict": 6, "from_pytketconfig": 6, "p_config": 6, "update_default_config_fil": 6, "update_pytket_config": 6, "internet": 7, "offlin": 7, "done": [7, 9], "pip": [7, 8, 10, 11], "env": 7, "manag": [7, 10], "get_render_opt": 7, "_for_j": 7, "render_circuit_as_html": 7, "inlin": 7, "cell": 7, "set_render_opt": 7, "min_height": 7, "height": 7, "min_width": 7, "zx_style": 7, "condense_c_bit": 7, "collaps": [7, 17], "condens": 7, "line": [7, 19], "dark_them": 7, "dark": 7, "mode": [7, 12], "system_them": 7, "system": [7, 10, 29], "theme": 7, "transparent_bg": 7, "background": 7, "crop_param": 7, "shorten": 7, "browser_new": 7, "sleep": 7, "tempfil": 7, "delet": [7, 27], "webbrows": 7, "circuit_render": 7, "300px": 7, "ipython": 7, "happi": 7, "offline_displai": 7, "custom_render": 7, "abov": [7, 12, 13, 17], "quantinuum": [8, 11], "One": [8, 12], "cross": 8, "librari": [8, 11], "pennylan": [8, 11], "conjunct": [8, 11], "braketbackend": 8, "sometim": 8, "foreststatebackend": 8, "aerstatebackend": 8, "statist": 8, "contrast": 8, "cirqdensitymatrixsamplebackend": 8, "simplexbackend": 8, "design": [8, 10, 17, 19], "offer": [8, 28], "h1": 8, "h2": 8, "aqtbackend": 8, "iqmbackend": 8, "iqm": [8, 11], "azurebackend": 8, "servic": 8, "behavior": 8, "1e": [8, 27], "server": 8, "cirqstatesamplebackend": 8, "sampl": [8, 24, 27], "cirqstatesimbackend": 8, "aer": 8, "projectqbackend": 8, "cirqdensitymatrixsimbackend": 8, "qulacsbackend": 8, "result_typ": 8, "cirqcliffordsamplebackend": 8, "cirqcliffordsimbackend": 8, "pysimplex": [8, 11], "stimbackend": 8, "stim": [8, 11], "noiseless": 8, "noisemodel": 8, "variat": [8, 27], "qsharpsimulatorbackend": 8, "qdk": 8, "qsharptoffolisimulatorbackend": 8, "toffoli": [8, 15, 25], "qir": [8, 11], "cutensornet": [8, 11], "qujax": [8, 11], "frequent": 9, "ask": [9, 11], "question": [9, 11], "troubleshoot": [9, 11], "page": [9, 10, 11], "my": 9, "choic": 9, "ye": [9, 12], "hardcod": 9, "quickli": 9, "wide": [9, 27], "qiskit_to_tk": [9, 10], "tk_circ": 9, "accomplish": 9, "tk_to_qiskit": 9, "unsupport": 9, "care": 9, "taken": 9, "we": [9, 10, 11, 12, 17, 19, 21, 25, 27, 29], "again": [9, 21, 29], "agnost": 10, "focus": 10, "superior": 10, "nisq": 10, "noisi": 10, "intermedi": 10, "scale": [10, 27], "transpil": 10, "64": 10, "pypi": [10, 12], "those": [10, 17, 29], "older": [10, 12], "date": 10, "upgrad": [10, 12], "interoper": 10, "instruct": [10, 17, 27], "built": [10, 12], "handi": 10, "compon": [10, 23, 27, 29], "On": [10, 11, 12], "hand": 10, "flexibil": 10, "languag": 10, "raw": [10, 27], "embed": 10, "framework": [10, 29], "circuit_from_qasm": [10, 11, 21], "my_qasm_fil": 10, "like": [10, 12, 27], "gentl": 10, "1000": [10, 19], "summari": [10, 17], "frequenc": 10, "come": [10, 17, 25], "snippet": 10, "show": 10, "credenti": 10, "guid": [10, 12], "nairobi_devic": 10, "ibm_nairobi": 10, "nairobi": 10, "compiled_circ": 10, "100": [10, 19, 27], "experi": [10, 16, 27], "compos": [10, 15, 17, 25, 29], "toolkit": 11, "project": [11, 15], "To": [11, 12, 19], "visit": 11, "wish": [11, 27], "academ": 11, "public": [11, 17], "paper": 11, "topic": 11, "task": 11, "aka": 11, "network": 11, "gadget": [11, 17, 25, 29], "shallow": 11, "cluster": 11, "ansatz": 11, "keen": 11, "benchmark": 11, "techniqu": [11, 17], "against": 11, "repositori": [11, 12], "latest": [11, 12], "releas": [11, 12], "feel": [11, 12], "touch": 11, "assist": 11, "fair": 11, "think": 11, "contact": 11, "github": [11, 12], "pick": [11, 14], "look": 11, "someon": 11, "els": [11, 17, 18, 20, 25, 29], "slack": 11, "channel": 11, "commun": 11, "join": 11, "email": 11, "com": 11, "help": 11, "tag": 11, "exchang": 11, "realli": 11, "thank": 11, "answer": 11, "team": [11, 12], "soon": [11, 12], "licens": 11, "under": [11, 27], "apach": 11, "changelog": 11, "faq": 11, "qpu": 11, "cloud": 11, "websit": [11, 27], "unittyp": [11, 26], "pauli_string_mult": [11, 18], "cnotsynthtyp": [11, 17], "safetymod": [11, 17], "cxmappingpass": [11, 17], "commutethroughmulti": [11, 17, 25], "contextsimp": [11, 17], "customroutingpass": [11, 17], "decomposeswapstocx": [11, 17], "decomposeswapstocircuit": [11, 17], "fullmappingpass": [11, 17], "placementpass": [11, 17], "rebasetket": [11, 17], "removediscard": [11, 17], "removeredund": [11, 17, 25], "routingpass": [11, 17], "simplifymeasur": [11, 17], "squashtk1": [11, 17], "synthesiseumd": [11, 17], "script": 11, "auto_rebas": 11, "defaultregisterpred": [11, 20], "directednesspred": [11, 20], "maxnqubitspred": [11, 20], "maxtwoqubitgatespred": [11, 20], "noclassicalbitspred": [11, 20], "noclassicalcontrolpred": [11, 20], "nofastfeedforwardpred": [11, 20], "nomidmeasurepred": [11, 20], "nosymbolspred": [11, 20], "nowireswapspred": [11, 20], "placementpred": [11, 20], "userdefinedpred": [11, 20], "paulipartitionstrat": [11, 16, 27], "measurement_reduct": [11, 16], "term_sequ": [11, 16], "circuit_from_qasm_io": [11, 21], "circuit_from_qasm_str": [11, 21], "circuit_to_qasm": [11, 21], "circuit_to_qasm_str": [11, 21], "circuit_from_quipp": [11, 22], "place_fully_connect": [11, 19], "place_with_map": [11, 19], "mappingmanag": [11, 14], "routingmethodcircuit": [11, 14], "tableau": 11, "unitarytableaubox": [11, 23], "paulisynthstrat": [11, 17, 25], "separate_class": [11, 25], "framerandomis": [11, 24], "universalframerandomis": [11, 24], "apply_clifford_basis_chang": [11, 24], "cliffordgen": [11, 29], "directedgen": [11, 29], "phasedgen": [11, 29], "quantumtyp": [11, 29], "zxbox": [11, 29], "zxgen": [11, 29], "zxtype": [11, 29], "zxvert": [11, 29], "zxwire": [11, 29], "zxwiretyp": [11, 29], "append_pauli_measur": [11, 27], "compare_statevector": [11, 27], "compare_unitari": [11, 27], "counts_from_shot_t": [11, 27], "expectation_from_count": [11, 27], "expectation_from_shot": [11, 27], "get_pauli_expectation_valu": [11, 27], "permute_basis_index": [11, 27], "permute_qubits_in_statevector": [11, 27], "permute_rows_cols_in_unitari": [11, 27], "prepare_circuit": [11, 27], "probs_from_count": [11, 27], "probs_from_st": [11, 27], "readout_count": [11, 27], "set_level": [11, 13], "pip3": 12, "python3": 12, "readm": 12, "wheel": 12, "20": 12, "mac": 12, "becaus": [12, 17], "scipi": [12, 18, 27], "brew": 12, "haven": 12, "openbla": 12, "prefix": [12, 27], "ltsc": 12, "concern": 12, "publish": 12, "had": [12, 17], "compliant": 12, "abl": 12, "remedi": 12, "offici": 12, "tracker": 12, "might": 12, "who": 12, "similar": [12, 15, 17, 19, 25], "diagnos": 12, "trace": [13, 25], "info": [13, 27], "err": 13, "off": [13, 23], "log_level": 13, "aa": 14, "unplac": [14, 19], "aaslookahead": 14, "comparison": 14, "approach": [14, 17], "outlin": 14, "arxiv": [14, 17, 25], "1902": 14, "08091": 14, "lookahead": [14, 17], "lexirout": 14, "emploi": 14, "purpos": [14, 17, 27], "partial": [14, 19], "route_circuit": 14, "routing_method": 14, "modif": [14, 17], "route_subcircuit": 14, "proce": 14, "rank": 14, "viabil": 14, "viabl": 14, "front": [14, 17, 25], "max_depth": 14, "max_siz": 14, "parent": 14, "whole": [14, 27], "callabl": [14, 17, 20, 25, 27], "declar": 14, "cphase": 15, "perhap": 15, "alpha": 15, "mapsto": 15, "begin": [15, 22], "cc": 15, "mathrm": [15, 17], "frac14": 15, "frac": [15, 27], "sqrt": 15, "co": 15, "sin": 15, "lambda": [15, 17, 25, 27], "http": [15, 17, 25, 27], "org": [15, 17, 25, 27], "3_summary_of_quantum_oper": 15, "phi": 15, "theta": 15, "beta": 15, "gamma": 15, "rule": [15, 17, 25, 29], "cccc": 15, "noop": 15, "perman": 15, "strip": 15, "meta": [15, 20], "prevent": 15, "jump": 15, "branch": 15, "goto": 15, "uncondit": 15, "halt": 15, "immedi": 15, "termin": 15, "third": [15, 17], "togeth": [15, 16, 17, 25, 29], "p": [15, 17, 23, 24, 27], "pairof": 15, "setof": 15, "ldot": [15, 27], "2i": 15, "\u03b1": 15, "pairwis": [15, 17, 25], "cnry": [15, 17], "maxim": 15, "entangl": 15, "frac16": 15, "setbit": 15, "rangepred": 15, "truth": 15, "multibit": 15, "from_nam": 15, "lazi": [16, 27], "largestfirst": [16, 27], "greedili": 16, "highest": [16, 25], "systemat": 16, "until": [16, 17, 25, 29], "Such": 16, "worst": 16, "often": 16, "belong": [16, 27], "dictat": [16, 17, 25], "flip": [16, 29], "pariti": [16, 27], "invert": 16, "circ_index": 16, "sum": [16, 27], "weight": [16, 19, 27], "expctat": 16, "add_measurement_circuit": 16, "add_result_for_term": 16, "bitmap": 16, "compar": [16, 27], "measurement_circ": 16, "nonconflictingset": 16, "commutingset": [16, 27], "mutual": 16, "o": [16, 29], "cx_config": [16, 17, 25], "snake": [16, 17, 25], "whenev": 16, "composition": 17, "special": 17, "compilation_unit": 17, "safety_mod": 17, "unmodifi": 17, "before_appli": 17, "after_appli": 17, "invok": 17, "callback": 17, "hampath": 17, "hamilton": 17, "rec": 17, "steiner": 17, "gauss": 17, "compilation_pass": 17, "check_funct": [17, 20, 28], "metric": 17, "audit": 17, "postcondit": 17, "pass_list": 17, "arc": [17, 19, 25], "limit": [17, 22], "few": 17, "nb": 17, "remap": 17, "placer": 17, "connectivti": 17, "directed_cx": 17, "duncan": [17, 25], "fagan": [17, 25], "ab": [17, 25], "1901": [17, 25], "10114": [17, 25], "disregard": [17, 25], "orient": [17, 25], "chanc": [17, 25], "past": [17, 25], "min_siz": 17, "minim": [17, 25], "polynomin": 17, "allow_class": [17, 27], "xcirc": [17, 27], "omit": [17, 27], "transfom": 17, "caller": [17, 27], "respons": 17, "respect_direct": 17, "directed": 17, "replacement_circuit": 17, "chosen": [17, 25, 27], "cx_fidel": [17, 25], "zzmax_fidel": [17, 25], "zzphase_fidel": [17, 25], "consider": [17, 25], "exactli": [17, 25, 29], "beforehand": 17, "concret": [17, 25], "euler": 17, "By": [17, 25], "tripl": [17, 25], "merg": [17, 25, 29], "remain": [17, 19, 20, 29], "peephol": 17, "resynthesi": 17, "proceed": [17, 25], "disabl": [17, 25], "blow": [17, 25], "focu": [17, 29], "greedi": 17, "42": [17, 25], "cartan": [17, 25], "weyl": [17, 25], "chamber": [17, 25], "precis": [17, 25], "met": [17, 25], "ie": [17, 25], "resynthesis": [17, 25], "gagdet": 17, "cx_replac": 17, "tk1_replac": 17, "revers": 17, "alon": [17, 25], "tk2_replac": 17, "cloutput": 17, "futur": 17, "word": [17, 21], "becom": 17, "qubit_map": 17, "old": 17, "only_zero": [17, 25], "nearest": 17, "leav": [17, 25, 27], "create_all_qubit": 17, "remove_redund": 17, "annot": 17, "singleq": 17, "regardless": [17, 29], "almost": 17, "passlist": 17, "score_func": 17, "get_scor": 17, "score": 17, "conform": 17, "arbitrarili": [17, 25], "whitespac": 17, "cliffordsimpnoswap": 17, "simplifyinitialnoclass": 17, "formal": 17, "compilation_pass_grammar": 17, "complilation_pass_from_script": 17, "backu": 17, "naur": 17, "origin": [17, 19, 20, 25, 27], "frozenset": 17, "noautorebas": 17, "No": [17, 22, 29], "letter": 18, "alphabet": 18, "coeff": 18, "spars": [18, 27], "commutes_with": 18, "compress": [18, 27], "dot_stat": [18, 27], "dot": [18, 27], "from_list": [18, 26, 27], "state_expect": [18, 27], "to_list": [18, 26, 27], "csc_matrix": [18, 27], "dens": [18, 27], "qubitpaulistring1": 18, "qubitpaulistring2": 18, "independ": 19, "maximum_match": 19, "maximum_pattern_g": 19, "maximum_pattern_depth": 19, "subgraph": 19, "monomorphsim": 19, "effect": [19, 23, 29], "monomorph": 19, "reflect": [19, 27], "what": 19, "total": [19, 27], "millisecond": 19, "modify_config": 19, "solut": 19, "maximum_line_g": 19, "maximum_line_depth": 19, "outdegre": 19, "circl": 19, "node_error": 19, "link_error": 19, "readout_error": 19, "readouterror": 19, "paramt": 19, "get_placement_map": 19, "overheard": 19, "qmap": 19, "fully_connect": 19, "enforc": 20, "restrict": 20, "compris": [20, 24, 27], "check_all_pred": 20, "final_map": 20, "initial_map": 20, "allowed_typ": 20, "ones": 20, "although": 21, "qelib1": 21, "qasm_str": 21, "unlik": 21, "reimport": 21, "parser": [21, 22], "input_fil": [21, 22], "pathlik": 21, "utf": 21, "maxwidth": 21, "stream_in": 21, "textio": 21, "text": 21, "wasm_fil": 21, "output_fil": 21, "singli": 21, "stream_out": 21, "include_gate_def": 21, "written": 21, "ascii": 22, "subroutin": 22, "qinit": 22, "qterm": 22, "legaci": 22, "qnot": 22, "qmultinot": 22, "qhad": 22, "qswap": 22, "qw": 22, "qgate": 22, "qmea": 22, "gphase": 22, "qprep": 22, "qunprep": 22, "qdiscard": 22, "dterm": 22, "cgate": 22, "cinit": 22, "cterm": 22, "cdiscard": 22, "aaronson": 23, "gottesman": 23, "nqb": 23, "xz": [23, 29], "xph": 23, "zph": 23, "apply_gate_at_end": 23, "qb": 23, "gu": 23, "unparameteris": [23, 29], "apply_gate_at_front": 23, "ug": 23, "get_row_product": 23, "get_xrow": 23, "pu": 23, "ux_": 23, "get_zrow": 23, "uz_": 23, "realis": [23, 27], "theorem": 23, "sensit": 23, "tab": 23, "get_tableau": 23, "boundari": [24, 29], "frame": 24, "deduc": 24, "cycletyp": 24, "frametyp": 24, "conjug": [24, 29], "optypevector": 24, "get_all_circuit": 24, "randomis": 24, "c_dagger": 24, "cowtan": 25, "et": [25, 29], "al": [25, 29], "1906": 25, "01734": 25, "commutesqthroughswap": 25, "avg_node_error": 25, "op_node_error": 25, "decomposebridg": 25, "decomposeccx": 25, "decomposecxdirect": 25, "redirect": 25, "decomposecontrolledri": 25, "decomposeswap": 25, "decomposeswaptocx": 25, "optimiseclifford": 25, "dilk": 25, "simmon": 25, "sivarajah": 25, "balanc": 25, "rebasetocirq": 25, "rebasetocliffordsingl": 25, "outsid": 25, "rebasetoprojectq": 25, "rebasetopyzx": 25, "rebasetoquil": 25, "rebasetorzrx": 25, "synthesisepauligraph": 25, "synth_strat": 25, "uccsynthesi": 25, "ucc": 25, "repeatedli": [25, 29], "while_repeat": 25, "bodi": 25, "loop": [25, 29], "main": 25, "singleton": [26, 27], "col": 26, "doubli": 26, "tripli": 26, "3d": 26, "reg_nam": 26, "pauli_str": 27, "shot_tabl": 27, "contribut": 27, "reference_st": 27, "partition_strat": 27, "colour_method": 27, "trotter": 27, "prioritis": 27, "state_circuit": 27, "psi": 27, "rearrang": 27, "0625": 27, "1875": 27, "375": 27, "4375": 27, "5625": 27, "010": 27, "011": 27, "101": 27, "usefulli": 27, "fact": 27, "unmeasur": [27, 29], "c0": 27, "min_p": 27, "ctr": 27, "input_arrai": 27, "_supportsarrai": 27, "dtype": 27, "_nestedsequ": 27, "capac": 27, "n_outcom": 27, "choose_indic": 27, "choos": 27, "locat": 27, "ar_dict": 27, "from_int": 27, "big_endian": 27, "from_readout": 27, "to_intlist": 27, "to_readout": 27, "1d": 27, "ans\u00e4tz": 27, "mathemat": 27, "sum_j": 27, "alpha_j": 27, "p_j": 27, "prototyp": 27, "molecular": 27, "langl": 27, "evolv": 27, "iht": 27, "digit": 27, "abs_tol": 27, "imaginari": 27, "magnitud": 27, "toler": 27, "priori": 27, "suit": 27, "excit": 27, "vqe": 27, "f": 27, "a_1": 27, "a_2": 27, "a_n": 27, "monoton": 27, "pauli_list": 27, "symbol_dict": 27, "scheme": 27, "infer": 27, "all_qubit": 27, "acycl": 27, "save_dag": 27, "as_nx": 27, "multidigraph": 27, "get_dag": 27, "digraph": 27, "visual": 27, "get_qubit_graph": 27, "fmt": 27, "pdf": 27, "imag": 27, "actual": 27, "png": 27, "save_qubit_graph": 27, "view_dag": 27, "temporari": 27, "afterward": 27, "view_qubit_graph": 27, "empir": 27, "dist1": 27, "dist2": 27, "sample_mean": 27, "8888888888888888": 27, "dist3": 27, "dist4": 27, "__add__": 27, "__getitem__": 27, "as_count": 27, "criterion": 27, "domain": 27, "inject": 27, "sample_vari": 27, "varianc": 27, "unbias": 27, "as_dict": 27, "as_rv_discret": 27, "rv_discret": 27, "rv": 27, "k": [27, 29], "th": 27, "item": 27, "from_empirical_distribut": 27, "ed": 27, "convex_combin": 27, "dist": 27, "convex": 27, "neg": [27, 29], "75": 27, "compress_count": 27, "tol": 27, "06": 27, "round_to_int": 27, "statetupl": 27, "prune": 27, "countsdict": 27, "qubit_subset": 27, "calibr": 27, "restor": 27, "correl": 27, "intend": 27, "furthermor": 27, "calculate_matric": 27, "results_list": 27, "calibration_circuit": 27, "correct_count": 27, "parallel_measur": 27, "bayesian": 27, "negat": 27, "parallelmeasur": 27, "amend": 27, "get_parallel_measur": 27, "poorli": 27, "veri": 27, "symgateregist": 27, "overrid": 27, "get_func": 27, "typ": 27, "immutabledensematrix": 27, "is_regist": 27, "register_func": 27, "symgatefunc": 27, "circuit_apply_symbolic_qubit": 27, "input_qb": 27, "circuit_apply_symbolic_statevector": 27, "input_st": 27, "immutablematrix": 27, "circuit_to_symbolic_g": 27, "circuit_to_symbolic_unitari": 27, "filepath": 28, "check_fil": 28, "int_siz": 28, "workflow": 28, "standard": 28, "skip": 28, "function_nam": 28, "number_of_paramet": 28, "number_of_return": 28, "symmetr": 29, "qtype": 29, "asymmetr": 29, "doubl": 29, "variant": 29, "distinguish": 29, "operand": 29, "n_port": 29, "mbqc": 29, "identif": 29, "vertex": 29, "diag": 29, "focuss": 29, "identify_causal_flow": 29, "identify_focussed_set": 29, "identify_pauli_flow": 29, "odd": 29, "neighbourhood": 29, "dmap": 29, "continu": 29, "basic_wir": 29, "hbox": 29, "decompose_box": 29, "extend_at_boundary_pauli": 29, "spider": 29, "push": 29, "remove_interior_pauli": 29, "extend_for_px_output": 29, "px": 29, "gadgetise_interior_pauli": 29, "pivot": 29, "incid": 29, "internalise_gadget": 29, "xy": 29, "next": 29, "yz": 29, "io_extens": 29, "zspider": 29, "merge_gadget": 29, "parallel_h_remov": 29, "hopf": 29, "rebase_to_mbqc": 29, "expand": 29, "rebase_to_zx": 29, "xspider": 29, "red_to_green": 29, "red": 29, "green": 29, "reduce_graphlike_form": 29, "graphlik": 29, "local": 29, "complement": 29, "remove_interior_clifford": 29, "proper": 29, "self_loop_remov": 29, "separate_boundari": 29, "spider_fus": 29, "to_mbqc_diag": 29, "absorb": 29, "plane": 29, "to_graphlike_form": 29, "zxdiag": 29, "classical_input": 29, "classical_output": 29, "unconnect": 29, "classical_in": 29, "classical_out": 29, "add_vertex": 29, "gen": 29, "doubleabl": 29, "add_wir": 29, "u_port": 29, "v_port": 29, "add_zxbox": 29, "inner": 29, "internalis": 29, "adj_wir": 29, "onc": 29, "semant": 29, "check_valid": 29, "attach": 29, "count_vertic": 29, "count_wir": 29, "get_boundari": 29, "get_qtyp": 29, "get_vertex_zxgen": 29, "get_wire_end": 29, "w": 29, "vertex0": 29, "port0": 29, "vertex1": 29, "port1": 29, "get_wire_qtyp": 29, "get_wire_typ": 29, "get_zxtyp": 29, "multiply_scalar": 29, "scalar": 29, "other_end": 29, "travers": 29, "remove_vertex": 29, "remove_wir": 29, "set_vertex_zxgen": 29, "set_wire_qtyp": 29, "set_wire_typ": 29, "backen": 29, "tale": 29, "to_doubled_diagram": 29, "unconjug": 29, "wire_at_port": 29, "wire_between": 29, "wires_between": 29, "n_vertic": 29, "disconnect": 29, "n_wire": 29, "depict": 29, "zh": 29, "postselect": 29, "ari": 29, "pz": 29, "admit": 29, "tip": 29}, "objects": {"pytket": [[0, 0, 0, "-", "architecture"], [3, 0, 0, "-", "circuit"], [13, 0, 0, "-", "logging"], [14, 0, 0, "-", "mapping"], [16, 0, 0, "-", "partition"], [17, 0, 0, "-", "passes"], [18, 0, 0, "-", "pauli"], [19, 0, 0, "-", "placement"], [20, 0, 0, "-", "predicates"], [23, 0, 0, "-", "tableau"], [24, 0, 0, "-", "tailoring"], [25, 0, 0, "-", "transform"], [26, 0, 0, "-", "unit_id"], [29, 0, 0, "-", "zx"]], "pytket.architecture": [[0, 1, 1, "", "Architecture"], [0, 1, 1, "", "FullyConnected"], [0, 1, 1, "", "RingArch"], [0, 1, 1, "", "SquareGrid"]], "pytket.architecture.Architecture": [[0, 2, 1, "", "__init__"], [0, 3, 1, "", "coupling"], [0, 2, 1, "", "from_dict"], [0, 2, 1, "", "get_adjacent_nodes"], [0, 2, 1, "", "get_distance"], [0, 3, 1, "", "nodes"], [0, 2, 1, "", "to_dict"], [0, 2, 1, "", "valid_operation"]], "pytket.architecture.FullyConnected": [[0, 2, 1, "", "__init__"], [0, 2, 1, "", "from_dict"], [0, 3, 1, "", "nodes"], [0, 2, 1, "", "to_dict"]], "pytket.architecture.RingArch": [[0, 2, 1, "", "__init__"]], "pytket.architecture.SquareGrid": [[0, 2, 1, "", "__init__"], [0, 2, 1, "", "qind_to_squind"], [0, 2, 1, "", "squind_to_qind"]], "pytket.circuit": [[3, 1, 1, "", "BasisOrder"], [3, 1, 1, "", "CircBox"], [4, 1, 1, "", "Circuit"], [3, 1, 1, "", "ClassicalEvalOp"], [3, 1, 1, "", "ClassicalExpBox"], [3, 1, 1, "", "ClassicalOp"], [3, 1, 1, "", "Command"], [3, 1, 1, "", "Conditional"], [3, 1, 1, "", "ConjugationBox"], [3, 1, 1, "", "CopyBitsOp"], [3, 1, 1, "", "CustomGate"], [3, 1, 1, "", "CustomGateDef"], [3, 1, 1, "", "DiagonalBox"], [3, 1, 1, "", "DummyBox"], [3, 1, 1, "", "ExpBox"], [3, 1, 1, "", "MultiBitOp"], [3, 1, 1, "", "MultiplexedRotationBox"], [3, 1, 1, "", "MultiplexedTensoredU2Box"], [3, 1, 1, "", "MultiplexedU2Box"], [3, 1, 1, "", "MultiplexorBox"], [3, 1, 1, "", "Op"], [15, 1, 1, "", "OpType"], [3, 1, 1, "", "PauliExpBox"], [3, 1, 1, "", "PauliExpPairBox"], [3, 1, 1, "", "PhasePolyBox"], [3, 1, 1, "", "ProjectorAssertionBox"], [3, 1, 1, "", "QControlBox"], [3, 1, 1, "", "RangePredicateOp"], [3, 1, 1, "", "ResourceBounds"], [3, 1, 1, "", "ResourceData"], [3, 1, 1, "", "SetBitsOp"], [3, 1, 1, "", "StabiliserAssertionBox"], [3, 1, 1, "", "StatePreparationBox"], [3, 1, 1, "", "ToffoliBox"], [3, 1, 1, "", "Unitary1qBox"], [3, 1, 1, "", "Unitary2qBox"], [3, 1, 1, "", "Unitary3qBox"], [3, 1, 1, "", "WASMOp"], [3, 4, 1, "", "fresh_symbol"]], "pytket.circuit.BasisOrder": [[3, 3, 1, "", "name"]], "pytket.circuit.CircBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "symbol_substitution"]], "pytket.circuit.Circuit": [[4, 2, 1, "", "CCX"], [4, 2, 1, "", "CH"], [4, 2, 1, "", "CRx"], [4, 2, 1, "", "CRy"], [4, 2, 1, "", "CRz"], [4, 2, 1, "", "CS"], [4, 2, 1, "", "CSWAP"], [4, 2, 1, "", "CSX"], [4, 2, 1, "", "CSXdg"], [4, 2, 1, "", "CSdg"], [4, 2, 1, "", "CU1"], [4, 2, 1, "", "CU3"], [4, 2, 1, "", "CV"], [4, 2, 1, "", "CVdg"], [4, 2, 1, "", "CX"], [4, 2, 1, "", "CY"], [4, 2, 1, "", "CZ"], [4, 2, 1, "", "ECR"], [4, 2, 1, "", "ESWAP"], [4, 2, 1, "", "FSim"], [4, 2, 1, "", "H"], [4, 2, 1, "", "ISWAP"], [4, 2, 1, "", "ISWAPMax"], [4, 2, 1, "", "Measure"], [4, 2, 1, "", "Phase"], [4, 2, 1, "", "PhasedISWAP"], [4, 2, 1, "", "PhasedX"], [4, 2, 1, "", "Reset"], [4, 2, 1, "", "Rx"], [4, 2, 1, "", "Ry"], [4, 2, 1, "", "Rz"], [4, 2, 1, "", "S"], [4, 2, 1, "", "SWAP"], [4, 2, 1, "", "SX"], [4, 2, 1, "", "SXdg"], [4, 2, 1, "", "Sdg"], [4, 2, 1, "", "Sycamore"], [4, 2, 1, "", "T"], [4, 2, 1, "", "TK1"], [4, 2, 1, "", "TK2"], [4, 2, 1, "", "Tdg"], [4, 2, 1, "", "U1"], [4, 2, 1, "", "U2"], [4, 2, 1, "", "U3"], [4, 2, 1, "", "V"], [4, 2, 1, "", "Vdg"], [4, 2, 1, "", "X"], [4, 2, 1, "", "XXPhase"], [4, 2, 1, "", "XXPhase3"], [4, 2, 1, "", "Y"], [4, 2, 1, "", "YYPhase"], [4, 2, 1, "", "Z"], [4, 2, 1, "", "ZZMax"], [4, 2, 1, "", "ZZPhase"], [4, 2, 1, "", "__eq__"], [4, 2, 1, "", "__getstate__"], [4, 2, 1, "", "__hash__"], [4, 2, 1, "", "__init__"], [4, 2, 1, "", "__iter__"], [4, 2, 1, "", "__mul__"], [4, 2, 1, "", "__repr__"], [4, 2, 1, "", "__rshift__"], [4, 2, 1, "", "__setstate__"], [4, 2, 1, "", "__str__"], [4, 2, 1, "", "add_assertion"], [4, 2, 1, "", "add_barrier"], [4, 2, 1, "", "add_bit"], [4, 2, 1, "", "add_blank_wires"], [4, 2, 1, "", "add_c_and"], [4, 2, 1, "", "add_c_and_to_registers"], [4, 2, 1, "", "add_c_copybits"], [4, 2, 1, "", "add_c_copyreg"], [4, 2, 1, "", "add_c_modifier"], [4, 2, 1, "", "add_c_not"], [4, 2, 1, "", "add_c_not_to_registers"], [4, 2, 1, "", "add_c_or"], [4, 2, 1, "", "add_c_or_to_registers"], [4, 2, 1, "", "add_c_predicate"], [4, 2, 1, "", "add_c_range_predicate"], [4, 2, 1, "", "add_c_register"], [4, 2, 1, "", "add_c_setbits"], [4, 2, 1, "", "add_c_setreg"], [4, 2, 1, "", "add_c_transform"], [4, 2, 1, "", "add_c_xor"], [4, 2, 1, "", "add_c_xor_to_registers"], [4, 2, 1, "", "add_circbox"], [4, 2, 1, "", "add_circuit"], [4, 2, 1, "", "add_classicalexpbox_bit"], [4, 2, 1, "", "add_classicalexpbox_register"], [4, 2, 1, "", "add_conditional_barrier"], [4, 2, 1, "", "add_conjugation_box"], [4, 2, 1, "", "add_custom_gate"], [4, 2, 1, "", "add_diagonal_box"], [4, 2, 1, "", "add_dummybox"], [4, 2, 1, "", "add_expbox"], [4, 2, 1, "", "add_gate"], [4, 2, 1, "", "add_multiplexed_tensored_u2"], [4, 2, 1, "", "add_multiplexedrotation"], [4, 2, 1, "", "add_multiplexedu2"], [4, 2, 1, "", "add_multiplexor"], [4, 2, 1, "", "add_pauliexpbox"], [4, 2, 1, "", "add_pauliexpcommutingsetbox"], [4, 2, 1, "", "add_pauliexppairbox"], [4, 2, 1, "", "add_phase"], [4, 2, 1, "", "add_phasepolybox"], [4, 2, 1, "", "add_q_register"], [4, 2, 1, "", "add_qcontrolbox"], [4, 2, 1, "", "add_qubit"], [4, 2, 1, "", "add_state_preparation_box"], [4, 2, 1, "", "add_toffolibox"], [4, 2, 1, "", "add_unitary1qbox"], [4, 2, 1, "", "add_unitary2qbox"], [4, 2, 1, "", "add_unitary3qbox"], [4, 2, 1, "", "add_wasm"], [4, 2, 1, "", "add_wasm_to_reg"], [4, 2, 1, "", "append"], [4, 3, 1, "", "bit_readout"], [4, 3, 1, "", "bits"], [4, 3, 1, "", "c_registers"], [4, 2, 1, "", "commands_of_type"], [4, 2, 1, "", "copy"], [4, 3, 1, "", "created_qubits"], [4, 2, 1, "", "dagger"], [4, 2, 1, "", "depth"], [4, 2, 1, "", "depth_2q"], [4, 2, 1, "", "depth_by_type"], [4, 3, 1, "", "discarded_qubits"], [4, 2, 1, "", "flatten_registers"], [4, 2, 1, "", "free_symbols"], [4, 2, 1, "", "from_dict"], [4, 2, 1, "", "get_c_register"], [4, 2, 1, "", "get_commands"], [4, 2, 1, "", "get_q_register"], [4, 2, 1, "", "get_resources"], [4, 2, 1, "", "get_statevector"], [4, 2, 1, "", "get_unitary"], [4, 2, 1, "", "get_unitary_times_other"], [4, 2, 1, "", "implicit_qubit_permutation"], [4, 3, 1, "", "is_simple"], [4, 2, 1, "", "is_symbolic"], [4, 2, 1, "", "measure_all"], [4, 2, 1, "", "measure_register"], [4, 2, 1, "", "n_1qb_gates"], [4, 2, 1, "", "n_2qb_gates"], [4, 3, 1, "", "n_bits"], [4, 3, 1, "", "n_gates"], [4, 2, 1, "", "n_gates_of_type"], [4, 2, 1, "", "n_nqb_gates"], [4, 3, 1, "", "n_qubits"], [4, 3, 1, "", "opgroups"], [4, 2, 1, "", "ops_of_type"], [4, 3, 1, "", "phase"], [4, 3, 1, "", "q_registers"], [4, 2, 1, "", "qubit_create"], [4, 2, 1, "", "qubit_create_all"], [4, 2, 1, "", "qubit_discard"], [4, 2, 1, "", "qubit_discard_all"], [4, 2, 1, "", "qubit_is_created"], [4, 2, 1, "", "qubit_is_discarded"], [4, 3, 1, "", "qubit_readout"], [4, 3, 1, "", "qubit_to_bit_map"], [4, 3, 1, "", "qubits"], [4, 2, 1, "", "remove_blank_wires"], [4, 2, 1, "", "rename_units"], [4, 2, 1, "", "replace_SWAPs"], [4, 2, 1, "", "replace_implicit_wire_swaps"], [4, 2, 1, "", "substitute_named"], [4, 2, 1, "", "symbol_substitution"], [4, 2, 1, "", "to_dict"], [4, 2, 1, "", "to_latex_file"], [4, 2, 1, "", "transpose"], [4, 2, 1, "", "valid_connectivity"]], "pytket.circuit.ClassicalEvalOp": [[3, 2, 1, "", "__init__"]], "pytket.circuit.ClassicalExpBox": [[3, 2, 1, "", "content_equality"], [3, 2, 1, "", "get_exp"], [3, 2, 1, "", "get_n_i"], [3, 2, 1, "", "get_n_io"], [3, 2, 1, "", "get_n_o"]], "pytket.circuit.ClassicalOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "n_input_outputs"], [3, 3, 1, "", "n_inputs"], [3, 3, 1, "", "n_outputs"]], "pytket.circuit.Command": [[3, 3, 1, "", "args"], [3, 3, 1, "", "bits"], [3, 2, 1, "", "free_symbols"], [3, 3, 1, "", "op"], [3, 3, 1, "", "opgroup"], [3, 3, 1, "", "qubits"]], "pytket.circuit.Conditional": [[3, 3, 1, "", "op"], [3, 3, 1, "", "value"], [3, 3, 1, "", "width"]], "pytket.circuit.ConjugationBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_action"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_compute"], [3, 2, 1, "", "get_uncompute"]], "pytket.circuit.CopyBitsOp": [[3, 2, 1, "", "__init__"]], "pytket.circuit.CustomGate": [[3, 3, 1, "", "gate"], [3, 2, 1, "", "get_circuit"], [3, 3, 1, "", "name"], [3, 3, 1, "", "params"]], "pytket.circuit.CustomGateDef": [[3, 3, 1, "", "args"], [3, 3, 1, "", "arity"], [3, 2, 1, "", "define"], [3, 3, 1, "", "definition"], [3, 2, 1, "", "from_dict"], [3, 3, 1, "", "name"], [3, 2, 1, "", "to_dict"]], "pytket.circuit.DiagonalBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_diagonal"], [3, 2, 1, "", "is_upper_triangle"]], "pytket.circuit.DummyBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_n_bits"], [3, 2, 1, "", "get_n_qubits"], [3, 2, 1, "", "get_resource_data"]], "pytket.circuit.ExpBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"]], "pytket.circuit.MultiBitOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "basic_op"]], "pytket.circuit.MultiplexedRotationBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_bitstring_op_pair_list"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_op_map"]], "pytket.circuit.MultiplexedTensoredU2Box": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_bitstring_op_pair_list"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_op_map"]], "pytket.circuit.MultiplexedU2Box": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_bitstring_op_pair_list"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_impl_diag"], [3, 2, 1, "", "get_op_map"]], "pytket.circuit.MultiplexorBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_bitstring_op_pair_list"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_op_map"]], "pytket.circuit.Op": [[3, 2, 1, "", "create"], [3, 3, 1, "", "dagger"], [3, 2, 1, "", "free_symbols"], [3, 2, 1, "", "get_name"], [3, 2, 1, "", "get_unitary"], [3, 2, 1, "", "is_clifford"], [3, 2, 1, "", "is_clifford_type"], [3, 2, 1, "", "is_gate"], [3, 3, 1, "", "n_qubits"], [3, 3, 1, "", "params"], [3, 3, 1, "", "transpose"], [3, 3, 1, "", "type"]], "pytket.circuit.OpType": [[15, 2, 1, "", "from_name"], [15, 3, 1, "", "name"]], "pytket.circuit.PauliExpBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_cx_config"], [3, 2, 1, "", "get_paulis"], [3, 2, 1, "", "get_phase"]], "pytket.circuit.PauliExpPairBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_cx_config"], [3, 2, 1, "", "get_paulis_pair"], [3, 2, 1, "", "get_phase_pair"]], "pytket.circuit.PhasePolyBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 3, 1, "", "linear_transformation"], [3, 3, 1, "", "n_qubits"], [3, 3, 1, "", "phase_polynomial"], [3, 3, 1, "", "phase_polynomial_as_list"], [3, 3, 1, "", "qubit_indices"]], "pytket.circuit.ProjectorAssertionBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_matrix"]], "pytket.circuit.QControlBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_control_state"], [3, 2, 1, "", "get_control_state_bits"], [3, 2, 1, "", "get_n_controls"], [3, 2, 1, "", "get_op"]], "pytket.circuit.RangePredicateOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "lower"], [3, 3, 1, "", "upper"]], "pytket.circuit.ResourceBounds": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_max"], [3, 2, 1, "", "get_min"]], "pytket.circuit.ResourceData": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "__repr__"], [3, 2, 1, "", "get_gate_depth"], [3, 2, 1, "", "get_op_type_count"], [3, 2, 1, "", "get_op_type_depth"], [3, 2, 1, "", "get_two_qubit_gate_depth"]], "pytket.circuit.SetBitsOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "values"]], "pytket.circuit.StabiliserAssertionBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_stabilisers"]], "pytket.circuit.StatePreparationBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_statevector"], [3, 2, 1, "", "is_inverse"], [3, 2, 1, "", "with_initial_reset"]], "pytket.circuit.ToffoliBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_permutation"], [3, 2, 1, "", "get_rotation_axis"], [3, 2, 1, "", "get_strat"]], "pytket.circuit.Unitary1qBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_matrix"]], "pytket.circuit.Unitary2qBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_matrix"]], "pytket.circuit.Unitary3qBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_matrix"]], "pytket.circuit.WASMOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "func_name"], [3, 3, 1, "", "input_widths"], [3, 3, 1, "", "n_i32"], [3, 3, 1, "", "num_bits"], [3, 3, 1, "", "num_w"], [3, 3, 1, "", "output_widths"], [3, 3, 1, "", "wasm_uid"]], "pytket.logging": [[13, 1, 1, "", "level"], [13, 4, 1, "", "set_level"]], "pytket.logging.level": [[13, 3, 1, "", "name"]], "pytket.mapping": [[14, 1, 1, "", "AASLabellingMethod"], [14, 1, 1, "", "AASRouteRoutingMethod"], [14, 1, 1, "", "BoxDecompositionRoutingMethod"], [14, 1, 1, "", "LexiLabellingMethod"], [14, 1, 1, "", "LexiRouteRoutingMethod"], [14, 1, 1, "", "MappingManager"], [14, 1, 1, "", "MultiGateReorderRoutingMethod"], [14, 1, 1, "", "RoutingMethod"], [14, 1, 1, "", "RoutingMethodCircuit"]], "pytket.mapping.AASLabellingMethod": [[14, 2, 1, "", "__init__"]], "pytket.mapping.AASRouteRoutingMethod": [[14, 2, 1, "", "__init__"]], "pytket.mapping.BoxDecompositionRoutingMethod": [[14, 2, 1, "", "__init__"]], "pytket.mapping.LexiLabellingMethod": [[14, 2, 1, "", "__init__"]], "pytket.mapping.LexiRouteRoutingMethod": [[14, 2, 1, "", "__init__"]], "pytket.mapping.MappingManager": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "route_circuit"]], "pytket.mapping.MultiGateReorderRoutingMethod": [[14, 2, 1, "", "__init__"]], "pytket.mapping.RoutingMethod": [[14, 2, 1, "", "__init__"]], "pytket.mapping.RoutingMethodCircuit": [[14, 2, 1, "", "__init__"]], "pytket.partition": [[16, 1, 1, "", "GraphColourMethod"], [16, 1, 1, "", "MeasurementBitMap"], [16, 1, 1, "", "MeasurementSetup"], [16, 1, 1, "", "PauliPartitionStrat"], [16, 4, 1, "", "measurement_reduction"], [16, 4, 1, "", "term_sequence"]], "pytket.partition.GraphColourMethod": [[16, 2, 1, "", "__init__"], [16, 3, 1, "", "name"]], "pytket.partition.MeasurementBitMap": [[16, 2, 1, "", "__init__"], [16, 3, 1, "", "bits"], [16, 3, 1, "", "circ_index"], [16, 2, 1, "", "from_dict"], [16, 3, 1, "", "invert"], [16, 2, 1, "", "to_dict"]], "pytket.partition.MeasurementSetup": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "add_measurement_circuit"], [16, 2, 1, "", "add_result_for_term"], [16, 2, 1, "", "from_dict"], [16, 3, 1, "", "measurement_circs"], [16, 3, 1, "", "results"], [16, 2, 1, "", "to_dict"], [16, 2, 1, "", "verify"]], "pytket.partition.PauliPartitionStrat": [[16, 2, 1, "", "__init__"], [16, 3, 1, "", "name"]], "pytket.passes": [[17, 4, 1, "", "AASRouting"], [17, 1, 1, "", "BasePass"], [17, 1, 1, "", "CNotSynthType"], [17, 4, 1, "", "CXMappingPass"], [17, 4, 1, "", "CliffordSimp"], [17, 4, 1, "", "CnXPairwiseDecomposition"], [17, 4, 1, "", "CommuteThroughMultis"], [17, 4, 1, "", "ComposePhasePolyBoxes"], [17, 4, 1, "", "ContextSimp"], [17, 4, 1, "", "CustomPass"], [17, 4, 1, "", "CustomRoutingPass"], [17, 4, 1, "", "DecomposeArbitrarilyControlledGates"], [17, 4, 1, "", "DecomposeBoxes"], [17, 4, 1, "", "DecomposeClassicalExp"], [17, 4, 1, "", "DecomposeMultiQubitsCX"], [17, 4, 1, "", "DecomposeSingleQubitsTK1"], [17, 4, 1, "", "DecomposeSwapsToCXs"], [17, 4, 1, "", "DecomposeSwapsToCircuit"], [17, 4, 1, "", "DecomposeTK2"], [17, 4, 1, "", "DefaultMappingPass"], [17, 4, 1, "", "DelayMeasures"], [17, 4, 1, "", "EulerAngleReduction"], [17, 4, 1, "", "FlattenRegisters"], [17, 4, 1, "", "FlattenRelabelRegistersPass"], [17, 4, 1, "", "FullMappingPass"], [17, 4, 1, "", "FullPeepholeOptimise"], [17, 4, 1, "", "GlobalisePhasedX"], [17, 4, 1, "", "GuidedPauliSimp"], [17, 4, 1, "", "KAKDecomposition"], [17, 4, 1, "", "NaivePlacementPass"], [17, 4, 1, "", "NormaliseTK2"], [17, 4, 1, "", "OptimisePhaseGadgets"], [17, 4, 1, "", "PauliExponentials"], [17, 4, 1, "", "PauliSimp"], [17, 4, 1, "", "PauliSquash"], [17, 4, 1, "", "PeepholeOptimise2Q"], [17, 4, 1, "", "PlacementPass"], [17, 4, 1, "", "RebaseCustom"], [17, 4, 1, "", "RebaseTket"], [17, 4, 1, "", "RemoveBarriers"], [17, 4, 1, "", "RemoveDiscarded"], [17, 4, 1, "", "RemoveImplicitQubitPermutation"], [17, 4, 1, "", "RemoveRedundancies"], [17, 4, 1, "", "RenameQubitsPass"], [17, 1, 1, "", "RepeatPass"], [17, 1, 1, "", "RepeatUntilSatisfiedPass"], [17, 1, 1, "", "RepeatWithMetricPass"], [17, 4, 1, "", "RoundAngles"], [17, 4, 1, "", "RoutingPass"], [17, 1, 1, "", "SafetyMode"], [17, 1, 1, "", "SequencePass"], [17, 4, 1, "", "SimplifyInitial"], [17, 4, 1, "", "SimplifyMeasured"], [17, 4, 1, "", "SquashCustom"], [17, 4, 1, "", "SquashRzPhasedX"], [17, 4, 1, "", "SquashTK1"], [17, 4, 1, "", "SynthesiseHQS"], [17, 4, 1, "", "SynthesiseOQC"], [17, 4, 1, "", "SynthesiseTK"], [17, 4, 1, "", "SynthesiseTket"], [17, 4, 1, "", "SynthesiseUMD"], [17, 4, 1, "", "ThreeQubitSquash"], [17, 4, 1, "", "ZXGraphlikeOptimisation"], [17, 4, 1, "", "ZZPhaseToRz"]], "pytket.passes.BasePass": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "apply"], [17, 2, 1, "", "from_dict"], [17, 2, 1, "", "to_dict"]], "pytket.passes.CNotSynthType": [[17, 2, 1, "", "__init__"], [17, 3, 1, "", "name"]], "pytket.passes.RepeatPass": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "get_pass"]], "pytket.passes.RepeatUntilSatisfiedPass": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "get_pass"], [17, 2, 1, "", "get_predicate"]], "pytket.passes.RepeatWithMetricPass": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "get_metric"], [17, 2, 1, "", "get_pass"]], "pytket.passes.SafetyMode": [[17, 2, 1, "", "__init__"], [17, 3, 1, "", "name"]], "pytket.passes.SequencePass": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "get_sequence"]], "pytket.pauli": [[18, 1, 1, "", "Pauli"], [18, 1, 1, "", "PauliStabiliser"], [18, 1, 1, "", "QubitPauliString"], [18, 1, 1, "", "QubitPauliTensor"], [18, 4, 1, "", "pauli_string_mult"]], "pytket.pauli.Pauli": [[18, 2, 1, "", "__init__"], [18, 3, 1, "", "name"]], "pytket.pauli.PauliStabiliser": [[18, 2, 1, "", "__init__"], [18, 3, 1, "", "coeff"], [18, 3, 1, "", "string"]], "pytket.pauli.QubitPauliString": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "commutes_with"], [18, 2, 1, "", "compress"], [18, 2, 1, "", "dot_state"], [18, 2, 1, "", "from_list"], [18, 3, 1, "", "map"], [18, 2, 1, "", "state_expectation"], [18, 2, 1, "", "to_list"], [18, 2, 1, "", "to_sparse_matrix"]], "pytket.pauli.QubitPauliTensor": [[18, 2, 1, "", "__init__"], [18, 3, 1, "", "coeff"], [18, 2, 1, "", "commutes_with"], [18, 2, 1, "", "compress"], [18, 2, 1, "", "dot_state"], [18, 2, 1, "", "state_expectation"], [18, 3, 1, "", "string"], [18, 2, 1, "", "to_sparse_matrix"]], "pytket.placement": [[19, 1, 1, "", "GraphPlacement"], [19, 1, 1, "", "LinePlacement"], [19, 1, 1, "", "NoiseAwarePlacement"], [19, 1, 1, "", "Placement"], [19, 4, 1, "", "place_fully_connected"], [19, 4, 1, "", "place_with_map"]], "pytket.placement.GraphPlacement": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "modify_config"]], "pytket.placement.LinePlacement": [[19, 2, 1, "", "__init__"]], "pytket.placement.NoiseAwarePlacement": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "modify_config"]], "pytket.placement.Placement": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "from_dict"], [19, 2, 1, "", "get_placement_map"], [19, 2, 1, "", "get_placement_maps"], [19, 2, 1, "", "place"], [19, 2, 1, "", "place_with_map"], [19, 2, 1, "", "to_dict"]], "pytket.predicates": [[20, 1, 1, "", "CliffordCircuitPredicate"], [20, 1, 1, "", "CommutableMeasuresPredicate"], [20, 1, 1, "", "CompilationUnit"], [20, 1, 1, "", "ConnectivityPredicate"], [20, 1, 1, "", "DefaultRegisterPredicate"], [20, 1, 1, "", "DirectednessPredicate"], [20, 1, 1, "", "GateSetPredicate"], [20, 1, 1, "", "MaxNClRegPredicate"], [20, 1, 1, "", "MaxNQubitsPredicate"], [20, 1, 1, "", "MaxTwoQubitGatesPredicate"], [20, 1, 1, "", "NoBarriersPredicate"], [20, 1, 1, "", "NoClassicalBitsPredicate"], [20, 1, 1, "", "NoClassicalControlPredicate"], [20, 1, 1, "", "NoFastFeedforwardPredicate"], [20, 1, 1, "", "NoMidMeasurePredicate"], [20, 1, 1, "", "NoSymbolsPredicate"], [20, 1, 1, "", "NoWireSwapsPredicate"], [20, 1, 1, "", "NormalisedTK2Predicate"], [20, 1, 1, "", "PlacementPredicate"], [20, 1, 1, "", "Predicate"], [20, 1, 1, "", "UserDefinedPredicate"]], "pytket.predicates.CliffordCircuitPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.CommutableMeasuresPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.CompilationUnit": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "check_all_predicates"], [20, 3, 1, "", "circuit"], [20, 3, 1, "", "final_map"], [20, 3, 1, "", "initial_map"]], "pytket.predicates.ConnectivityPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.DefaultRegisterPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.DirectednessPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.GateSetPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.MaxNClRegPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.MaxNQubitsPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.MaxTwoQubitGatesPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.NoBarriersPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.NoClassicalBitsPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.NoClassicalControlPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.NoFastFeedforwardPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.NoMidMeasurePredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.NoSymbolsPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.NoWireSwapsPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.NormalisedTK2Predicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.PlacementPredicate": [[20, 2, 1, "", "__init__"]], "pytket.predicates.Predicate": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "from_dict"], [20, 2, 1, "", "implies"], [20, 2, 1, "", "to_dict"], [20, 2, 1, "", "verify"]], "pytket.predicates.UserDefinedPredicate": [[20, 2, 1, "", "__init__"]], "pytket.tableau": [[23, 1, 1, "", "UnitaryTableau"], [23, 1, 1, "", "UnitaryTableauBox"]], "pytket.tableau.UnitaryTableau": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "apply_gate_at_end"], [23, 2, 1, "", "apply_gate_at_front"], [23, 2, 1, "", "get_row_product"], [23, 2, 1, "", "get_xrow"], [23, 2, 1, "", "get_zrow"], [23, 2, 1, "", "to_circuit"]], "pytket.tableau.UnitaryTableauBox": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "get_circuit"], [23, 2, 1, "", "get_tableau"]], "pytket.tailoring": [[24, 1, 1, "", "FrameRandomisation"], [24, 1, 1, "", "PauliFrameRandomisation"], [24, 1, 1, "", "UniversalFrameRandomisation"], [24, 4, 1, "", "apply_clifford_basis_change"], [24, 4, 1, "", "apply_clifford_basis_change_tensor"]], "pytket.tailoring.FrameRandomisation": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "get_all_circuits"], [24, 2, 1, "", "sample_circuits"]], "pytket.tailoring.PauliFrameRandomisation": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "get_all_circuits"], [24, 2, 1, "", "sample_circuits"]], "pytket.tailoring.UniversalFrameRandomisation": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "get_all_circuits"], [24, 2, 1, "", "sample_circuits"]], "pytket.transform": [[25, 1, 1, "", "PauliSynthStrat"], [25, 1, 1, "", "Transform"], [25, 4, 1, "", "separate_classical"]], "pytket.transform.PauliSynthStrat": [[25, 2, 1, "", "__init__"], [25, 3, 1, "", "name"]], "pytket.transform.Transform": [[25, 2, 1, "", "CnXPairwiseDecomposition"], [25, 2, 1, "", "CommuteSQThroughSWAP"], [25, 2, 1, "", "CommuteThroughMultis"], [25, 2, 1, "", "DecomposeBRIDGE"], [25, 2, 1, "", "DecomposeBoxes"], [25, 2, 1, "", "DecomposeCCX"], [25, 2, 1, "", "DecomposeCXDirected"], [25, 2, 1, "", "DecomposeControlledRys"], [25, 2, 1, "", "DecomposeNPhasedX"], [25, 2, 1, "", "DecomposeSWAP"], [25, 2, 1, "", "DecomposeSWAPtoCX"], [25, 2, 1, "", "DecomposeTK2"], [25, 2, 1, "", "GlobalisePhasedX"], [25, 2, 1, "", "KAKDecomposition"], [25, 2, 1, "", "NormaliseTK2"], [25, 2, 1, "", "OptimiseCliffords"], [25, 2, 1, "", "OptimisePauliGadgets"], [25, 2, 1, "", "OptimisePhaseGadgets"], [25, 2, 1, "", "OptimisePostRouting"], [25, 2, 1, "", "OptimiseStandard"], [25, 2, 1, "", "RebaseToCirq"], [25, 2, 1, "", "RebaseToCliffordSingles"], [25, 2, 1, "", "RebaseToProjectQ"], [25, 2, 1, "", "RebaseToPyZX"], [25, 2, 1, "", "RebaseToQuil"], [25, 2, 1, "", "RebaseToRzRx"], [25, 2, 1, "", "RebaseToTket"], [25, 2, 1, "", "ReduceSingles"], [25, 2, 1, "", "RemoveRedundancies"], [25, 2, 1, "", "SynthesisePauliGraph"], [25, 2, 1, "", "ThreeQubitSquash"], [25, 2, 1, "", "UCCSynthesis"], [25, 2, 1, "", "ZZPhaseToRz"], [25, 2, 1, "", "__init__"], [25, 2, 1, "", "apply"], [25, 2, 1, "", "repeat"], [25, 2, 1, "", "round_angles"], [25, 2, 1, "", "sequence"], [25, 2, 1, "", "while_repeat"]], "pytket.unit_id": [[26, 1, 1, "", "Bit"], [26, 1, 1, "", "BitRegister"], [26, 1, 1, "", "Node"], [26, 1, 1, "", "Qubit"], [26, 1, 1, "", "QubitRegister"], [26, 1, 1, "", "UnitID"], [26, 1, 1, "", "UnitType"]], "pytket.unit_id.Bit": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "from_list"], [26, 2, 1, "", "to_list"]], "pytket.unit_id.BitRegister": [[26, 2, 1, "", "__init__"], [26, 3, 1, "", "name"], [26, 3, 1, "", "size"], [26, 2, 1, "", "to_list"]], "pytket.unit_id.Node": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "from_list"], [26, 2, 1, "", "to_list"]], "pytket.unit_id.Qubit": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "from_list"], [26, 2, 1, "", "to_list"]], "pytket.unit_id.QubitRegister": [[26, 2, 1, "", "__init__"], [26, 3, 1, "", "name"], [26, 3, 1, "", "size"], [26, 2, 1, "", "to_list"]], "pytket.unit_id.UnitID": [[26, 2, 1, "", "__init__"], [26, 3, 1, "", "index"], [26, 3, 1, "", "reg_name"], [26, 3, 1, "", "type"]], "pytket.unit_id.UnitType": [[26, 2, 1, "", "__init__"], [26, 3, 1, "", "name"]], "pytket.zx": [[29, 1, 1, "", "CliffordGen"], [29, 1, 1, "", "DirectedGen"], [29, 1, 1, "", "Flow"], [29, 1, 1, "", "PhasedGen"], [29, 1, 1, "", "QuantumType"], [29, 1, 1, "", "Rewrite"], [29, 1, 1, "", "ZXBox"], [29, 1, 1, "", "ZXDiagram"], [29, 1, 1, "", "ZXGen"], [29, 1, 1, "", "ZXType"], [29, 1, 1, "", "ZXVert"], [29, 1, 1, "", "ZXWire"], [29, 1, 1, "", "ZXWireType"], [29, 4, 1, "", "circuit_to_zx"]], "pytket.zx.CliffordGen": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "param"]], "pytket.zx.DirectedGen": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "n_ports"], [29, 3, 1, "", "signature"]], "pytket.zx.Flow": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "c"], [29, 3, 1, "", "cmap"], [29, 2, 1, "", "d"], [29, 3, 1, "", "dmap"], [29, 2, 1, "", "focus"], [29, 2, 1, "", "identify_causal_flow"], [29, 2, 1, "", "identify_focussed_sets"], [29, 2, 1, "", "identify_pauli_flow"], [29, 2, 1, "", "odd"]], "pytket.zx.PhasedGen": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "param"]], "pytket.zx.QuantumType": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "name"]], "pytket.zx.Rewrite": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "apply"], [29, 2, 1, "", "basic_wires"], [29, 2, 1, "", "decompose_boxes"], [29, 2, 1, "", "extend_at_boundary_paulis"], [29, 2, 1, "", "extend_for_PX_outputs"], [29, 2, 1, "", "gadgetise_interior_paulis"], [29, 2, 1, "", "internalise_gadgets"], [29, 2, 1, "", "io_extension"], [29, 2, 1, "", "merge_gadgets"], [29, 2, 1, "", "parallel_h_removal"], [29, 2, 1, "", "rebase_to_mbqc"], [29, 2, 1, "", "rebase_to_zx"], [29, 2, 1, "", "red_to_green"], [29, 2, 1, "", "reduce_graphlike_form"], [29, 2, 1, "", "remove_interior_cliffords"], [29, 2, 1, "", "remove_interior_paulis"], [29, 2, 1, "", "repeat"], [29, 2, 1, "", "self_loop_removal"], [29, 2, 1, "", "separate_boundaries"], [29, 2, 1, "", "sequence"], [29, 2, 1, "", "spider_fusion"], [29, 2, 1, "", "to_MBQC_diag"], [29, 2, 1, "", "to_graphlike_form"]], "pytket.zx.ZXBox": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "diagram"], [29, 3, 1, "", "n_ports"], [29, 3, 1, "", "signature"]], "pytket.zx.ZXDiagram": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "add_vertex"], [29, 2, 1, "", "add_wire"], [29, 2, 1, "", "add_zxbox"], [29, 2, 1, "", "adj_wires"], [29, 2, 1, "", "check_validity"], [29, 2, 1, "", "count_vertices"], [29, 2, 1, "", "count_wires"], [29, 2, 1, "", "degree"], [29, 2, 1, "", "free_symbols"], [29, 2, 1, "", "get_boundary"], [29, 2, 1, "", "get_name"], [29, 2, 1, "", "get_qtype"], [29, 2, 1, "", "get_vertex_ZXGen"], [29, 2, 1, "", "get_wire_ends"], [29, 2, 1, "", "get_wire_qtype"], [29, 2, 1, "", "get_wire_type"], [29, 2, 1, "", "get_zxtype"], [29, 2, 1, "", "is_symbolic"], [29, 2, 1, "", "multiply_scalar"], [29, 3, 1, "", "n_vertices"], [29, 3, 1, "", "n_wires"], [29, 2, 1, "", "neighbours"], [29, 2, 1, "", "other_end"], [29, 2, 1, "", "remove_vertex"], [29, 2, 1, "", "remove_wire"], [29, 3, 1, "", "scalar"], [29, 2, 1, "", "set_vertex_ZXGen"], [29, 2, 1, "", "set_wire_qtype"], [29, 2, 1, "", "set_wire_type"], [29, 2, 1, "", "symbol_substitution"], [29, 2, 1, "", "to_circuit"], [29, 2, 1, "", "to_doubled_diagram"], [29, 2, 1, "", "to_graphviz_str"], [29, 3, 1, "", "vertices"], [29, 2, 1, "", "wire_at_port"], [29, 2, 1, "", "wire_between"], [29, 3, 1, "", "wires"], [29, 2, 1, "", "wires_between"]], "pytket.zx.ZXGen": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "create"], [29, 3, 1, "", "qtype"], [29, 3, 1, "", "type"]], "pytket.zx.ZXType": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "name"]], "pytket.zx.ZXVert": [[29, 2, 1, "", "__init__"]], "pytket.zx.ZXWire": [[29, 2, 1, "", "__init__"]], "pytket.zx.ZXWireType": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "name"]], "pytket": [[1, 0, 0, "-", "backends"], [6, 0, 0, "-", "config"], [17, 0, 0, "-", "passes"], [21, 0, 0, "-", "qasm"], [22, 0, 0, "-", "quipper"], [27, 0, 0, "-", "utils"], [28, 0, 0, "-", "wasm"]], "pytket.backends": [[1, 1, 1, "", "Backend"], [1, 0, 0, "-", "backendinfo"], [1, 0, 0, "-", "backendresult"], [1, 0, 0, "-", "resulthandle"], [1, 0, 0, "-", "status"]], "pytket.backends.Backend": [[1, 2, 1, "", "__init__"], [1, 2, 1, "", "available_devices"], [1, 3, 1, "", "backend_info"], [1, 2, 1, "", "cancel"], [1, 2, 1, "", "circuit_status"], [1, 2, 1, "", "default_compilation_pass"], [1, 2, 1, "", "empty_cache"], [1, 3, 1, "", "expectation_allows_nonhermitian"], [1, 2, 1, "", "get_compiled_circuit"], [1, 2, 1, "", "get_compiled_circuits"], [1, 2, 1, "", "get_result"], [1, 2, 1, "", "get_results"], [1, 3, 1, "", "persistent_handles"], [1, 2, 1, "", "pop_result"], [1, 2, 1, "", "process_circuit"], [1, 2, 1, "", "process_circuits"], [1, 2, 1, "", "rebase_pass"], [1, 3, 1, "", "required_predicates"], [1, 2, 1, "", "run_circuit"], [1, 2, 1, "", "run_circuits"], [1, 3, 1, "", "supports_contextual_optimisation"], [1, 3, 1, "", "supports_counts"], [1, 3, 1, "", "supports_density_matrix"], [1, 3, 1, "", "supports_expectation"], [1, 3, 1, "", "supports_shots"], [1, 3, 1, "", "supports_state"], [1, 3, 1, "", "supports_unitary"], [1, 2, 1, "", "valid_circuit"]], "pytket.backends.backendinfo": [[1, 1, 1, "", "BackendInfo"]], "pytket.backends.backendinfo.BackendInfo": [[1, 2, 1, "", "add_misc"], [1, 2, 1, "", "from_dict"], [1, 2, 1, "", "get_misc"], [1, 3, 1, "", "n_nodes"], [1, 3, 1, "", "nodes"], [1, 2, 1, "", "to_dict"]], "pytket.backends.backendresult": [[1, 1, 1, "", "BackendResult"], [1, 1, 1, "", "StoredResult"]], "pytket.backends.backendresult.BackendResult": [[1, 3, 1, "", "contains_measured_results"], [1, 3, 1, "", "contains_state_results"], [1, 2, 1, "", "from_dict"], [1, 2, 1, "", "get_bitlist"], [1, 2, 1, "", "get_counts"], [1, 2, 1, "", "get_debug_info"], [1, 2, 1, "", "get_density_matrix"], [1, 2, 1, "", "get_distribution"], [1, 2, 1, "", "get_empirical_distribution"], [1, 2, 1, "", "get_probability_distribution"], [1, 2, 1, "", "get_qbitlist"], [1, 2, 1, "", "get_result"], [1, 2, 1, "", "get_shots"], [1, 2, 1, "", "get_state"], [1, 2, 1, "", "get_unitary"], [1, 2, 1, "", "to_dict"]], "pytket.backends.backendresult.StoredResult": [[1, 5, 1, "", "counts"], [1, 5, 1, "", "density_matrix"], [1, 5, 1, "", "shots"], [1, 5, 1, "", "state"], [1, 5, 1, "", "unitary"]], "pytket.backends.resulthandle": [[1, 1, 1, "", "ResultHandle"]], "pytket.backends.resulthandle.ResultHandle": [[1, 2, 1, "", "from_str"]], "pytket.backends.status": [[1, 1, 1, "", "CircuitStatus"], [1, 6, 1, "", "StatusEnum"]], "pytket.backends.status.CircuitStatus": [[1, 5, 1, "", "cancelled_time"], [1, 5, 1, "", "completed_time"], [1, 5, 1, "", "error_detail"], [1, 5, 1, "", "error_time"], [1, 2, 1, "", "from_dict"], [1, 5, 1, "", "message"], [1, 5, 1, "", "queue_position"], [1, 5, 1, "", "queued_time"], [1, 5, 1, "", "running_time"], [1, 5, 1, "", "status"], [1, 5, 1, "", "submitted_time"], [1, 2, 1, "", "to_dict"]], "pytket.backends.status.StatusEnum": [[1, 5, 1, "", "CANCELLED"], [1, 5, 1, "", "COMPLETED"], [1, 5, 1, "", "ERROR"], [1, 5, 1, "", "QUEUED"], [1, 5, 1, "", "RUNNING"], [1, 5, 1, "", "SUBMITTED"]], "pytket.circuit": [[7, 0, 0, "-", "display"], [5, 0, 0, "-", "logic_exp"]], "pytket.circuit.display": [[7, 1, 1, "", "CircuitRenderer"], [7, 4, 1, "", "get_circuit_renderer"]], "pytket.circuit.display.CircuitRenderer": [[7, 2, 1, "", "get_render_options"], [7, 2, 1, "", "render_circuit_as_html"], [7, 2, 1, "", "render_circuit_jupyter"], [7, 2, 1, "", "set_render_options"], [7, 2, 1, "", "view_browser"]], "pytket.circuit.logic_exp": [[5, 1, 1, "", "And"], [5, 1, 1, "", "BinaryOp"], [5, 1, 1, "", "BitAnd"], [5, 1, 1, "", "BitEq"], [5, 1, 1, "", "BitLogicExp"], [5, 1, 1, "", "BitNeq"], [5, 1, 1, "", "BitNot"], [5, 1, 1, "", "BitOr"], [5, 6, 1, "", "BitWiseOp"], [5, 1, 1, "", "BitXor"], [5, 5, 1, "", "ConstPredicate"], [5, 1, 1, "", "Eq"], [5, 1, 1, "", "LogicExp"], [5, 1, 1, "", "Neq"], [5, 1, 1, "", "Or"], [5, 1, 1, "", "PredicateExp"], [5, 1, 1, "", "RegAdd"], [5, 1, 1, "", "RegAnd"], [5, 1, 1, "", "RegDiv"], [5, 1, 1, "", "RegEq"], [5, 1, 1, "", "RegGeq"], [5, 1, 1, "", "RegGt"], [5, 1, 1, "", "RegLeq"], [5, 1, 1, "", "RegLogicExp"], [5, 1, 1, "", "RegLsh"], [5, 1, 1, "", "RegLt"], [5, 1, 1, "", "RegMul"], [5, 1, 1, "", "RegNeg"], [5, 1, 1, "", "RegNeq"], [5, 1, 1, "", "RegNot"], [5, 1, 1, "", "RegOr"], [5, 1, 1, "", "RegPow"], [5, 1, 1, "", "RegRsh"], [5, 1, 1, "", "RegSub"], [5, 6, 1, "", "RegWiseOp"], [5, 1, 1, "", "RegXor"], [5, 1, 1, "", "UnaryOp"], [5, 1, 1, "", "Xor"], [5, 4, 1, "", "filter_by_type"], [5, 4, 1, "", "if_bit"], [5, 4, 1, "", "if_not_bit"], [5, 4, 1, "", "reg_eq"], [5, 4, 1, "", "reg_geq"], [5, 4, 1, "", "reg_gt"], [5, 4, 1, "", "reg_leq"], [5, 4, 1, "", "reg_lt"], [5, 4, 1, "", "reg_neq"]], "pytket.circuit.logic_exp.And": [[5, 2, 1, "", "eval_vals"]], "pytket.circuit.logic_exp.BitOr": [[5, 2, 1, "", "eval_vals"]], "pytket.circuit.logic_exp.BitWiseOp": [[5, 5, 1, "", "AND"], [5, 5, 1, "", "EQ"], [5, 5, 1, "", "NEQ"], [5, 5, 1, "", "NOT"], [5, 5, 1, "", "OR"], [5, 5, 1, "", "XOR"]], "pytket.circuit.logic_exp.LogicExp": [[5, 2, 1, "", "all_inputs"], [5, 2, 1, "", "all_inputs_ordered"], [5, 2, 1, "", "eval_vals"], [5, 2, 1, "", "factory"], [5, 2, 1, "", "from_dict"], [5, 2, 1, "", "rename_args"], [5, 2, 1, "", "set_value"], [5, 2, 1, "", "to_dict"]], "pytket.circuit.logic_exp.RegWiseOp": [[5, 5, 1, "", "ADD"], [5, 5, 1, "", "AND"], [5, 5, 1, "", "DIV"], [5, 5, 1, "", "EQ"], [5, 5, 1, "", "GEQ"], [5, 5, 1, "", "GT"], [5, 5, 1, "", "LEQ"], [5, 5, 1, "", "LSH"], [5, 5, 1, "", "LT"], [5, 5, 1, "", "MUL"], [5, 5, 1, "", "NEQ"], [5, 5, 1, "", "NOT"], [5, 5, 1, "", "OR"], [5, 5, 1, "", "POW"], [5, 5, 1, "", "RSH"], [5, 5, 1, "", "SUB"], [5, 5, 1, "", "XOR"]], "pytket.config": [[6, 4, 1, "", "get_config_file_path"], [6, 4, 1, "", "load_config_file"], [6, 4, 1, "", "write_config_file"]], "pytket.config.pytket_config": [[6, 1, 1, "", "PytketConfig"], [6, 1, 1, "", "PytketExtConfig"]], "pytket.config.pytket_config.PytketConfig": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "default"], [6, 2, 1, "", "read_file"], [6, 2, 1, "", "write_file"]], "pytket.config.pytket_config.PytketExtConfig": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "from_default_config_file"], [6, 2, 1, "", "from_extension_dict"], [6, 2, 1, "", "from_pytketconfig"], [6, 2, 1, "", "to_dict"], [6, 2, 1, "", "update_default_config_file"], [6, 2, 1, "", "update_pytket_config"]], "pytket.passes": [[17, 1, 1, "", "PassSelector"], [17, 0, 0, "-", "auto_rebase"], [17, 0, 0, "-", "script"]], "pytket.passes.PassSelector": [[17, 2, 1, "", "apply"], [17, 2, 1, "", "get_scores"]], "pytket.passes.auto_rebase": [[17, 4, 1, "", "auto_rebase_pass"], [17, 4, 1, "", "auto_squash_pass"]], "pytket.passes.script": [[17, 4, 1, "", "compilation_pass_from_script"], [17, 4, 1, "", "compilation_pass_grammar"]], "pytket.qasm": [[21, 4, 1, "", "circuit_from_qasm"], [21, 4, 1, "", "circuit_from_qasm_io"], [21, 4, 1, "", "circuit_from_qasm_str"], [21, 4, 1, "", "circuit_from_qasm_wasm"], [21, 4, 1, "", "circuit_to_qasm"], [21, 4, 1, "", "circuit_to_qasm_io"], [21, 4, 1, "", "circuit_to_qasm_str"]], "pytket.quipper": [[22, 4, 1, "", "circuit_from_quipper"]], "pytket.utils": [[27, 1, 1, "", "Graph"], [27, 1, 1, "", "OutcomeArray"], [27, 1, 1, "", "QubitPauliOperator"], [27, 4, 1, "", "append_pauli_measurement"], [27, 4, 1, "", "compare_statevectors"], [27, 4, 1, "", "compare_unitaries"], [27, 4, 1, "", "counts_from_shot_table"], [27, 0, 0, "-", "distribution"], [27, 4, 1, "", "expectation_from_counts"], [27, 4, 1, "", "expectation_from_shots"], [27, 4, 1, "", "gen_term_sequence_circuit"], [27, 4, 1, "", "get_operator_expectation_value"], [27, 4, 1, "", "get_pauli_expectation_value"], [27, 4, 1, "", "permute_basis_indexing"], [27, 4, 1, "", "permute_qubits_in_statevector"], [27, 4, 1, "", "permute_rows_cols_in_unitary"], [27, 4, 1, "", "prepare_circuit"], [27, 4, 1, "", "probs_from_counts"], [27, 4, 1, "", "probs_from_state"], [27, 4, 1, "", "readout_counts"], [27, 0, 0, "-", "spam"], [27, 0, 0, "-", "stats"], [27, 0, 0, "-", "symbolic"]], "pytket.utils.Graph": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "as_nx"], [27, 2, 1, "", "get_DAG"], [27, 2, 1, "", "get_qubit_graph"], [27, 2, 1, "", "save_DAG"], [27, 2, 1, "", "save_qubit_graph"], [27, 2, 1, "", "view_DAG"], [27, 2, 1, "", "view_qubit_graph"]], "pytket.utils.OutcomeArray": [[27, 2, 1, "", "choose_indices"], [27, 2, 1, "", "counts"], [27, 2, 1, "", "from_dict"], [27, 2, 1, "", "from_ints"], [27, 2, 1, "", "from_readouts"], [27, 3, 1, "", "n_outcomes"], [27, 2, 1, "", "to_dict"], [27, 2, 1, "", "to_intlist"], [27, 2, 1, "", "to_readout"], [27, 2, 1, "", "to_readouts"], [27, 3, 1, "", "width"]], "pytket.utils.QubitPauliOperator": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "all_qubits"], [27, 2, 1, "", "compress"], [27, 2, 1, "", "dot_state"], [27, 2, 1, "", "from_list"], [27, 2, 1, "", "state_expectation"], [27, 2, 1, "", "subs"], [27, 2, 1, "", "to_list"], [27, 2, 1, "", "to_sparse_matrix"]], "pytket.utils.distribution": [[27, 1, 1, "", "EmpiricalDistribution"], [27, 1, 1, "", "ProbabilityDistribution"], [27, 4, 1, "", "convex_combination"]], "pytket.utils.distribution.EmpiricalDistribution": [[27, 2, 1, "", "__add__"], [27, 2, 1, "", "__eq__"], [27, 2, 1, "", "__getitem__"], [27, 2, 1, "", "as_counter"], [27, 2, 1, "", "condition"], [27, 2, 1, "", "map"], [27, 2, 1, "", "sample_mean"], [27, 2, 1, "", "sample_variance"], [27, 3, 1, "", "support"], [27, 3, 1, "", "total"]], "pytket.utils.distribution.ProbabilityDistribution": [[27, 2, 1, "", "__getitem__"], [27, 2, 1, "", "as_dict"], [27, 2, 1, "", "as_rv_discrete"], [27, 2, 1, "", "condition"], [27, 2, 1, "", "expectation"], [27, 2, 1, "", "from_empirical_distribution"], [27, 2, 1, "", "map"], [27, 3, 1, "", "support"], [27, 2, 1, "", "variance"]], "pytket.utils.spam": [[27, 1, 1, "", "SpamCorrecter"], [27, 4, 1, "", "compress_counts"]], "pytket.utils.spam.SpamCorrecter": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "calculate_matrices"], [27, 2, 1, "", "calibration_circuits"], [27, 2, 1, "", "correct_counts"], [27, 2, 1, "", "from_dict"], [27, 2, 1, "", "get_parallel_measure"], [27, 2, 1, "", "to_dict"]], "pytket.utils.stats": [[27, 4, 1, "", "gate_counts"]], "pytket.utils.symbolic": [[27, 1, 1, "", "SymGateRegister"], [27, 4, 1, "", "circuit_apply_symbolic_qubit"], [27, 4, 1, "", "circuit_apply_symbolic_statevector"], [27, 4, 1, "", "circuit_to_symbolic_gates"], [27, 4, 1, "", "circuit_to_symbolic_unitary"]], "pytket.utils.symbolic.SymGateRegister": [[27, 2, 1, "", "get_func"], [27, 2, 1, "", "is_registered"], [27, 2, 1, "", "register_func"]], "pytket.wasm": [[28, 1, 1, "", "WasmFileHandler"]], "pytket.wasm.WasmFileHandler": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "__repr__"], [28, 2, 1, "", "__str__"], [28, 2, 1, "", "check_function"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:function", "5": "py:attribute", "6": "py:enum"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "function", "Python function"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "enum", "Python enum"]}, "titleterms": {"pytket": [0, 1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29], "architectur": 0, "backend": [1, 8], "resulthandl": 1, "backendresult": 1, "statu": 1, "backendinfo": 1, "changelog": 2, "1": 2, "23": 2, "0": 2, "januari": 2, "2024": 2, "22": 2, "novemb": 2, "2023": 2, "21": 2, "octob": 2, "20": 2, "septemb": 2, "19": 2, "18": 2, "august": 2, "17": 2, "juli": 2, "16": 2, "june": 2, "15": 2, "mai": 2, "14": 2, "april": 2, "13": 2, "2": 2, "march": 2, "11": 2, "10": 2, "decemb": 2, "2022": 2, "9": 2, "8": 2, "7": 2, "3": 2, "6": 2, "5": 2, "4": 2, "februari": 2, "2021": 2, "12": 2, "2020": 2, "2019": 2, "2018": 2, "circuit": [3, 4, 5, 7, 15], "class": 3, "logic_exp": 5, "config": 6, "displai": 7, "exampl": 7, "usag": 7, "extens": [8, 11], "type": 8, "qpu": 8, "cloud": 8, "access": 8, "emul": 8, "statevector": 8, "simul": 8, "unitari": [8, 9], "densiti": 8, "matrix": 8, "clifford": 8, "other": 8, "tket": [9, 12], "faq": [9, 12], "rebas": 9, "synthesi": 9, "qiskit": 9, "convers": 9, "get": [10, 12], "start": 10, "how": 11, "cite": 11, "user": 11, "support": 11, "licenc": 11, "overview": 11, "document": 11, "api": 11, "refer": 11, "indic": 11, "tabl": 11, "instal": 12, "troubleshoot": 12, "gener": 12, "instruct": 12, "build": 12, "from": 12, "sourc": 12, "i": 12, "my": 12, "system": 12, "can": 12, "without": 12, "us": 12, "conan": 12, "do": 12, "all": 12, "version": 12, "work": 12, "window": 12, "modul": 12, "mention": 12, "doc": 12, "could": 12, "found": 12, "why": 12, "when": 12, "ran": 12, "pip": 12, "onli": 12, "an": 12, "old": 12, "what": 12, "give": 12, "ve": 12, "tri": 12, "recommend": 12, "action": 12, "here": 12, "still": 12, "won": 12, "t": 12, "log": 13, "map": 14, "optyp": 15, "partit": 16, "pass": 17, "script": 17, "auto_rebas": 17, "pauli": 18, "placement": 19, "predic": 20, "qasm": 21, "quipper": 22, "tableau": 23, "tailor": 24, "transform": 25, "unit_id": 26, "util": 27, "distribut": 27, "spam": 27, "stat": 27, "symbol": 27, "wasm": 28, "zx": 29}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"pytket.architecture": [[0, "module-pytket.architecture"]], "pytket.backends": [[1, "pytket-backends"]], "pytket.backends.backend": [[1, "pytket-backends-backend"]], "pytket.backends.resulthandle": [[1, "module-pytket.backends.resulthandle"]], "pytket.backends.backendresult": [[1, "module-pytket.backends.backendresult"]], "pytket.backends.status": [[1, "module-pytket.backends.status"]], "pytket.backends.backendinfo": [[1, "module-pytket.backends.backendinfo"]], "Changelog": [[2, "changelog"]], "1.23.0 (January 2024)": [[2, "january-2024"]], "1.22.0 (November 2023)": [[2, "november-2023"]], "1.21.0 (October 2023)": [[2, "october-2023"]], "1.20.1 (September 2023)": [[2, "september-2023"]], "1.20.0 (September 2023)": [[2, "id5"]], "1.19.1 (September 2023)": [[2, "id6"]], "1.19.0 (September 2023)": [[2, "id7"]], "1.18.0 (August 2023)": [[2, "august-2023"]], "1.17.1 (July 2023)": [[2, "july-2023"]], "1.17.0 (July 2023)": [[2, "id8"]], "1.16.0 (June 2023)": [[2, "june-2023"]], "1.15.0 (May 2023)": [[2, "may-2023"]], "1.14.0 (April 2023)": [[2, "april-2023"]], "1.13.2 (March 2023)": [[2, "march-2023"]], "1.13.1 (March 2023)": [[2, "id9"]], "1.13.0 (March 2023)": [[2, "id10"]], "1.11.1 (January 2023)": [[2, "january-2023"]], "1.11.0 (January 2023)": [[2, "id13"]], "1.10.0 (December 2022)": [[2, "december-2022"]], "1.9.1 (December 2022)": [[2, "id14"]], "1.9.0 (November 2022)": [[2, "november-2022"]], "1.8.1 (November 2022)": [[2, "id15"]], "1.8.0 (November 2022)": [[2, "id16"]], "1.7.3 (October 2022)": [[2, "october-2022"]], "1.6.1 (September 2022)": [[2, "september-2022"]], "1.6.0 (September 2022)": [[2, "id17"]], "1.5.2 (August 2022)": [[2, "august-2022"]], "1.5.1 (August 2022)": [[2, "id20"]], "1.5.0 (August 2022)": [[2, "id21"]], "1.4.3 (July 2022)": [[2, "july-2022"]], "1.4.2 (July 2022)": [[2, "id22"]], "1.4.1 (July 2022)": [[2, "id23"]], "1.3.0 (June 2022)": [[2, "june-2022"]], "1.2.2 (May 2022)": [[2, "may-2022"]], "1.2.1 (May 2022)": [[2, "id24"]], "1.1.0 (April 2022)": [[2, "april-2022"]], "1.0.1 (March 2022)": [[2, "march-2022"]], "1.0.0 (March 2022)": [[2, "id25"]], "0.19.2 (February 2022)": [[2, "february-2022"]], "0.19.1 (February 2022)": [[2, "id26"]], "0.19.0 (February 2022)": [[2, "id27"]], "0.18.0 (January 2022)": [[2, "january-2022"]], "0.17.0 (November 2021)": [[2, "november-2021"]], "0.16.0 (October 2021)": [[2, "october-2021"]], "0.15.0 (September 2021)": [[2, "september-2021"]], "0.14.0 (September 2021)": [[2, "id28"]], "0.13.0 (July 2021)": [[2, "july-2021"]], "0.12.0 (June 2021)": [[2, "june-2021"]], "0.11.0 (May 2021)": [[2, "may-2021"]], "0.10.1 (May 2021)": [[2, "id29"]], "0.10.0 (April 2021)": [[2, "april-2021"]], "0.9.0 (March 2021)": [[2, "march-2021"]], "0.8.0 (March 2021)": [[2, "id30"]], "0.7.2 (February 2021)": [[2, "february-2021"]], "0.7.1 (February 2021)": [[2, "id31"]], "0.7.0 (February 2021)": [[2, "id32"]], "0.6.1 (October 2020)": [[2, "october-2020"]], "0.6.0 (September 2020)": [[2, "september-2020"]], "0.5.7 (August 2020)": [[2, "august-2020"]], "0.5.5 (June 2020)": [[2, "june-2020"]], "0.5.4 (May 2020)": [[2, "may-2020"]], "0.5.2 (April 2020)": [[2, "april-2020"]], "0.4.1 (December 2019)": [[2, "december-2019"]], "0.4.0 (November 2019)": [[2, "november-2019"]], "0.3.0 (August 2019)": [[2, "august-2019"]], "0.2.3 (July 2019)": [[2, "july-2019"]], "0.2.2 (June 2019)": [[2, "june-2019"]], "0.2.1 (June 2019)": [[2, "id33"]], "0.2.0 (June 2019)": [[2, "id34"]], "0.1.6 (April 2019)": [[2, "april-2019"]], "0.1.5 (April 2019)": [[2, "id35"]], "0.1.4 (April 2019)": [[2, "id36"]], "0.1.3 (March 2019)": [[2, "march-2019"]], "0.1.2 (February 2019)": [[2, "february-2019"]], "0.1.0 (December 2018)": [[2, "december-2018"]], "0.0.1 (July 2018)": [[2, "july-2018"]], "pytket.circuit": [[3, "pytket-circuit"]], "Classes:": [[3, null]], "pytket.circuit.Circuit": [[4, "pytket-circuit-circuit"]], "pytket.circuit.logic_exp": [[5, "pytket-circuit-logic-exp"]], "pytket.config": [[6, "module-pytket.config"]], "pytket.circuit.display": [[7, "pytket-circuit-display"]], "Example usage:": [[7, "example-usage"]], "pytket extensions": [[8, "pytket-extensions"]], "Types of Backend": [[8, "types-of-backend"]], "QPUs": [[8, "qpus"]], "Cloud Access": [[8, "cloud-access"]], "Emulators": [[8, "emulators"]], "Statevector Simulators": [[8, "statevector-simulators"]], "Unitary Simulators": [[8, "unitary-simulators"]], "Density Matrix Simulators": [[8, "density-matrix-simulators"]], "Clifford Simulators": [[8, "clifford-simulators"]], "Other": [[8, "other"]], "Extensions:": [[8, null]], "TKET FAQs": [[9, "tket-faqs"]], "Rebases": [[9, "rebases"]], "Unitary Synthesis": [[9, "unitary-synthesis"]], "Qiskit to TKET Conversion": [[9, "qiskit-to-tket-conversion"]], "Getting Started": [[10, "getting-started"]], "pytket": [[11, "pytket"]], "Extensions": [[11, "extensions"]], "How to cite": [[11, "how-to-cite"]], "User Support": [[11, "user-support"]], "LICENCE": [[11, "licence"]], "Overview:": [[11, null]], "pytket documentation:": [[11, null]], "API Reference:": [[11, null]], "Indices and tables": [[11, "indices-and-tables"]], "Installation Troubleshooting": [[12, "installation-troubleshooting"]], "General Installation Instructions": [[12, "general-installation-instructions"]], "Building TKET from source": [[12, "building-tket-from-source"]], "Installation FAQs": [[12, "installation-faqs"]], "Is there a build of pytket for my system?": [[12, "is-there-a-build-of-pytket-for-my-system"]], "Can I build TKET from source without using conan?": [[12, "can-i-build-tket-from-source-without-using-conan"]], "Do all versions of pytket work with Windows?": [[12, "do-all-versions-of-pytket-work-with-windows"]], "pytket installed but modules mentioned in the docs could not be found. Why?": [[12, "pytket-installed-but-modules-mentioned-in-the-docs-could-not-be-found-why"]], "When I ran pip install pytket, I could only get an old version. What gives?": [[12, "when-i-ran-pip-install-pytket-i-could-only-get-an-old-version-what-gives"]], "I\u2019ve tried the recommended actions here and it still won\u2019t work! What can I do?": [[12, "i-ve-tried-the-recommended-actions-here-and-it-still-won-t-work-what-can-i-do"]], "pytket.logging": [[13, "module-pytket.logging"]], "pytket.mapping": [[14, "module-pytket.mapping"]], "pytket.circuit.OpType": [[15, "pytket-circuit-optype"]], "pytket.partition": [[16, "module-pytket.partition"]], "pytket.passes": [[17, "pytket-passes"]], "pytket.passes.script": [[17, "module-pytket.passes.script"]], "pytket.passes.auto_rebase": [[17, "module-pytket.passes.auto_rebase"]], "pytket.pauli": [[18, "module-pytket.pauli"]], "pytket.placement": [[19, "pytket-placement"]], "pytket.predicates": [[20, "pytket-predicates"]], "pytket.qasm": [[21, "pytket-qasm"]], "pytket.quipper": [[22, "module-pytket.quipper"]], "pytket.tableau": [[23, "module-pytket.tableau"]], "pytket.tailoring": [[24, "module-pytket.tailoring"]], "pytket.transform": [[25, "module-pytket.transform"]], "pytket.unit_id": [[26, "module-pytket.unit_id"]], "pytket.utils": [[27, "module-pytket.utils"]], "pytket.utils.distribution": [[27, "pytket-utils-distribution"]], "pytket.utils.spam": [[27, "module-pytket.utils.spam"]], "pytket.utils.stats": [[27, "module-pytket.utils.stats"]], "pytket.utils.symbolic": [[27, "module-pytket.utils.symbolic"]], "pytket.wasm": [[28, "module-pytket.wasm"]], "pytket.zx": [[29, "module-pytket.zx"]]}, "indexentries": {"architecture (class in pytket.architecture)": [[0, "pytket.architecture.Architecture"]], "fullyconnected (class in pytket.architecture)": [[0, "pytket.architecture.FullyConnected"]], "ringarch (class in pytket.architecture)": [[0, "pytket.architecture.RingArch"]], "squaregrid (class in pytket.architecture)": [[0, "pytket.architecture.SquareGrid"]], "__init__() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.__init__"]], "__init__() (pytket.architecture.fullyconnected method)": [[0, "pytket.architecture.FullyConnected.__init__"]], "__init__() (pytket.architecture.ringarch method)": [[0, "pytket.architecture.RingArch.__init__"]], "__init__() (pytket.architecture.squaregrid method)": [[0, "pytket.architecture.SquareGrid.__init__"]], "coupling (pytket.architecture.architecture property)": [[0, "pytket.architecture.Architecture.coupling"]], "from_dict() (pytket.architecture.architecture static method)": [[0, "pytket.architecture.Architecture.from_dict"]], "from_dict() (pytket.architecture.fullyconnected static method)": [[0, "pytket.architecture.FullyConnected.from_dict"]], "get_adjacent_nodes() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.get_adjacent_nodes"]], "get_distance() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.get_distance"]], "module": [[0, "module-pytket.architecture"], [1, "module-pytket.backends"], [1, "module-pytket.backends.backendinfo"], [1, "module-pytket.backends.backendresult"], [1, "module-pytket.backends.resulthandle"], [1, "module-pytket.backends.status"], [3, "module-pytket.circuit"], [5, "module-pytket.circuit.logic_exp"], [6, "module-pytket.config"], [7, "module-pytket.circuit.display"], [13, "module-pytket.logging"], [14, "module-pytket.mapping"], [16, "module-pytket.partition"], [17, "module-pytket.passes"], [17, "module-pytket.passes"], [17, "module-pytket.passes.auto_rebase"], [17, "module-pytket.passes.script"], [18, "module-pytket.pauli"], [19, "module-pytket.placement"], [20, "module-pytket.predicates"], [21, "module-pytket.qasm"], [22, "module-pytket.quipper"], [23, "module-pytket.tableau"], [24, "module-pytket.tailoring"], [25, "module-pytket.transform"], [26, "module-pytket.unit_id"], [27, "module-pytket.utils"], [27, "module-pytket.utils.distribution"], [27, "module-pytket.utils.spam"], [27, "module-pytket.utils.stats"], [27, "module-pytket.utils.symbolic"], [28, "module-pytket.wasm"], [29, "module-pytket.zx"]], "nodes (pytket.architecture.architecture property)": [[0, "pytket.architecture.Architecture.nodes"]], "nodes (pytket.architecture.fullyconnected property)": [[0, "pytket.architecture.FullyConnected.nodes"]], "pytket.architecture": [[0, "module-pytket.architecture"]], "qind_to_squind() (pytket.architecture.squaregrid method)": [[0, "pytket.architecture.SquareGrid.qind_to_squind"]], "squind_to_qind() (pytket.architecture.squaregrid method)": [[0, "pytket.architecture.SquareGrid.squind_to_qind"]], "to_dict() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.to_dict"]], "to_dict() (pytket.architecture.fullyconnected method)": [[0, "pytket.architecture.FullyConnected.to_dict"]], "valid_operation() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.valid_operation"]], "backend (class in pytket.backends)": [[1, "pytket.backends.Backend"]], "backendinfo (class in pytket.backends.backendinfo)": [[1, "pytket.backends.backendinfo.BackendInfo"]], "backendresult (class in pytket.backends.backendresult)": [[1, "pytket.backends.backendresult.BackendResult"]], "cancelled (pytket.backends.status.statusenum attribute)": [[1, "pytket.backends.status.StatusEnum.CANCELLED"]], "completed (pytket.backends.status.statusenum attribute)": [[1, "pytket.backends.status.StatusEnum.COMPLETED"]], "circuitstatus (class in pytket.backends.status)": [[1, "pytket.backends.status.CircuitStatus"]], "error (pytket.backends.status.statusenum attribute)": [[1, "pytket.backends.status.StatusEnum.ERROR"]], "queued (pytket.backends.status.statusenum attribute)": [[1, "pytket.backends.status.StatusEnum.QUEUED"]], "running (pytket.backends.status.statusenum attribute)": [[1, "pytket.backends.status.StatusEnum.RUNNING"]], "resulthandle (class in pytket.backends.resulthandle)": [[1, "pytket.backends.resulthandle.ResultHandle"]], "submitted (pytket.backends.status.statusenum attribute)": [[1, "pytket.backends.status.StatusEnum.SUBMITTED"]], "storedresult (class in pytket.backends.backendresult)": [[1, "pytket.backends.backendresult.StoredResult"]], "__init__() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.__init__"]], "add_misc() (pytket.backends.backendinfo.backendinfo method)": [[1, "pytket.backends.backendinfo.BackendInfo.add_misc"]], "available_devices() (pytket.backends.backend class method)": [[1, "pytket.backends.Backend.available_devices"]], "backend_info (pytket.backends.backend property)": [[1, "pytket.backends.Backend.backend_info"]], "cancel() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.cancel"]], "cancelled_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.cancelled_time"]], "circuit_status() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.circuit_status"]], "completed_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.completed_time"]], "contains_measured_results (pytket.backends.backendresult.backendresult property)": [[1, "pytket.backends.backendresult.BackendResult.contains_measured_results"]], "contains_state_results (pytket.backends.backendresult.backendresult property)": [[1, "pytket.backends.backendresult.BackendResult.contains_state_results"]], "counts (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.counts"]], "default_compilation_pass() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.default_compilation_pass"]], "density_matrix (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.density_matrix"]], "empty_cache() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.empty_cache"]], "error_detail (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.error_detail"]], "error_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.error_time"]], "expectation_allows_nonhermitian (pytket.backends.backend property)": [[1, "pytket.backends.Backend.expectation_allows_nonhermitian"]], "from_dict() (pytket.backends.backendinfo.backendinfo class method)": [[1, "pytket.backends.backendinfo.BackendInfo.from_dict"]], "from_dict() (pytket.backends.backendresult.backendresult class method)": [[1, "pytket.backends.backendresult.BackendResult.from_dict"]], "from_dict() (pytket.backends.status.circuitstatus class method)": [[1, "pytket.backends.status.CircuitStatus.from_dict"]], "from_str() (pytket.backends.resulthandle.resulthandle class method)": [[1, "pytket.backends.resulthandle.ResultHandle.from_str"]], "get_bitlist() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_bitlist"]], "get_compiled_circuit() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.get_compiled_circuit"]], "get_compiled_circuits() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.get_compiled_circuits"]], "get_counts() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_counts"]], "get_debug_info() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_debug_info"]], "get_density_matrix() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_density_matrix"]], "get_distribution() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_distribution"]], "get_empirical_distribution() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_empirical_distribution"]], "get_misc() (pytket.backends.backendinfo.backendinfo method)": [[1, "pytket.backends.backendinfo.BackendInfo.get_misc"]], "get_probability_distribution() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_probability_distribution"]], "get_qbitlist() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_qbitlist"]], "get_result() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.get_result"]], "get_result() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_result"]], "get_results() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.get_results"]], "get_shots() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_shots"]], "get_state() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_state"]], "get_unitary() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_unitary"]], "message (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.message"]], "n_nodes (pytket.backends.backendinfo.backendinfo property)": [[1, "pytket.backends.backendinfo.BackendInfo.n_nodes"]], "nodes (pytket.backends.backendinfo.backendinfo property)": [[1, "pytket.backends.backendinfo.BackendInfo.nodes"]], "persistent_handles (pytket.backends.backend property)": [[1, "pytket.backends.Backend.persistent_handles"]], "pop_result() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.pop_result"]], "process_circuit() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.process_circuit"]], "process_circuits() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.process_circuits"]], "pytket.backends": [[1, "module-pytket.backends"]], "pytket.backends.backendinfo": [[1, "module-pytket.backends.backendinfo"]], "pytket.backends.backendresult": [[1, "module-pytket.backends.backendresult"]], "pytket.backends.resulthandle": [[1, "module-pytket.backends.resulthandle"]], "pytket.backends.status": [[1, "module-pytket.backends.status"]], "queue_position (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.queue_position"]], "queued_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.queued_time"]], "rebase_pass() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.rebase_pass"]], "required_predicates (pytket.backends.backend property)": [[1, "pytket.backends.Backend.required_predicates"]], "run_circuit() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.run_circuit"]], "run_circuits() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.run_circuits"]], "running_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.running_time"]], "shots (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.shots"]], "state (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.state"]], "status (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.status"]], "submitted_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.submitted_time"]], "supports_contextual_optimisation (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_contextual_optimisation"]], "supports_counts (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_counts"]], "supports_density_matrix (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_density_matrix"]], "supports_expectation (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_expectation"]], "supports_shots (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_shots"]], "supports_state (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_state"]], "supports_unitary (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_unitary"]], "to_dict() (pytket.backends.backendinfo.backendinfo method)": [[1, "pytket.backends.backendinfo.BackendInfo.to_dict"]], "to_dict() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.to_dict"]], "to_dict() (pytket.backends.status.circuitstatus method)": [[1, "pytket.backends.status.CircuitStatus.to_dict"]], "unitary (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.unitary"]], "valid_circuit() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.valid_circuit"]], "basisorder (class in pytket.circuit)": [[3, "pytket.circuit.BasisOrder"]], "circbox (class in pytket.circuit)": [[3, "pytket.circuit.CircBox"]], "classicalevalop (class in pytket.circuit)": [[3, "pytket.circuit.ClassicalEvalOp"]], "classicalexpbox (class in pytket.circuit)": [[3, "pytket.circuit.ClassicalExpBox"]], "classicalop (class in pytket.circuit)": [[3, "pytket.circuit.ClassicalOp"]], "command (class in pytket.circuit)": [[3, "pytket.circuit.Command"]], "conditional (class in pytket.circuit)": [[3, "pytket.circuit.Conditional"]], "conjugationbox (class in pytket.circuit)": [[3, "pytket.circuit.ConjugationBox"]], "copybitsop (class in pytket.circuit)": [[3, "pytket.circuit.CopyBitsOp"]], "customgate (class in pytket.circuit)": [[3, "pytket.circuit.CustomGate"]], "customgatedef (class in pytket.circuit)": [[3, "pytket.circuit.CustomGateDef"]], "diagonalbox (class in pytket.circuit)": [[3, "pytket.circuit.DiagonalBox"]], "dummybox (class in pytket.circuit)": [[3, "pytket.circuit.DummyBox"]], "expbox (class in pytket.circuit)": [[3, "pytket.circuit.ExpBox"]], "multibitop (class in pytket.circuit)": [[3, "pytket.circuit.MultiBitOp"]], "multiplexedrotationbox (class in pytket.circuit)": [[3, "pytket.circuit.MultiplexedRotationBox"]], "multiplexedtensoredu2box (class in pytket.circuit)": [[3, "pytket.circuit.MultiplexedTensoredU2Box"]], "multiplexedu2box (class in pytket.circuit)": [[3, "pytket.circuit.MultiplexedU2Box"]], "multiplexorbox (class in pytket.circuit)": [[3, "pytket.circuit.MultiplexorBox"]], "op (class in pytket.circuit)": [[3, "pytket.circuit.Op"]], "pauliexpbox (class in pytket.circuit)": [[3, "pytket.circuit.PauliExpBox"]], "pauliexppairbox (class in pytket.circuit)": [[3, "pytket.circuit.PauliExpPairBox"]], "phasepolybox (class in pytket.circuit)": [[3, "pytket.circuit.PhasePolyBox"]], "projectorassertionbox (class in pytket.circuit)": [[3, "pytket.circuit.ProjectorAssertionBox"]], "qcontrolbox (class in pytket.circuit)": [[3, "pytket.circuit.QControlBox"]], "rangepredicateop (class in pytket.circuit)": [[3, "pytket.circuit.RangePredicateOp"]], "resourcebounds (class in pytket.circuit)": [[3, "pytket.circuit.ResourceBounds"]], "resourcedata (class in pytket.circuit)": [[3, "pytket.circuit.ResourceData"]], "setbitsop (class in pytket.circuit)": [[3, "pytket.circuit.SetBitsOp"]], "stabiliserassertionbox (class in pytket.circuit)": [[3, "pytket.circuit.StabiliserAssertionBox"]], "statepreparationbox (class in pytket.circuit)": [[3, "pytket.circuit.StatePreparationBox"]], "toffolibox (class in pytket.circuit)": [[3, "pytket.circuit.ToffoliBox"]], "unitary1qbox (class in pytket.circuit)": [[3, "pytket.circuit.Unitary1qBox"]], "unitary2qbox (class in pytket.circuit)": [[3, "pytket.circuit.Unitary2qBox"]], "unitary3qbox (class in pytket.circuit)": [[3, "pytket.circuit.Unitary3qBox"]], "wasmop (class in pytket.circuit)": [[3, "pytket.circuit.WASMOp"]], "__init__() (pytket.circuit.circbox method)": [[3, "pytket.circuit.CircBox.__init__"]], "__init__() (pytket.circuit.classicalevalop method)": [[3, "pytket.circuit.ClassicalEvalOp.__init__"]], "__init__() (pytket.circuit.classicalop method)": [[3, "pytket.circuit.ClassicalOp.__init__"]], "__init__() (pytket.circuit.conjugationbox method)": [[3, "pytket.circuit.ConjugationBox.__init__"]], "__init__() (pytket.circuit.copybitsop method)": [[3, "pytket.circuit.CopyBitsOp.__init__"]], "__init__() (pytket.circuit.diagonalbox method)": [[3, "pytket.circuit.DiagonalBox.__init__"]], "__init__() (pytket.circuit.dummybox method)": [[3, "pytket.circuit.DummyBox.__init__"]], "__init__() (pytket.circuit.expbox method)": [[3, "pytket.circuit.ExpBox.__init__"]], "__init__() (pytket.circuit.multibitop method)": [[3, "pytket.circuit.MultiBitOp.__init__"]], "__init__() (pytket.circuit.multiplexedrotationbox method)": [[3, "pytket.circuit.MultiplexedRotationBox.__init__"]], "__init__() (pytket.circuit.multiplexedtensoredu2box method)": [[3, "pytket.circuit.MultiplexedTensoredU2Box.__init__"]], "__init__() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.__init__"]], "__init__() (pytket.circuit.multiplexorbox method)": [[3, "pytket.circuit.MultiplexorBox.__init__"]], "__init__() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.__init__"]], "__init__() (pytket.circuit.pauliexppairbox method)": [[3, "pytket.circuit.PauliExpPairBox.__init__"]], "__init__() (pytket.circuit.phasepolybox method)": [[3, "pytket.circuit.PhasePolyBox.__init__"]], "__init__() (pytket.circuit.projectorassertionbox method)": [[3, "pytket.circuit.ProjectorAssertionBox.__init__"]], "__init__() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.__init__"]], "__init__() (pytket.circuit.rangepredicateop method)": [[3, "pytket.circuit.RangePredicateOp.__init__"]], "__init__() (pytket.circuit.resourcebounds method)": [[3, "pytket.circuit.ResourceBounds.__init__"]], "__init__() (pytket.circuit.resourcedata method)": [[3, "pytket.circuit.ResourceData.__init__"]], "__init__() (pytket.circuit.setbitsop method)": [[3, "pytket.circuit.SetBitsOp.__init__"]], "__init__() (pytket.circuit.stabiliserassertionbox method)": [[3, "pytket.circuit.StabiliserAssertionBox.__init__"]], "__init__() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.__init__"]], "__init__() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.__init__"]], "__init__() (pytket.circuit.unitary1qbox method)": [[3, "pytket.circuit.Unitary1qBox.__init__"]], "__init__() (pytket.circuit.unitary2qbox method)": [[3, "pytket.circuit.Unitary2qBox.__init__"]], "__init__() (pytket.circuit.unitary3qbox method)": [[3, "pytket.circuit.Unitary3qBox.__init__"]], "__init__() (pytket.circuit.wasmop method)": [[3, "pytket.circuit.WASMOp.__init__"]], "__repr__() (pytket.circuit.resourcedata method)": [[3, "pytket.circuit.ResourceData.__repr__"]], "args (pytket.circuit.command property)": [[3, "pytket.circuit.Command.args"]], "args (pytket.circuit.customgatedef property)": [[3, "pytket.circuit.CustomGateDef.args"]], "arity (pytket.circuit.customgatedef property)": [[3, "pytket.circuit.CustomGateDef.arity"]], "basic_op (pytket.circuit.multibitop property)": [[3, "pytket.circuit.MultiBitOp.basic_op"]], "bits (pytket.circuit.command property)": [[3, "pytket.circuit.Command.bits"]], "content_equality() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.content_equality"]], "create() (pytket.circuit.op static method)": [[3, "pytket.circuit.Op.create"]], "dagger (pytket.circuit.op property)": [[3, "pytket.circuit.Op.dagger"]], "define() (pytket.circuit.customgatedef static method)": [[3, "pytket.circuit.CustomGateDef.define"]], "definition (pytket.circuit.customgatedef property)": [[3, "pytket.circuit.CustomGateDef.definition"]], "free_symbols() (pytket.circuit.command method)": [[3, "pytket.circuit.Command.free_symbols"]], "free_symbols() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.free_symbols"]], "fresh_symbol() (in module pytket.circuit)": [[3, "pytket.circuit.fresh_symbol"]], "from_dict() (pytket.circuit.customgatedef static method)": [[3, "pytket.circuit.CustomGateDef.from_dict"]], "func_name (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.func_name"]], "gate (pytket.circuit.customgate property)": [[3, "pytket.circuit.CustomGate.gate"]], "get_action() (pytket.circuit.conjugationbox method)": [[3, "pytket.circuit.ConjugationBox.get_action"]], "get_bitstring_op_pair_list() (pytket.circuit.multiplexedrotationbox method)": [[3, "pytket.circuit.MultiplexedRotationBox.get_bitstring_op_pair_list"]], "get_bitstring_op_pair_list() (pytket.circuit.multiplexedtensoredu2box method)": [[3, "pytket.circuit.MultiplexedTensoredU2Box.get_bitstring_op_pair_list"]], "get_bitstring_op_pair_list() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.get_bitstring_op_pair_list"]], "get_bitstring_op_pair_list() (pytket.circuit.multiplexorbox method)": [[3, "pytket.circuit.MultiplexorBox.get_bitstring_op_pair_list"]], "get_circuit() (pytket.circuit.circbox method)": [[3, "pytket.circuit.CircBox.get_circuit"]], "get_circuit() (pytket.circuit.conjugationbox method)": [[3, "pytket.circuit.ConjugationBox.get_circuit"]], "get_circuit() (pytket.circuit.customgate method)": [[3, "pytket.circuit.CustomGate.get_circuit"]], "get_circuit() (pytket.circuit.diagonalbox method)": [[3, "pytket.circuit.DiagonalBox.get_circuit"]], "get_circuit() (pytket.circuit.expbox method)": [[3, "pytket.circuit.ExpBox.get_circuit"]], "get_circuit() (pytket.circuit.multiplexedrotationbox method)": [[3, "pytket.circuit.MultiplexedRotationBox.get_circuit"]], "get_circuit() (pytket.circuit.multiplexedtensoredu2box method)": [[3, "pytket.circuit.MultiplexedTensoredU2Box.get_circuit"]], "get_circuit() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.get_circuit"]], "get_circuit() (pytket.circuit.multiplexorbox method)": [[3, "pytket.circuit.MultiplexorBox.get_circuit"]], "get_circuit() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.get_circuit"]], "get_circuit() (pytket.circuit.pauliexppairbox method)": [[3, "pytket.circuit.PauliExpPairBox.get_circuit"]], "get_circuit() (pytket.circuit.phasepolybox method)": [[3, "pytket.circuit.PhasePolyBox.get_circuit"]], "get_circuit() (pytket.circuit.projectorassertionbox method)": [[3, "pytket.circuit.ProjectorAssertionBox.get_circuit"]], "get_circuit() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.get_circuit"]], "get_circuit() (pytket.circuit.stabiliserassertionbox method)": [[3, "pytket.circuit.StabiliserAssertionBox.get_circuit"]], "get_circuit() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.get_circuit"]], "get_circuit() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.get_circuit"]], "get_circuit() (pytket.circuit.unitary1qbox method)": [[3, "pytket.circuit.Unitary1qBox.get_circuit"]], "get_circuit() (pytket.circuit.unitary2qbox method)": [[3, "pytket.circuit.Unitary2qBox.get_circuit"]], "get_circuit() (pytket.circuit.unitary3qbox method)": [[3, "pytket.circuit.Unitary3qBox.get_circuit"]], "get_compute() (pytket.circuit.conjugationbox method)": [[3, "pytket.circuit.ConjugationBox.get_compute"]], "get_control_state() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.get_control_state"]], "get_control_state_bits() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.get_control_state_bits"]], "get_cx_config() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.get_cx_config"]], "get_cx_config() (pytket.circuit.pauliexppairbox method)": [[3, "pytket.circuit.PauliExpPairBox.get_cx_config"]], "get_diagonal() (pytket.circuit.diagonalbox method)": [[3, "pytket.circuit.DiagonalBox.get_diagonal"]], "get_exp() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.get_exp"]], "get_gate_depth() (pytket.circuit.resourcedata method)": [[3, "pytket.circuit.ResourceData.get_gate_depth"]], "get_impl_diag() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.get_impl_diag"]], "get_matrix() (pytket.circuit.projectorassertionbox method)": [[3, "pytket.circuit.ProjectorAssertionBox.get_matrix"]], "get_matrix() (pytket.circuit.unitary1qbox method)": [[3, "pytket.circuit.Unitary1qBox.get_matrix"]], "get_matrix() (pytket.circuit.unitary2qbox method)": [[3, "pytket.circuit.Unitary2qBox.get_matrix"]], "get_matrix() (pytket.circuit.unitary3qbox method)": [[3, "pytket.circuit.Unitary3qBox.get_matrix"]], "get_max() (pytket.circuit.resourcebounds method)": [[3, "pytket.circuit.ResourceBounds.get_max"]], "get_min() (pytket.circuit.resourcebounds method)": [[3, "pytket.circuit.ResourceBounds.get_min"]], "get_n_bits() (pytket.circuit.dummybox method)": [[3, "pytket.circuit.DummyBox.get_n_bits"]], "get_n_controls() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.get_n_controls"]], "get_n_i() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.get_n_i"]], "get_n_io() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.get_n_io"]], "get_n_o() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.get_n_o"]], "get_n_qubits() (pytket.circuit.dummybox method)": [[3, "pytket.circuit.DummyBox.get_n_qubits"]], "get_name() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.get_name"]], "get_op() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.get_op"]], "get_op_map() (pytket.circuit.multiplexedrotationbox method)": [[3, "pytket.circuit.MultiplexedRotationBox.get_op_map"]], "get_op_map() (pytket.circuit.multiplexedtensoredu2box method)": [[3, "pytket.circuit.MultiplexedTensoredU2Box.get_op_map"]], "get_op_map() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.get_op_map"]], "get_op_map() (pytket.circuit.multiplexorbox method)": [[3, "pytket.circuit.MultiplexorBox.get_op_map"]], "get_op_type_count() (pytket.circuit.resourcedata method)": [[3, "pytket.circuit.ResourceData.get_op_type_count"]], "get_op_type_depth() (pytket.circuit.resourcedata method)": [[3, "pytket.circuit.ResourceData.get_op_type_depth"]], "get_paulis() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.get_paulis"]], "get_paulis_pair() (pytket.circuit.pauliexppairbox method)": [[3, "pytket.circuit.PauliExpPairBox.get_paulis_pair"]], "get_permutation() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.get_permutation"]], "get_phase() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.get_phase"]], "get_phase_pair() (pytket.circuit.pauliexppairbox method)": [[3, "pytket.circuit.PauliExpPairBox.get_phase_pair"]], "get_resource_data() (pytket.circuit.dummybox method)": [[3, "pytket.circuit.DummyBox.get_resource_data"]], "get_rotation_axis() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.get_rotation_axis"]], "get_stabilisers() (pytket.circuit.stabiliserassertionbox method)": [[3, "pytket.circuit.StabiliserAssertionBox.get_stabilisers"]], "get_statevector() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.get_statevector"]], "get_strat() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.get_strat"]], "get_two_qubit_gate_depth() (pytket.circuit.resourcedata method)": [[3, "pytket.circuit.ResourceData.get_two_qubit_gate_depth"]], "get_uncompute() (pytket.circuit.conjugationbox method)": [[3, "pytket.circuit.ConjugationBox.get_uncompute"]], "get_unitary() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.get_unitary"]], "input_widths (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.input_widths"]], "is_clifford() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.is_clifford"]], "is_clifford_type() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.is_clifford_type"]], "is_gate() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.is_gate"]], "is_inverse() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.is_inverse"]], "is_upper_triangle() (pytket.circuit.diagonalbox method)": [[3, "pytket.circuit.DiagonalBox.is_upper_triangle"]], "linear_transformation (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.linear_transformation"]], "lower (pytket.circuit.rangepredicateop property)": [[3, "pytket.circuit.RangePredicateOp.lower"]], "n_i32 (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.n_i32"]], "n_input_outputs (pytket.circuit.classicalop property)": [[3, "pytket.circuit.ClassicalOp.n_input_outputs"]], "n_inputs (pytket.circuit.classicalop property)": [[3, "pytket.circuit.ClassicalOp.n_inputs"]], "n_outputs (pytket.circuit.classicalop property)": [[3, "pytket.circuit.ClassicalOp.n_outputs"]], "n_qubits (pytket.circuit.op property)": [[3, "pytket.circuit.Op.n_qubits"]], "n_qubits (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.n_qubits"]], "name (pytket.circuit.basisorder property)": [[3, "pytket.circuit.BasisOrder.name"]], "name (pytket.circuit.customgate property)": [[3, "pytket.circuit.CustomGate.name"]], "name (pytket.circuit.customgatedef property)": [[3, "pytket.circuit.CustomGateDef.name"]], "num_bits (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.num_bits"]], "num_w (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.num_w"]], "op (pytket.circuit.command property)": [[3, "pytket.circuit.Command.op"]], "op (pytket.circuit.conditional property)": [[3, "pytket.circuit.Conditional.op"]], "opgroup (pytket.circuit.command property)": [[3, "pytket.circuit.Command.opgroup"]], "output_widths (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.output_widths"]], "params (pytket.circuit.customgate property)": [[3, "pytket.circuit.CustomGate.params"]], "params (pytket.circuit.op property)": [[3, "pytket.circuit.Op.params"]], "phase_polynomial (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.phase_polynomial"]], "phase_polynomial_as_list (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.phase_polynomial_as_list"]], "pytket.circuit": [[3, "module-pytket.circuit"]], "qubit_indices (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.qubit_indices"]], "qubits (pytket.circuit.command property)": [[3, "pytket.circuit.Command.qubits"]], "symbol_substitution() (pytket.circuit.circbox method)": [[3, "pytket.circuit.CircBox.symbol_substitution"]], "to_dict() (pytket.circuit.customgatedef method)": [[3, "pytket.circuit.CustomGateDef.to_dict"]], "transpose (pytket.circuit.op property)": [[3, "pytket.circuit.Op.transpose"]], "type (pytket.circuit.op property)": [[3, "pytket.circuit.Op.type"]], "upper (pytket.circuit.rangepredicateop property)": [[3, "pytket.circuit.RangePredicateOp.upper"]], "value (pytket.circuit.conditional property)": [[3, "pytket.circuit.Conditional.value"]], "values (pytket.circuit.setbitsop property)": [[3, "pytket.circuit.SetBitsOp.values"]], "wasm_uid (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.wasm_uid"]], "width (pytket.circuit.conditional property)": [[3, "pytket.circuit.Conditional.width"]], "with_initial_reset() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.with_initial_reset"]], "ccx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CCX"]], "ch() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CH"]], "crx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CRx"]], "cry() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CRy"]], "crz() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CRz"]], "cs() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CS"]], "cswap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CSWAP"]], "csx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CSX"]], "csxdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CSXdg"]], "csdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CSdg"]], "cu1() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CU1"]], "cu3() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CU3"]], "cv() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CV"]], "cvdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CVdg"]], "cx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CX"]], "cy() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CY"]], "cz() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CZ"]], "circuit (class in pytket.circuit)": [[4, "pytket.circuit.Circuit"]], "ecr() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ECR"]], "eswap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ESWAP"]], "fsim() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.FSim"]], "h() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.H"]], "iswap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ISWAP"]], "iswapmax() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ISWAPMax"]], "measure() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Measure"]], "phase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Phase"]], "phasediswap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.PhasedISWAP"]], "phasedx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.PhasedX"]], "reset() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Reset"]], "rx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Rx"]], "ry() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Ry"]], "rz() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Rz"]], "s() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.S"]], "swap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.SWAP"]], "sx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.SX"]], "sxdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.SXdg"]], "sdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Sdg"]], "sycamore() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Sycamore"]], "t() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.T"]], "tk1() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.TK1"]], "tk2() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.TK2"]], "tdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Tdg"]], "u1() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.U1"]], "u2() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.U2"]], "u3() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.U3"]], "v() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.V"]], "vdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Vdg"]], "x() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.X"]], "xxphase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.XXPhase"]], "xxphase3() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.XXPhase3"]], "y() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Y"]], "yyphase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.YYPhase"]], "z() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Z"]], "zzmax() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ZZMax"]], "zzphase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ZZPhase"]], "__eq__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__eq__"]], "__getstate__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__getstate__"]], "__hash__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__hash__"]], "__init__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__init__"]], "__iter__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__iter__"]], "__mul__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__mul__"]], "__repr__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__repr__"]], "__rshift__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__rshift__"]], "__setstate__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__setstate__"]], "__str__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__str__"]], "add_assertion() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_assertion"]], "add_barrier() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_barrier"]], "add_bit() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_bit"]], "add_blank_wires() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_blank_wires"]], "add_c_and() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_and"]], "add_c_and_to_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_and_to_registers"]], "add_c_copybits() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_copybits"]], "add_c_copyreg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_copyreg"]], "add_c_modifier() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_modifier"]], "add_c_not() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_not"]], "add_c_not_to_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_not_to_registers"]], "add_c_or() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_or"]], "add_c_or_to_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_or_to_registers"]], "add_c_predicate() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_predicate"]], "add_c_range_predicate() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_range_predicate"]], "add_c_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_register"]], "add_c_setbits() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_setbits"]], "add_c_setreg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_setreg"]], "add_c_transform() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_transform"]], "add_c_xor() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_xor"]], "add_c_xor_to_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_xor_to_registers"]], "add_circbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_circbox"]], "add_circuit() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_circuit"]], "add_classicalexpbox_bit() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_classicalexpbox_bit"]], "add_classicalexpbox_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_classicalexpbox_register"]], "add_conditional_barrier() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_conditional_barrier"]], "add_conjugation_box() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_conjugation_box"]], "add_custom_gate() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_custom_gate"]], "add_diagonal_box() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_diagonal_box"]], "add_dummybox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_dummybox"]], "add_expbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_expbox"]], "add_gate() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_gate"]], "add_multiplexed_tensored_u2() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_multiplexed_tensored_u2"]], "add_multiplexedrotation() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_multiplexedrotation"]], "add_multiplexedu2() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_multiplexedu2"]], "add_multiplexor() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_multiplexor"]], "add_pauliexpbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_pauliexpbox"]], "add_pauliexpcommutingsetbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_pauliexpcommutingsetbox"]], "add_pauliexppairbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_pauliexppairbox"]], "add_phase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_phase"]], "add_phasepolybox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_phasepolybox"]], "add_q_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_q_register"]], "add_qcontrolbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_qcontrolbox"]], "add_qubit() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_qubit"]], "add_state_preparation_box() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_state_preparation_box"]], "add_toffolibox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_toffolibox"]], "add_unitary1qbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_unitary1qbox"]], "add_unitary2qbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_unitary2qbox"]], "add_unitary3qbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_unitary3qbox"]], "add_wasm() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_wasm"]], "add_wasm_to_reg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_wasm_to_reg"]], "append() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.append"]], "bit_readout (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.bit_readout"]], "bits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.bits"]], "c_registers (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.c_registers"]], "commands_of_type() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.commands_of_type"]], "copy() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.copy"]], "created_qubits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.created_qubits"]], "dagger() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.dagger"]], "depth() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.depth"]], "depth_2q() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.depth_2q"]], "depth_by_type() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.depth_by_type"]], "discarded_qubits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.discarded_qubits"]], "flatten_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.flatten_registers"]], "free_symbols() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.free_symbols"]], "from_dict() (pytket.circuit.circuit static method)": [[4, "pytket.circuit.Circuit.from_dict"]], "get_c_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_c_register"]], "get_commands() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_commands"]], "get_q_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_q_register"]], "get_resources() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_resources"]], "get_statevector() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_statevector"]], "get_unitary() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_unitary"]], "get_unitary_times_other() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_unitary_times_other"]], "implicit_qubit_permutation() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.implicit_qubit_permutation"]], "is_simple (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.is_simple"]], "is_symbolic() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.is_symbolic"]], "measure_all() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.measure_all"]], "measure_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.measure_register"]], "n_1qb_gates() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.n_1qb_gates"]], "n_2qb_gates() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.n_2qb_gates"]], "n_bits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.n_bits"]], "n_gates (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.n_gates"]], "n_gates_of_type() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.n_gates_of_type"]], "n_nqb_gates() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.n_nqb_gates"]], "n_qubits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.n_qubits"]], "opgroups (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.opgroups"]], "ops_of_type() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ops_of_type"]], "phase (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.phase"]], "q_registers (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.q_registers"]], "qubit_create() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_create"]], "qubit_create_all() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_create_all"]], "qubit_discard() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_discard"]], "qubit_discard_all() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_discard_all"]], "qubit_is_created() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_is_created"]], "qubit_is_discarded() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_is_discarded"]], "qubit_readout (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.qubit_readout"]], "qubit_to_bit_map (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.qubit_to_bit_map"]], "qubits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.qubits"]], "remove_blank_wires() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.remove_blank_wires"]], "rename_units() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.rename_units"]], "replace_swaps() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.replace_SWAPs"]], "replace_implicit_wire_swaps() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.replace_implicit_wire_swaps"]], "substitute_named() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.substitute_named"]], "symbol_substitution() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.symbol_substitution"]], "to_dict() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.to_dict"]], "to_latex_file() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.to_latex_file"]], "transpose() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.transpose"]], "valid_connectivity() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.valid_connectivity"]], "add (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.ADD"]], "and (pytket.circuit.logic_exp.bitwiseop attribute)": [[5, "pytket.circuit.logic_exp.BitWiseOp.AND"]], "and (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.AND"]], "and (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.And"]], "binaryop (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BinaryOp"]], "bitand (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitAnd"]], "biteq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitEq"]], "bitlogicexp (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitLogicExp"]], "bitneq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitNeq"]], "bitnot (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitNot"]], "bitor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitOr"]], "bitxor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitXor"]], "constpredicate (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.ConstPredicate"]], "div (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.DIV"]], "eq (pytket.circuit.logic_exp.bitwiseop attribute)": [[5, "pytket.circuit.logic_exp.BitWiseOp.EQ"]], "eq (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.EQ"]], "eq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.Eq"]], "geq (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.GEQ"]], "gt (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.GT"]], "leq (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.LEQ"]], "lsh (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.LSH"]], "lt (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.LT"]], "logicexp (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.LogicExp"]], "mul (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.MUL"]], "neq (pytket.circuit.logic_exp.bitwiseop attribute)": [[5, "pytket.circuit.logic_exp.BitWiseOp.NEQ"]], "neq (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.NEQ"]], "not (pytket.circuit.logic_exp.bitwiseop attribute)": [[5, "pytket.circuit.logic_exp.BitWiseOp.NOT"]], "not (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.NOT"]], "neq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.Neq"]], "or (pytket.circuit.logic_exp.bitwiseop attribute)": [[5, "pytket.circuit.logic_exp.BitWiseOp.OR"]], "or (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.OR"]], "or (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.Or"]], "pow (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.POW"]], "predicateexp (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.PredicateExp"]], "rsh (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.RSH"]], "regadd (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegAdd"]], "regand (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegAnd"]], "regdiv (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegDiv"]], "regeq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegEq"]], "reggeq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegGeq"]], "reggt (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegGt"]], "regleq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegLeq"]], "reglogicexp (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegLogicExp"]], "reglsh (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegLsh"]], "reglt (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegLt"]], "regmul (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegMul"]], "regneg (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegNeg"]], "regneq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegNeq"]], "regnot (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegNot"]], "regor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegOr"]], "regpow (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegPow"]], "regrsh (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegRsh"]], "regsub (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegSub"]], "regxor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegXor"]], "sub (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.SUB"]], "unaryop (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.UnaryOp"]], "xor (pytket.circuit.logic_exp.bitwiseop attribute)": [[5, "pytket.circuit.logic_exp.BitWiseOp.XOR"]], "xor (pytket.circuit.logic_exp.regwiseop attribute)": [[5, "pytket.circuit.logic_exp.RegWiseOp.XOR"]], "xor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.Xor"]], "all_inputs() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.all_inputs"]], "all_inputs_ordered() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.all_inputs_ordered"]], "eval_vals() (pytket.circuit.logic_exp.and method)": [[5, "pytket.circuit.logic_exp.And.eval_vals"]], "eval_vals() (pytket.circuit.logic_exp.bitor method)": [[5, "pytket.circuit.logic_exp.BitOr.eval_vals"]], "eval_vals() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.eval_vals"]], "factory() (pytket.circuit.logic_exp.logicexp class method)": [[5, "pytket.circuit.logic_exp.LogicExp.factory"]], "filter_by_type() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.filter_by_type"]], "from_dict() (pytket.circuit.logic_exp.logicexp class method)": [[5, "pytket.circuit.logic_exp.LogicExp.from_dict"]], "if_bit() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.if_bit"]], "if_not_bit() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.if_not_bit"]], "pytket.circuit.logic_exp": [[5, "module-pytket.circuit.logic_exp"]], "reg_eq() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_eq"]], "reg_geq() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_geq"]], "reg_gt() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_gt"]], "reg_leq() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_leq"]], "reg_lt() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_lt"]], "reg_neq() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_neq"]], "rename_args() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.rename_args"]], "set_value() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.set_value"]], "to_dict() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.to_dict"]], "pytketconfig (class in pytket.config.pytket_config)": [[6, "pytket.config.pytket_config.PytketConfig"]], "pytketextconfig (class in pytket.config.pytket_config)": [[6, "pytket.config.pytket_config.PytketExtConfig"]], "__init__() (pytket.config.pytket_config.pytketconfig method)": [[6, "pytket.config.pytket_config.PytketConfig.__init__"]], "__init__() (pytket.config.pytket_config.pytketextconfig method)": [[6, "pytket.config.pytket_config.PytketExtConfig.__init__"]], "default() (pytket.config.pytket_config.pytketconfig class method)": [[6, "pytket.config.pytket_config.PytketConfig.default"]], "from_default_config_file() (pytket.config.pytket_config.pytketextconfig class method)": [[6, "pytket.config.pytket_config.PytketExtConfig.from_default_config_file"]], "from_extension_dict() (pytket.config.pytket_config.pytketextconfig class method)": [[6, "pytket.config.pytket_config.PytketExtConfig.from_extension_dict"]], "from_pytketconfig() (pytket.config.pytket_config.pytketextconfig class method)": [[6, "pytket.config.pytket_config.PytketExtConfig.from_pytketconfig"]], "get_config_file_path() (in module pytket.config)": [[6, "pytket.config.get_config_file_path"]], "load_config_file() (in module pytket.config)": [[6, "pytket.config.load_config_file"]], "pytket.config": [[6, "module-pytket.config"]], "read_file() (pytket.config.pytket_config.pytketconfig class method)": [[6, "pytket.config.pytket_config.PytketConfig.read_file"]], "to_dict() (pytket.config.pytket_config.pytketextconfig method)": [[6, "pytket.config.pytket_config.PytketExtConfig.to_dict"]], "update_default_config_file() (pytket.config.pytket_config.pytketextconfig method)": [[6, "pytket.config.pytket_config.PytketExtConfig.update_default_config_file"]], "update_pytket_config() (pytket.config.pytket_config.pytketextconfig method)": [[6, "pytket.config.pytket_config.PytketExtConfig.update_pytket_config"]], "write_config_file() (in module pytket.config)": [[6, "pytket.config.write_config_file"]], "write_file() (pytket.config.pytket_config.pytketconfig method)": [[6, "pytket.config.pytket_config.PytketConfig.write_file"]], "circuitrenderer (class in pytket.circuit.display)": [[7, "pytket.circuit.display.CircuitRenderer"]], "get_circuit_renderer() (in module pytket.circuit.display)": [[7, "pytket.circuit.display.get_circuit_renderer"]], "get_render_options() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.get_render_options"]], "pytket.circuit.display": [[7, "module-pytket.circuit.display"]], "render_circuit_as_html() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.render_circuit_as_html"]], "render_circuit_jupyter() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.render_circuit_jupyter"]], "set_render_options() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.set_render_options"]], "view_browser() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.view_browser"]], "level (class in pytket.logging)": [[13, "pytket.logging.level"]], "name (pytket.logging.level property)": [[13, "pytket.logging.level.name"]], "pytket.logging": [[13, "module-pytket.logging"]], "set_level() (in module pytket.logging)": [[13, "pytket.logging.set_level"]], "aaslabellingmethod (class in pytket.mapping)": [[14, "pytket.mapping.AASLabellingMethod"]], "aasrouteroutingmethod (class in pytket.mapping)": [[14, "pytket.mapping.AASRouteRoutingMethod"]], "boxdecompositionroutingmethod (class in pytket.mapping)": [[14, "pytket.mapping.BoxDecompositionRoutingMethod"]], "lexilabellingmethod (class in pytket.mapping)": [[14, "pytket.mapping.LexiLabellingMethod"]], "lexirouteroutingmethod (class in pytket.mapping)": [[14, "pytket.mapping.LexiRouteRoutingMethod"]], "mappingmanager (class in pytket.mapping)": [[14, "pytket.mapping.MappingManager"]], "multigatereorderroutingmethod (class in pytket.mapping)": [[14, "pytket.mapping.MultiGateReorderRoutingMethod"]], "routingmethod (class in pytket.mapping)": [[14, "pytket.mapping.RoutingMethod"]], "routingmethodcircuit (class in pytket.mapping)": [[14, "pytket.mapping.RoutingMethodCircuit"]], "__init__() (pytket.mapping.aaslabellingmethod method)": [[14, "pytket.mapping.AASLabellingMethod.__init__"]], "__init__() (pytket.mapping.aasrouteroutingmethod method)": [[14, "pytket.mapping.AASRouteRoutingMethod.__init__"]], "__init__() (pytket.mapping.boxdecompositionroutingmethod method)": [[14, "pytket.mapping.BoxDecompositionRoutingMethod.__init__"]], "__init__() (pytket.mapping.lexilabellingmethod method)": [[14, "pytket.mapping.LexiLabellingMethod.__init__"]], "__init__() (pytket.mapping.lexirouteroutingmethod method)": [[14, "pytket.mapping.LexiRouteRoutingMethod.__init__"]], "__init__() (pytket.mapping.mappingmanager method)": [[14, "pytket.mapping.MappingManager.__init__"]], "__init__() (pytket.mapping.multigatereorderroutingmethod method)": [[14, "pytket.mapping.MultiGateReorderRoutingMethod.__init__"]], "__init__() (pytket.mapping.routingmethod method)": [[14, "pytket.mapping.RoutingMethod.__init__"]], "__init__() (pytket.mapping.routingmethodcircuit method)": [[14, "pytket.mapping.RoutingMethodCircuit.__init__"]], "pytket.mapping": [[14, "module-pytket.mapping"]], "route_circuit() (pytket.mapping.mappingmanager method)": [[14, "pytket.mapping.MappingManager.route_circuit"]], "optype (class in pytket.circuit)": [[15, "pytket.circuit.OpType"]], "from_name() (pytket.circuit.optype static method)": [[15, "pytket.circuit.OpType.from_name"]], "name (pytket.circuit.optype property)": [[15, "pytket.circuit.OpType.name"]], "graphcolourmethod (class in pytket.partition)": [[16, "pytket.partition.GraphColourMethod"]], "measurementbitmap (class in pytket.partition)": [[16, "pytket.partition.MeasurementBitMap"]], "measurementsetup (class in pytket.partition)": [[16, "pytket.partition.MeasurementSetup"]], "paulipartitionstrat (class in pytket.partition)": [[16, "pytket.partition.PauliPartitionStrat"]], "__init__() (pytket.partition.graphcolourmethod method)": [[16, "pytket.partition.GraphColourMethod.__init__"]], "__init__() (pytket.partition.measurementbitmap method)": [[16, "pytket.partition.MeasurementBitMap.__init__"]], "__init__() (pytket.partition.measurementsetup method)": [[16, "pytket.partition.MeasurementSetup.__init__"]], "__init__() (pytket.partition.paulipartitionstrat method)": [[16, "pytket.partition.PauliPartitionStrat.__init__"]], "add_measurement_circuit() (pytket.partition.measurementsetup method)": [[16, "pytket.partition.MeasurementSetup.add_measurement_circuit"]], "add_result_for_term() (pytket.partition.measurementsetup method)": [[16, "pytket.partition.MeasurementSetup.add_result_for_term"]], "bits (pytket.partition.measurementbitmap property)": [[16, "pytket.partition.MeasurementBitMap.bits"]], "circ_index (pytket.partition.measurementbitmap property)": [[16, "pytket.partition.MeasurementBitMap.circ_index"]], "from_dict() (pytket.partition.measurementbitmap static method)": [[16, "pytket.partition.MeasurementBitMap.from_dict"]], "from_dict() (pytket.partition.measurementsetup static method)": [[16, "pytket.partition.MeasurementSetup.from_dict"]], "invert (pytket.partition.measurementbitmap property)": [[16, "pytket.partition.MeasurementBitMap.invert"]], "measurement_circs (pytket.partition.measurementsetup property)": [[16, "pytket.partition.MeasurementSetup.measurement_circs"]], "measurement_reduction() (in module pytket.partition)": [[16, "pytket.partition.measurement_reduction"]], "name (pytket.partition.graphcolourmethod property)": [[16, "pytket.partition.GraphColourMethod.name"]], "name (pytket.partition.paulipartitionstrat property)": [[16, "pytket.partition.PauliPartitionStrat.name"]], "pytket.partition": [[16, "module-pytket.partition"]], "results (pytket.partition.measurementsetup property)": [[16, "pytket.partition.MeasurementSetup.results"]], "term_sequence() (in module pytket.partition)": [[16, "pytket.partition.term_sequence"]], "to_dict() (pytket.partition.measurementbitmap method)": [[16, "pytket.partition.MeasurementBitMap.to_dict"]], "to_dict() (pytket.partition.measurementsetup method)": [[16, "pytket.partition.MeasurementSetup.to_dict"]], "verify() (pytket.partition.measurementsetup method)": [[16, "pytket.partition.MeasurementSetup.verify"]], "aasrouting() (in module pytket.passes)": [[17, "pytket.passes.AASRouting"]], "basepass (class in pytket.passes)": [[17, "pytket.passes.BasePass"]], "cnotsynthtype (class in pytket.passes)": [[17, "pytket.passes.CNotSynthType"]], "cxmappingpass() (in module pytket.passes)": [[17, "pytket.passes.CXMappingPass"]], "cliffordsimp() (in module pytket.passes)": [[17, "pytket.passes.CliffordSimp"]], "cnxpairwisedecomposition() (in module pytket.passes)": [[17, "pytket.passes.CnXPairwiseDecomposition"]], "commutethroughmultis() (in module pytket.passes)": [[17, "pytket.passes.CommuteThroughMultis"]], "composephasepolyboxes() (in module pytket.passes)": [[17, "pytket.passes.ComposePhasePolyBoxes"]], "contextsimp() (in module pytket.passes)": [[17, "pytket.passes.ContextSimp"]], "custompass() (in module pytket.passes)": [[17, "pytket.passes.CustomPass"]], "customroutingpass() (in module pytket.passes)": [[17, "pytket.passes.CustomRoutingPass"]], "decomposearbitrarilycontrolledgates() (in module pytket.passes)": [[17, "pytket.passes.DecomposeArbitrarilyControlledGates"]], "decomposeboxes() (in module pytket.passes)": [[17, "pytket.passes.DecomposeBoxes"]], "decomposeclassicalexp() (in module pytket.passes)": [[17, "pytket.passes.DecomposeClassicalExp"]], "decomposemultiqubitscx() (in module pytket.passes)": [[17, "pytket.passes.DecomposeMultiQubitsCX"]], "decomposesinglequbitstk1() (in module pytket.passes)": [[17, "pytket.passes.DecomposeSingleQubitsTK1"]], "decomposeswapstocxs() (in module pytket.passes)": [[17, "pytket.passes.DecomposeSwapsToCXs"]], "decomposeswapstocircuit() (in module pytket.passes)": [[17, "pytket.passes.DecomposeSwapsToCircuit"]], "decomposetk2() (in module pytket.passes)": [[17, "pytket.passes.DecomposeTK2"]], "defaultmappingpass() (in module pytket.passes)": [[17, "pytket.passes.DefaultMappingPass"]], "delaymeasures() (in module pytket.passes)": [[17, "pytket.passes.DelayMeasures"]], "euleranglereduction() (in module pytket.passes)": [[17, "pytket.passes.EulerAngleReduction"]], "flattenregisters() (in module pytket.passes)": [[17, "pytket.passes.FlattenRegisters"]], "flattenrelabelregisterspass() (in module pytket.passes)": [[17, "pytket.passes.FlattenRelabelRegistersPass"]], "fullmappingpass() (in module pytket.passes)": [[17, "pytket.passes.FullMappingPass"]], "fullpeepholeoptimise() (in module pytket.passes)": [[17, "pytket.passes.FullPeepholeOptimise"]], "globalisephasedx() (in module pytket.passes)": [[17, "pytket.passes.GlobalisePhasedX"]], "guidedpaulisimp() (in module pytket.passes)": [[17, "pytket.passes.GuidedPauliSimp"]], "kakdecomposition() (in module pytket.passes)": [[17, "pytket.passes.KAKDecomposition"]], "naiveplacementpass() (in module pytket.passes)": [[17, "pytket.passes.NaivePlacementPass"]], "normalisetk2() (in module pytket.passes)": [[17, "pytket.passes.NormaliseTK2"]], "optimisephasegadgets() (in module pytket.passes)": [[17, "pytket.passes.OptimisePhaseGadgets"]], "passselector (class in pytket.passes)": [[17, "pytket.passes.PassSelector"]], "pauliexponentials() (in module pytket.passes)": [[17, "pytket.passes.PauliExponentials"]], "paulisimp() (in module pytket.passes)": [[17, "pytket.passes.PauliSimp"]], "paulisquash() (in module pytket.passes)": [[17, "pytket.passes.PauliSquash"]], "peepholeoptimise2q() (in module pytket.passes)": [[17, "pytket.passes.PeepholeOptimise2Q"]], "placementpass() (in module pytket.passes)": [[17, "pytket.passes.PlacementPass"]], "rebasecustom() (in module pytket.passes)": [[17, "pytket.passes.RebaseCustom"]], "rebasetket() (in module pytket.passes)": [[17, "pytket.passes.RebaseTket"]], "removebarriers() (in module pytket.passes)": [[17, "pytket.passes.RemoveBarriers"]], "removediscarded() (in module pytket.passes)": [[17, "pytket.passes.RemoveDiscarded"]], "removeimplicitqubitpermutation() (in module pytket.passes)": [[17, "pytket.passes.RemoveImplicitQubitPermutation"]], "removeredundancies() (in module pytket.passes)": [[17, "pytket.passes.RemoveRedundancies"]], "renamequbitspass() (in module pytket.passes)": [[17, "pytket.passes.RenameQubitsPass"]], "repeatpass (class in pytket.passes)": [[17, "pytket.passes.RepeatPass"]], "repeatuntilsatisfiedpass (class in pytket.passes)": [[17, "pytket.passes.RepeatUntilSatisfiedPass"]], "repeatwithmetricpass (class in pytket.passes)": [[17, "pytket.passes.RepeatWithMetricPass"]], "roundangles() (in module pytket.passes)": [[17, "pytket.passes.RoundAngles"]], "routingpass() (in module pytket.passes)": [[17, "pytket.passes.RoutingPass"]], "safetymode (class in pytket.passes)": [[17, "pytket.passes.SafetyMode"]], "sequencepass (class in pytket.passes)": [[17, "pytket.passes.SequencePass"]], "simplifyinitial() (in module pytket.passes)": [[17, "pytket.passes.SimplifyInitial"]], "simplifymeasured() (in module pytket.passes)": [[17, "pytket.passes.SimplifyMeasured"]], "squashcustom() (in module pytket.passes)": [[17, "pytket.passes.SquashCustom"]], "squashrzphasedx() (in module pytket.passes)": [[17, "pytket.passes.SquashRzPhasedX"]], "squashtk1() (in module pytket.passes)": [[17, "pytket.passes.SquashTK1"]], "synthesisehqs() (in module pytket.passes)": [[17, "pytket.passes.SynthesiseHQS"]], "synthesiseoqc() (in module pytket.passes)": [[17, "pytket.passes.SynthesiseOQC"]], "synthesisetk() (in module pytket.passes)": [[17, "pytket.passes.SynthesiseTK"]], "synthesisetket() (in module pytket.passes)": [[17, "pytket.passes.SynthesiseTket"]], "synthesiseumd() (in module pytket.passes)": [[17, "pytket.passes.SynthesiseUMD"]], "threequbitsquash() (in module pytket.passes)": [[17, "pytket.passes.ThreeQubitSquash"]], "zxgraphlikeoptimisation() (in module pytket.passes)": [[17, "pytket.passes.ZXGraphlikeOptimisation"]], "zzphasetorz() (in module pytket.passes)": [[17, "pytket.passes.ZZPhaseToRz"]], "__init__() (pytket.passes.basepass method)": [[17, "pytket.passes.BasePass.__init__"]], "__init__() (pytket.passes.cnotsynthtype method)": [[17, "pytket.passes.CNotSynthType.__init__"]], "__init__() (pytket.passes.repeatpass method)": [[17, "pytket.passes.RepeatPass.__init__"]], "__init__() (pytket.passes.repeatuntilsatisfiedpass method)": [[17, "pytket.passes.RepeatUntilSatisfiedPass.__init__"]], "__init__() (pytket.passes.repeatwithmetricpass method)": [[17, "pytket.passes.RepeatWithMetricPass.__init__"]], "__init__() (pytket.passes.safetymode method)": [[17, "pytket.passes.SafetyMode.__init__"]], "__init__() (pytket.passes.sequencepass method)": [[17, "pytket.passes.SequencePass.__init__"]], "apply() (pytket.passes.basepass method)": [[17, "pytket.passes.BasePass.apply"]], "apply() (pytket.passes.passselector method)": [[17, "pytket.passes.PassSelector.apply"]], "auto_rebase_pass() (in module pytket.passes.auto_rebase)": [[17, "pytket.passes.auto_rebase.auto_rebase_pass"]], "auto_squash_pass() (in module pytket.passes.auto_rebase)": [[17, "pytket.passes.auto_rebase.auto_squash_pass"]], "compilation_pass_from_script() (in module pytket.passes.script)": [[17, "pytket.passes.script.compilation_pass_from_script"]], "compilation_pass_grammar() (in module pytket.passes.script)": [[17, "pytket.passes.script.compilation_pass_grammar"]], "from_dict() (pytket.passes.basepass static method)": [[17, "pytket.passes.BasePass.from_dict"]], "get_metric() (pytket.passes.repeatwithmetricpass method)": [[17, "pytket.passes.RepeatWithMetricPass.get_metric"]], "get_pass() (pytket.passes.repeatpass method)": [[17, "pytket.passes.RepeatPass.get_pass"]], "get_pass() (pytket.passes.repeatuntilsatisfiedpass method)": [[17, "pytket.passes.RepeatUntilSatisfiedPass.get_pass"]], "get_pass() (pytket.passes.repeatwithmetricpass method)": [[17, "pytket.passes.RepeatWithMetricPass.get_pass"]], "get_predicate() (pytket.passes.repeatuntilsatisfiedpass method)": [[17, "pytket.passes.RepeatUntilSatisfiedPass.get_predicate"]], "get_scores() (pytket.passes.passselector method)": [[17, "pytket.passes.PassSelector.get_scores"]], "get_sequence() (pytket.passes.sequencepass method)": [[17, "pytket.passes.SequencePass.get_sequence"]], "name (pytket.passes.cnotsynthtype property)": [[17, "pytket.passes.CNotSynthType.name"]], "name (pytket.passes.safetymode property)": [[17, "pytket.passes.SafetyMode.name"]], "pytket.passes": [[17, "module-pytket.passes"]], "pytket.passes": [[17, "module-pytket.passes"]], "pytket.passes.auto_rebase": [[17, "module-pytket.passes.auto_rebase"]], "pytket.passes.script": [[17, "module-pytket.passes.script"]], "to_dict() (pytket.passes.basepass method)": [[17, "pytket.passes.BasePass.to_dict"]], "pauli (class in pytket.pauli)": [[18, "pytket.pauli.Pauli"]], "paulistabiliser (class in pytket.pauli)": [[18, "pytket.pauli.PauliStabiliser"]], "qubitpaulistring (class in pytket.pauli)": [[18, "pytket.pauli.QubitPauliString"]], "qubitpaulitensor (class in pytket.pauli)": [[18, "pytket.pauli.QubitPauliTensor"]], "__init__() (pytket.pauli.pauli method)": [[18, "pytket.pauli.Pauli.__init__"]], "__init__() (pytket.pauli.paulistabiliser method)": [[18, "pytket.pauli.PauliStabiliser.__init__"]], "__init__() (pytket.pauli.qubitpaulistring method)": [[18, "pytket.pauli.QubitPauliString.__init__"]], "__init__() (pytket.pauli.qubitpaulitensor method)": [[18, "pytket.pauli.QubitPauliTensor.__init__"]], "coeff (pytket.pauli.paulistabiliser property)": [[18, "pytket.pauli.PauliStabiliser.coeff"]], "coeff (pytket.pauli.qubitpaulitensor property)": [[18, "pytket.pauli.QubitPauliTensor.coeff"]], "commutes_with() (pytket.pauli.qubitpaulistring method)": [[18, "pytket.pauli.QubitPauliString.commutes_with"]], "commutes_with() (pytket.pauli.qubitpaulitensor method)": [[18, "pytket.pauli.QubitPauliTensor.commutes_with"]], "compress() (pytket.pauli.qubitpaulistring method)": [[18, "pytket.pauli.QubitPauliString.compress"]], "compress() (pytket.pauli.qubitpaulitensor method)": [[18, "pytket.pauli.QubitPauliTensor.compress"]], "dot_state() (pytket.pauli.qubitpaulistring method)": [[18, "pytket.pauli.QubitPauliString.dot_state"]], "dot_state() (pytket.pauli.qubitpaulitensor method)": [[18, "pytket.pauli.QubitPauliTensor.dot_state"]], "from_list() (pytket.pauli.qubitpaulistring static method)": [[18, "pytket.pauli.QubitPauliString.from_list"]], "map (pytket.pauli.qubitpaulistring property)": [[18, "pytket.pauli.QubitPauliString.map"]], "name (pytket.pauli.pauli property)": [[18, "pytket.pauli.Pauli.name"]], "pauli_string_mult() (in module pytket.pauli)": [[18, "pytket.pauli.pauli_string_mult"]], "pytket.pauli": [[18, "module-pytket.pauli"]], "state_expectation() (pytket.pauli.qubitpaulistring method)": [[18, "pytket.pauli.QubitPauliString.state_expectation"]], "state_expectation() (pytket.pauli.qubitpaulitensor method)": [[18, "pytket.pauli.QubitPauliTensor.state_expectation"]], "string (pytket.pauli.paulistabiliser property)": [[18, "pytket.pauli.PauliStabiliser.string"]], "string (pytket.pauli.qubitpaulitensor property)": [[18, "pytket.pauli.QubitPauliTensor.string"]], "to_list() (pytket.pauli.qubitpaulistring method)": [[18, "pytket.pauli.QubitPauliString.to_list"]], "to_sparse_matrix() (pytket.pauli.qubitpaulistring method)": [[18, "pytket.pauli.QubitPauliString.to_sparse_matrix"]], "to_sparse_matrix() (pytket.pauli.qubitpaulitensor method)": [[18, "pytket.pauli.QubitPauliTensor.to_sparse_matrix"]], "graphplacement (class in pytket.placement)": [[19, "pytket.placement.GraphPlacement"]], "lineplacement (class in pytket.placement)": [[19, "pytket.placement.LinePlacement"]], "noiseawareplacement (class in pytket.placement)": [[19, "pytket.placement.NoiseAwarePlacement"]], "placement (class in pytket.placement)": [[19, "pytket.placement.Placement"]], "__init__() (pytket.placement.graphplacement method)": [[19, "pytket.placement.GraphPlacement.__init__"]], "__init__() (pytket.placement.lineplacement method)": [[19, "pytket.placement.LinePlacement.__init__"]], "__init__() (pytket.placement.noiseawareplacement method)": [[19, "pytket.placement.NoiseAwarePlacement.__init__"]], "__init__() (pytket.placement.placement method)": [[19, "pytket.placement.Placement.__init__"]], "from_dict() (pytket.placement.placement static method)": [[19, "pytket.placement.Placement.from_dict"]], "get_placement_map() (pytket.placement.placement method)": [[19, "pytket.placement.Placement.get_placement_map"]], "get_placement_maps() (pytket.placement.placement method)": [[19, "pytket.placement.Placement.get_placement_maps"]], "modify_config() (pytket.placement.graphplacement method)": [[19, "pytket.placement.GraphPlacement.modify_config"]], "modify_config() (pytket.placement.noiseawareplacement method)": [[19, "pytket.placement.NoiseAwarePlacement.modify_config"]], "place() (pytket.placement.placement method)": [[19, "pytket.placement.Placement.place"]], "place_fully_connected() (in module pytket.placement)": [[19, "pytket.placement.place_fully_connected"]], "place_with_map() (in module pytket.placement)": [[19, "pytket.placement.place_with_map"]], "place_with_map() (pytket.placement.placement static method)": [[19, "pytket.placement.Placement.place_with_map"]], "pytket.placement": [[19, "module-pytket.placement"]], "to_dict() (pytket.placement.placement method)": [[19, "pytket.placement.Placement.to_dict"]], "cliffordcircuitpredicate (class in pytket.predicates)": [[20, "pytket.predicates.CliffordCircuitPredicate"]], "commutablemeasurespredicate (class in pytket.predicates)": [[20, "pytket.predicates.CommutableMeasuresPredicate"]], "compilationunit (class in pytket.predicates)": [[20, "pytket.predicates.CompilationUnit"]], "connectivitypredicate (class in pytket.predicates)": [[20, "pytket.predicates.ConnectivityPredicate"]], "defaultregisterpredicate (class in pytket.predicates)": [[20, "pytket.predicates.DefaultRegisterPredicate"]], "directednesspredicate (class in pytket.predicates)": [[20, "pytket.predicates.DirectednessPredicate"]], "gatesetpredicate (class in pytket.predicates)": [[20, "pytket.predicates.GateSetPredicate"]], "maxnclregpredicate (class in pytket.predicates)": [[20, "pytket.predicates.MaxNClRegPredicate"]], "maxnqubitspredicate (class in pytket.predicates)": [[20, "pytket.predicates.MaxNQubitsPredicate"]], "maxtwoqubitgatespredicate (class in pytket.predicates)": [[20, "pytket.predicates.MaxTwoQubitGatesPredicate"]], "nobarrierspredicate (class in pytket.predicates)": [[20, "pytket.predicates.NoBarriersPredicate"]], "noclassicalbitspredicate (class in pytket.predicates)": [[20, "pytket.predicates.NoClassicalBitsPredicate"]], "noclassicalcontrolpredicate (class in pytket.predicates)": [[20, "pytket.predicates.NoClassicalControlPredicate"]], "nofastfeedforwardpredicate (class in pytket.predicates)": [[20, "pytket.predicates.NoFastFeedforwardPredicate"]], "nomidmeasurepredicate (class in pytket.predicates)": [[20, "pytket.predicates.NoMidMeasurePredicate"]], "nosymbolspredicate (class in pytket.predicates)": [[20, "pytket.predicates.NoSymbolsPredicate"]], "nowireswapspredicate (class in pytket.predicates)": [[20, "pytket.predicates.NoWireSwapsPredicate"]], "normalisedtk2predicate (class in pytket.predicates)": [[20, "pytket.predicates.NormalisedTK2Predicate"]], "placementpredicate (class in pytket.predicates)": [[20, "pytket.predicates.PlacementPredicate"]], "predicate (class in pytket.predicates)": [[20, "pytket.predicates.Predicate"]], "userdefinedpredicate (class in pytket.predicates)": [[20, "pytket.predicates.UserDefinedPredicate"]], "__init__() (pytket.predicates.cliffordcircuitpredicate method)": [[20, "pytket.predicates.CliffordCircuitPredicate.__init__"]], "__init__() (pytket.predicates.commutablemeasurespredicate method)": [[20, "pytket.predicates.CommutableMeasuresPredicate.__init__"]], "__init__() (pytket.predicates.compilationunit method)": [[20, "pytket.predicates.CompilationUnit.__init__"]], "__init__() (pytket.predicates.connectivitypredicate method)": [[20, "pytket.predicates.ConnectivityPredicate.__init__"]], "__init__() (pytket.predicates.defaultregisterpredicate method)": [[20, "pytket.predicates.DefaultRegisterPredicate.__init__"]], "__init__() (pytket.predicates.directednesspredicate method)": [[20, "pytket.predicates.DirectednessPredicate.__init__"]], "__init__() (pytket.predicates.gatesetpredicate method)": [[20, "pytket.predicates.GateSetPredicate.__init__"]], "__init__() (pytket.predicates.maxnclregpredicate method)": [[20, "pytket.predicates.MaxNClRegPredicate.__init__"]], "__init__() (pytket.predicates.maxnqubitspredicate method)": [[20, "pytket.predicates.MaxNQubitsPredicate.__init__"]], "__init__() (pytket.predicates.maxtwoqubitgatespredicate method)": [[20, "pytket.predicates.MaxTwoQubitGatesPredicate.__init__"]], "__init__() (pytket.predicates.nobarrierspredicate method)": [[20, "pytket.predicates.NoBarriersPredicate.__init__"]], "__init__() (pytket.predicates.noclassicalbitspredicate method)": [[20, "pytket.predicates.NoClassicalBitsPredicate.__init__"]], "__init__() (pytket.predicates.noclassicalcontrolpredicate method)": [[20, "pytket.predicates.NoClassicalControlPredicate.__init__"]], "__init__() (pytket.predicates.nofastfeedforwardpredicate method)": [[20, "pytket.predicates.NoFastFeedforwardPredicate.__init__"]], "__init__() (pytket.predicates.nomidmeasurepredicate method)": [[20, "pytket.predicates.NoMidMeasurePredicate.__init__"]], "__init__() (pytket.predicates.nosymbolspredicate method)": [[20, "pytket.predicates.NoSymbolsPredicate.__init__"]], "__init__() (pytket.predicates.nowireswapspredicate method)": [[20, "pytket.predicates.NoWireSwapsPredicate.__init__"]], "__init__() (pytket.predicates.normalisedtk2predicate method)": [[20, "pytket.predicates.NormalisedTK2Predicate.__init__"]], "__init__() (pytket.predicates.placementpredicate method)": [[20, "pytket.predicates.PlacementPredicate.__init__"]], "__init__() (pytket.predicates.predicate method)": [[20, "pytket.predicates.Predicate.__init__"]], "__init__() (pytket.predicates.userdefinedpredicate method)": [[20, "pytket.predicates.UserDefinedPredicate.__init__"]], "check_all_predicates() (pytket.predicates.compilationunit method)": [[20, "pytket.predicates.CompilationUnit.check_all_predicates"]], "circuit (pytket.predicates.compilationunit property)": [[20, "pytket.predicates.CompilationUnit.circuit"]], "final_map (pytket.predicates.compilationunit property)": [[20, "pytket.predicates.CompilationUnit.final_map"]], "from_dict() (pytket.predicates.predicate static method)": [[20, "pytket.predicates.Predicate.from_dict"]], "implies() (pytket.predicates.predicate method)": [[20, "pytket.predicates.Predicate.implies"]], "initial_map (pytket.predicates.compilationunit property)": [[20, "pytket.predicates.CompilationUnit.initial_map"]], "pytket.predicates": [[20, "module-pytket.predicates"]], "to_dict() (pytket.predicates.predicate method)": [[20, "pytket.predicates.Predicate.to_dict"]], "verify() (pytket.predicates.predicate method)": [[20, "pytket.predicates.Predicate.verify"]], "circuit_from_qasm() (in module pytket.qasm)": [[21, "pytket.qasm.circuit_from_qasm"]], "circuit_from_qasm_io() (in module pytket.qasm)": [[21, "pytket.qasm.circuit_from_qasm_io"]], "circuit_from_qasm_str() (in module pytket.qasm)": [[21, "pytket.qasm.circuit_from_qasm_str"]], "circuit_from_qasm_wasm() (in module pytket.qasm)": [[21, "pytket.qasm.circuit_from_qasm_wasm"]], "circuit_to_qasm() (in module pytket.qasm)": [[21, "pytket.qasm.circuit_to_qasm"]], "circuit_to_qasm_io() (in module pytket.qasm)": [[21, "pytket.qasm.circuit_to_qasm_io"]], "circuit_to_qasm_str() (in module pytket.qasm)": [[21, "pytket.qasm.circuit_to_qasm_str"]], "pytket.qasm": [[21, "module-pytket.qasm"]], "circuit_from_quipper() (in module pytket.quipper)": [[22, "pytket.quipper.circuit_from_quipper"]], "pytket.quipper": [[22, "module-pytket.quipper"]], "unitarytableau (class in pytket.tableau)": [[23, "pytket.tableau.UnitaryTableau"]], "unitarytableaubox (class in pytket.tableau)": [[23, "pytket.tableau.UnitaryTableauBox"]], "__init__() (pytket.tableau.unitarytableau method)": [[23, "pytket.tableau.UnitaryTableau.__init__"]], "__init__() (pytket.tableau.unitarytableaubox method)": [[23, "pytket.tableau.UnitaryTableauBox.__init__"]], "apply_gate_at_end() (pytket.tableau.unitarytableau method)": [[23, "pytket.tableau.UnitaryTableau.apply_gate_at_end"]], "apply_gate_at_front() (pytket.tableau.unitarytableau method)": [[23, "pytket.tableau.UnitaryTableau.apply_gate_at_front"]], "get_circuit() (pytket.tableau.unitarytableaubox method)": [[23, "pytket.tableau.UnitaryTableauBox.get_circuit"]], "get_row_product() (pytket.tableau.unitarytableau method)": [[23, "pytket.tableau.UnitaryTableau.get_row_product"]], "get_tableau() (pytket.tableau.unitarytableaubox method)": [[23, "pytket.tableau.UnitaryTableauBox.get_tableau"]], "get_xrow() (pytket.tableau.unitarytableau method)": [[23, "pytket.tableau.UnitaryTableau.get_xrow"]], "get_zrow() (pytket.tableau.unitarytableau method)": [[23, "pytket.tableau.UnitaryTableau.get_zrow"]], "pytket.tableau": [[23, "module-pytket.tableau"]], "to_circuit() (pytket.tableau.unitarytableau method)": [[23, "pytket.tableau.UnitaryTableau.to_circuit"]], "framerandomisation (class in pytket.tailoring)": [[24, "pytket.tailoring.FrameRandomisation"]], "pauliframerandomisation (class in pytket.tailoring)": [[24, "pytket.tailoring.PauliFrameRandomisation"]], "universalframerandomisation (class in pytket.tailoring)": [[24, "pytket.tailoring.UniversalFrameRandomisation"]], "__init__() (pytket.tailoring.framerandomisation method)": [[24, "pytket.tailoring.FrameRandomisation.__init__"]], "__init__() (pytket.tailoring.pauliframerandomisation method)": [[24, "pytket.tailoring.PauliFrameRandomisation.__init__"]], "__init__() (pytket.tailoring.universalframerandomisation method)": [[24, "pytket.tailoring.UniversalFrameRandomisation.__init__"]], "apply_clifford_basis_change() (in module pytket.tailoring)": [[24, "pytket.tailoring.apply_clifford_basis_change"]], "apply_clifford_basis_change_tensor() (in module pytket.tailoring)": [[24, "pytket.tailoring.apply_clifford_basis_change_tensor"]], "get_all_circuits() (pytket.tailoring.framerandomisation method)": [[24, "pytket.tailoring.FrameRandomisation.get_all_circuits"]], "get_all_circuits() (pytket.tailoring.pauliframerandomisation method)": [[24, "pytket.tailoring.PauliFrameRandomisation.get_all_circuits"]], "get_all_circuits() (pytket.tailoring.universalframerandomisation method)": [[24, "pytket.tailoring.UniversalFrameRandomisation.get_all_circuits"]], "pytket.tailoring": [[24, "module-pytket.tailoring"]], "sample_circuits() (pytket.tailoring.framerandomisation method)": [[24, "pytket.tailoring.FrameRandomisation.sample_circuits"]], "sample_circuits() (pytket.tailoring.pauliframerandomisation method)": [[24, "pytket.tailoring.PauliFrameRandomisation.sample_circuits"]], "sample_circuits() (pytket.tailoring.universalframerandomisation method)": [[24, "pytket.tailoring.UniversalFrameRandomisation.sample_circuits"]], "cnxpairwisedecomposition() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.CnXPairwiseDecomposition"]], "commutesqthroughswap() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.CommuteSQThroughSWAP"]], "commutethroughmultis() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.CommuteThroughMultis"]], "decomposebridge() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeBRIDGE"]], "decomposeboxes() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeBoxes"]], "decomposeccx() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeCCX"]], "decomposecxdirected() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeCXDirected"]], "decomposecontrolledrys() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeControlledRys"]], "decomposenphasedx() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeNPhasedX"]], "decomposeswap() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeSWAP"]], "decomposeswaptocx() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeSWAPtoCX"]], "decomposetk2() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.DecomposeTK2"]], "globalisephasedx() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.GlobalisePhasedX"]], "kakdecomposition() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.KAKDecomposition"]], "normalisetk2() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.NormaliseTK2"]], "optimisecliffords() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.OptimiseCliffords"]], "optimisepauligadgets() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.OptimisePauliGadgets"]], "optimisephasegadgets() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.OptimisePhaseGadgets"]], "optimisepostrouting() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.OptimisePostRouting"]], "optimisestandard() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.OptimiseStandard"]], "paulisynthstrat (class in pytket.transform)": [[25, "pytket.transform.PauliSynthStrat"]], "rebasetocirq() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.RebaseToCirq"]], "rebasetocliffordsingles() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.RebaseToCliffordSingles"]], "rebasetoprojectq() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.RebaseToProjectQ"]], "rebasetopyzx() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.RebaseToPyZX"]], "rebasetoquil() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.RebaseToQuil"]], "rebasetorzrx() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.RebaseToRzRx"]], "rebasetotket() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.RebaseToTket"]], "reducesingles() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.ReduceSingles"]], "removeredundancies() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.RemoveRedundancies"]], "synthesisepauligraph() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.SynthesisePauliGraph"]], "threequbitsquash() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.ThreeQubitSquash"]], "transform (class in pytket.transform)": [[25, "pytket.transform.Transform"]], "uccsynthesis() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.UCCSynthesis"]], "zzphasetorz() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.ZZPhaseToRz"]], "__init__() (pytket.transform.paulisynthstrat method)": [[25, "pytket.transform.PauliSynthStrat.__init__"]], "__init__() (pytket.transform.transform method)": [[25, "pytket.transform.Transform.__init__"]], "apply() (pytket.transform.transform method)": [[25, "pytket.transform.Transform.apply"]], "name (pytket.transform.paulisynthstrat property)": [[25, "pytket.transform.PauliSynthStrat.name"]], "pytket.transform": [[25, "module-pytket.transform"]], "repeat() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.repeat"]], "round_angles() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.round_angles"]], "separate_classical() (in module pytket.transform)": [[25, "pytket.transform.separate_classical"]], "sequence() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.sequence"]], "while_repeat() (pytket.transform.transform static method)": [[25, "pytket.transform.Transform.while_repeat"]], "bit (class in pytket.unit_id)": [[26, "pytket.unit_id.Bit"]], "bitregister (class in pytket.unit_id)": [[26, "pytket.unit_id.BitRegister"]], "node (class in pytket.unit_id)": [[26, "pytket.unit_id.Node"]], "qubit (class in pytket.unit_id)": [[26, "pytket.unit_id.Qubit"]], "qubitregister (class in pytket.unit_id)": [[26, "pytket.unit_id.QubitRegister"]], "unitid (class in pytket.unit_id)": [[26, "pytket.unit_id.UnitID"]], "unittype (class in pytket.unit_id)": [[26, "pytket.unit_id.UnitType"]], "__init__() (pytket.unit_id.bit method)": [[26, "pytket.unit_id.Bit.__init__"]], "__init__() (pytket.unit_id.bitregister method)": [[26, "pytket.unit_id.BitRegister.__init__"]], "__init__() (pytket.unit_id.node method)": [[26, "pytket.unit_id.Node.__init__"]], "__init__() (pytket.unit_id.qubit method)": [[26, "pytket.unit_id.Qubit.__init__"]], "__init__() (pytket.unit_id.qubitregister method)": [[26, "pytket.unit_id.QubitRegister.__init__"]], "__init__() (pytket.unit_id.unitid method)": [[26, "pytket.unit_id.UnitID.__init__"]], "__init__() (pytket.unit_id.unittype method)": [[26, "pytket.unit_id.UnitType.__init__"]], "from_list() (pytket.unit_id.bit static method)": [[26, "pytket.unit_id.Bit.from_list"]], "from_list() (pytket.unit_id.node static method)": [[26, "pytket.unit_id.Node.from_list"]], "from_list() (pytket.unit_id.qubit static method)": [[26, "pytket.unit_id.Qubit.from_list"]], "index (pytket.unit_id.unitid property)": [[26, "pytket.unit_id.UnitID.index"]], "name (pytket.unit_id.bitregister property)": [[26, "pytket.unit_id.BitRegister.name"]], "name (pytket.unit_id.qubitregister property)": [[26, "pytket.unit_id.QubitRegister.name"]], "name (pytket.unit_id.unittype property)": [[26, "pytket.unit_id.UnitType.name"]], "pytket.unit_id": [[26, "module-pytket.unit_id"]], "reg_name (pytket.unit_id.unitid property)": [[26, "pytket.unit_id.UnitID.reg_name"]], "size (pytket.unit_id.bitregister property)": [[26, "pytket.unit_id.BitRegister.size"]], "size (pytket.unit_id.qubitregister property)": [[26, "pytket.unit_id.QubitRegister.size"]], "to_list() (pytket.unit_id.bit method)": [[26, "pytket.unit_id.Bit.to_list"]], "to_list() (pytket.unit_id.bitregister method)": [[26, "pytket.unit_id.BitRegister.to_list"]], "to_list() (pytket.unit_id.node method)": [[26, "pytket.unit_id.Node.to_list"]], "to_list() (pytket.unit_id.qubit method)": [[26, "pytket.unit_id.Qubit.to_list"]], "to_list() (pytket.unit_id.qubitregister method)": [[26, "pytket.unit_id.QubitRegister.to_list"]], "type (pytket.unit_id.unitid property)": [[26, "pytket.unit_id.UnitID.type"]], "empiricaldistribution (class in pytket.utils.distribution)": [[27, "pytket.utils.distribution.EmpiricalDistribution"]], "graph (class in pytket.utils)": [[27, "pytket.utils.Graph"]], "outcomearray (class in pytket.utils)": [[27, "pytket.utils.OutcomeArray"]], "probabilitydistribution (class in pytket.utils.distribution)": [[27, "pytket.utils.distribution.ProbabilityDistribution"]], "qubitpaulioperator (class in pytket.utils)": [[27, "pytket.utils.QubitPauliOperator"]], "spamcorrecter (class in pytket.utils.spam)": [[27, "pytket.utils.spam.SpamCorrecter"]], "symgateregister (class in pytket.utils.symbolic)": [[27, "pytket.utils.symbolic.SymGateRegister"]], "__add__() (pytket.utils.distribution.empiricaldistribution method)": [[27, "pytket.utils.distribution.EmpiricalDistribution.__add__"]], "__eq__() (pytket.utils.distribution.empiricaldistribution method)": [[27, "pytket.utils.distribution.EmpiricalDistribution.__eq__"]], "__getitem__() (pytket.utils.distribution.empiricaldistribution method)": [[27, "pytket.utils.distribution.EmpiricalDistribution.__getitem__"]], "__getitem__() (pytket.utils.distribution.probabilitydistribution method)": [[27, "pytket.utils.distribution.ProbabilityDistribution.__getitem__"]], "__init__() (pytket.utils.graph method)": [[27, "pytket.utils.Graph.__init__"]], "__init__() (pytket.utils.qubitpaulioperator method)": [[27, "pytket.utils.QubitPauliOperator.__init__"]], "__init__() (pytket.utils.spam.spamcorrecter method)": [[27, "pytket.utils.spam.SpamCorrecter.__init__"]], "all_qubits (pytket.utils.qubitpaulioperator property)": [[27, "pytket.utils.QubitPauliOperator.all_qubits"]], "append_pauli_measurement() (in module pytket.utils)": [[27, "pytket.utils.append_pauli_measurement"]], "as_counter() (pytket.utils.distribution.empiricaldistribution method)": [[27, "pytket.utils.distribution.EmpiricalDistribution.as_counter"]], "as_dict() (pytket.utils.distribution.probabilitydistribution method)": [[27, "pytket.utils.distribution.ProbabilityDistribution.as_dict"]], "as_nx() (pytket.utils.graph method)": [[27, "pytket.utils.Graph.as_nx"]], "as_rv_discrete() (pytket.utils.distribution.probabilitydistribution method)": [[27, "pytket.utils.distribution.ProbabilityDistribution.as_rv_discrete"]], "calculate_matrices() (pytket.utils.spam.spamcorrecter method)": [[27, "pytket.utils.spam.SpamCorrecter.calculate_matrices"]], "calibration_circuits() (pytket.utils.spam.spamcorrecter method)": [[27, "pytket.utils.spam.SpamCorrecter.calibration_circuits"]], "choose_indices() (pytket.utils.outcomearray method)": [[27, "pytket.utils.OutcomeArray.choose_indices"]], "circuit_apply_symbolic_qubit() (in module pytket.utils.symbolic)": [[27, "pytket.utils.symbolic.circuit_apply_symbolic_qubit"]], "circuit_apply_symbolic_statevector() (in module pytket.utils.symbolic)": [[27, "pytket.utils.symbolic.circuit_apply_symbolic_statevector"]], "circuit_to_symbolic_gates() (in module pytket.utils.symbolic)": [[27, "pytket.utils.symbolic.circuit_to_symbolic_gates"]], "circuit_to_symbolic_unitary() (in module pytket.utils.symbolic)": [[27, "pytket.utils.symbolic.circuit_to_symbolic_unitary"]], "compare_statevectors() (in module pytket.utils)": [[27, "pytket.utils.compare_statevectors"]], "compare_unitaries() (in module pytket.utils)": [[27, "pytket.utils.compare_unitaries"]], "compress() (pytket.utils.qubitpaulioperator method)": [[27, "pytket.utils.QubitPauliOperator.compress"]], "compress_counts() (in module pytket.utils.spam)": [[27, "pytket.utils.spam.compress_counts"]], "condition() (pytket.utils.distribution.empiricaldistribution method)": [[27, "pytket.utils.distribution.EmpiricalDistribution.condition"]], "condition() (pytket.utils.distribution.probabilitydistribution method)": [[27, "pytket.utils.distribution.ProbabilityDistribution.condition"]], "convex_combination() (in module pytket.utils.distribution)": [[27, "pytket.utils.distribution.convex_combination"]], "correct_counts() (pytket.utils.spam.spamcorrecter method)": [[27, "pytket.utils.spam.SpamCorrecter.correct_counts"]], "counts() (pytket.utils.outcomearray method)": [[27, "pytket.utils.OutcomeArray.counts"]], "counts_from_shot_table() (in module pytket.utils)": [[27, "pytket.utils.counts_from_shot_table"]], "dot_state() (pytket.utils.qubitpaulioperator method)": [[27, "pytket.utils.QubitPauliOperator.dot_state"]], "expectation() (pytket.utils.distribution.probabilitydistribution method)": [[27, "pytket.utils.distribution.ProbabilityDistribution.expectation"]], "expectation_from_counts() (in module pytket.utils)": [[27, "pytket.utils.expectation_from_counts"]], "expectation_from_shots() (in module pytket.utils)": [[27, "pytket.utils.expectation_from_shots"]], "from_dict() (pytket.utils.outcomearray class method)": [[27, "pytket.utils.OutcomeArray.from_dict"]], "from_dict() (pytket.utils.spam.spamcorrecter class method)": [[27, "pytket.utils.spam.SpamCorrecter.from_dict"]], "from_empirical_distribution() (pytket.utils.distribution.probabilitydistribution class method)": [[27, "pytket.utils.distribution.ProbabilityDistribution.from_empirical_distribution"]], "from_ints() (pytket.utils.outcomearray class method)": [[27, "pytket.utils.OutcomeArray.from_ints"]], "from_list() (pytket.utils.qubitpaulioperator class method)": [[27, "pytket.utils.QubitPauliOperator.from_list"]], "from_readouts() (pytket.utils.outcomearray class method)": [[27, "pytket.utils.OutcomeArray.from_readouts"]], "gate_counts() (in module pytket.utils.stats)": [[27, "pytket.utils.stats.gate_counts"]], "gen_term_sequence_circuit() (in module pytket.utils)": [[27, "pytket.utils.gen_term_sequence_circuit"]], "get_dag() (pytket.utils.graph method)": [[27, "pytket.utils.Graph.get_DAG"]], "get_func() (pytket.utils.symbolic.symgateregister class method)": [[27, "pytket.utils.symbolic.SymGateRegister.get_func"]], "get_operator_expectation_value() (in module pytket.utils)": [[27, "pytket.utils.get_operator_expectation_value"]], "get_parallel_measure() (pytket.utils.spam.spamcorrecter method)": [[27, "pytket.utils.spam.SpamCorrecter.get_parallel_measure"]], "get_pauli_expectation_value() (in module pytket.utils)": [[27, "pytket.utils.get_pauli_expectation_value"]], "get_qubit_graph() (pytket.utils.graph method)": [[27, "pytket.utils.Graph.get_qubit_graph"]], "is_registered() (pytket.utils.symbolic.symgateregister class method)": [[27, "pytket.utils.symbolic.SymGateRegister.is_registered"]], "map() (pytket.utils.distribution.empiricaldistribution method)": [[27, "pytket.utils.distribution.EmpiricalDistribution.map"]], "map() (pytket.utils.distribution.probabilitydistribution method)": [[27, "pytket.utils.distribution.ProbabilityDistribution.map"]], "n_outcomes (pytket.utils.outcomearray property)": [[27, "pytket.utils.OutcomeArray.n_outcomes"]], "permute_basis_indexing() (in module pytket.utils)": [[27, "pytket.utils.permute_basis_indexing"]], "permute_qubits_in_statevector() (in module pytket.utils)": [[27, "pytket.utils.permute_qubits_in_statevector"]], "permute_rows_cols_in_unitary() (in module pytket.utils)": [[27, "pytket.utils.permute_rows_cols_in_unitary"]], "prepare_circuit() (in module pytket.utils)": [[27, "pytket.utils.prepare_circuit"]], "probs_from_counts() (in module pytket.utils)": [[27, "pytket.utils.probs_from_counts"]], "probs_from_state() (in module pytket.utils)": [[27, "pytket.utils.probs_from_state"]], "pytket.utils": [[27, "module-pytket.utils"]], "pytket.utils.distribution": [[27, "module-pytket.utils.distribution"]], "pytket.utils.spam": [[27, "module-pytket.utils.spam"]], "pytket.utils.stats": [[27, "module-pytket.utils.stats"]], "pytket.utils.symbolic": [[27, "module-pytket.utils.symbolic"]], "readout_counts() (in module pytket.utils)": [[27, "pytket.utils.readout_counts"]], "register_func() (pytket.utils.symbolic.symgateregister class method)": [[27, "pytket.utils.symbolic.SymGateRegister.register_func"]], "sample_mean() (pytket.utils.distribution.empiricaldistribution method)": [[27, "pytket.utils.distribution.EmpiricalDistribution.sample_mean"]], "sample_variance() (pytket.utils.distribution.empiricaldistribution method)": [[27, "pytket.utils.distribution.EmpiricalDistribution.sample_variance"]], "save_dag() (pytket.utils.graph method)": [[27, "pytket.utils.Graph.save_DAG"]], "save_qubit_graph() (pytket.utils.graph method)": [[27, "pytket.utils.Graph.save_qubit_graph"]], "state_expectation() (pytket.utils.qubitpaulioperator method)": [[27, "pytket.utils.QubitPauliOperator.state_expectation"]], "subs() (pytket.utils.qubitpaulioperator method)": [[27, "pytket.utils.QubitPauliOperator.subs"]], "support (pytket.utils.distribution.empiricaldistribution property)": [[27, "pytket.utils.distribution.EmpiricalDistribution.support"]], "support (pytket.utils.distribution.probabilitydistribution property)": [[27, "pytket.utils.distribution.ProbabilityDistribution.support"]], "to_dict() (pytket.utils.outcomearray method)": [[27, "pytket.utils.OutcomeArray.to_dict"]], "to_dict() (pytket.utils.spam.spamcorrecter method)": [[27, "pytket.utils.spam.SpamCorrecter.to_dict"]], "to_intlist() (pytket.utils.outcomearray method)": [[27, "pytket.utils.OutcomeArray.to_intlist"]], "to_list() (pytket.utils.qubitpaulioperator method)": [[27, "pytket.utils.QubitPauliOperator.to_list"]], "to_readout() (pytket.utils.outcomearray method)": [[27, "pytket.utils.OutcomeArray.to_readout"]], "to_readouts() (pytket.utils.outcomearray method)": [[27, "pytket.utils.OutcomeArray.to_readouts"]], "to_sparse_matrix() (pytket.utils.qubitpaulioperator method)": [[27, "pytket.utils.QubitPauliOperator.to_sparse_matrix"]], "total (pytket.utils.distribution.empiricaldistribution property)": [[27, "pytket.utils.distribution.EmpiricalDistribution.total"]], "variance() (pytket.utils.distribution.probabilitydistribution method)": [[27, "pytket.utils.distribution.ProbabilityDistribution.variance"]], "view_dag() (pytket.utils.graph method)": [[27, "pytket.utils.Graph.view_DAG"]], "view_qubit_graph() (pytket.utils.graph method)": [[27, "pytket.utils.Graph.view_qubit_graph"]], "width (pytket.utils.outcomearray property)": [[27, "pytket.utils.OutcomeArray.width"]], "wasmfilehandler (class in pytket.wasm)": [[28, "pytket.wasm.WasmFileHandler"]], "__init__() (pytket.wasm.wasmfilehandler method)": [[28, "pytket.wasm.WasmFileHandler.__init__"]], "__repr__() (pytket.wasm.wasmfilehandler method)": [[28, "pytket.wasm.WasmFileHandler.__repr__"]], "__str__() (pytket.wasm.wasmfilehandler method)": [[28, "pytket.wasm.WasmFileHandler.__str__"]], "check_function() (pytket.wasm.wasmfilehandler method)": [[28, "pytket.wasm.WasmFileHandler.check_function"]], "pytket.wasm": [[28, "module-pytket.wasm"]], "cliffordgen (class in pytket.zx)": [[29, "pytket.zx.CliffordGen"]], "directedgen (class in pytket.zx)": [[29, "pytket.zx.DirectedGen"]], "flow (class in pytket.zx)": [[29, "pytket.zx.Flow"]], "phasedgen (class in pytket.zx)": [[29, "pytket.zx.PhasedGen"]], "quantumtype (class in pytket.zx)": [[29, "pytket.zx.QuantumType"]], "rewrite (class in pytket.zx)": [[29, "pytket.zx.Rewrite"]], "zxbox (class in pytket.zx)": [[29, "pytket.zx.ZXBox"]], "zxdiagram (class in pytket.zx)": [[29, "pytket.zx.ZXDiagram"]], "zxgen (class in pytket.zx)": [[29, "pytket.zx.ZXGen"]], "zxtype (class in pytket.zx)": [[29, "pytket.zx.ZXType"]], "zxvert (class in pytket.zx)": [[29, "pytket.zx.ZXVert"]], "zxwire (class in pytket.zx)": [[29, "pytket.zx.ZXWire"]], "zxwiretype (class in pytket.zx)": [[29, "pytket.zx.ZXWireType"]], "__init__() (pytket.zx.cliffordgen method)": [[29, "pytket.zx.CliffordGen.__init__"]], "__init__() (pytket.zx.directedgen method)": [[29, "pytket.zx.DirectedGen.__init__"]], "__init__() (pytket.zx.flow method)": [[29, "pytket.zx.Flow.__init__"]], "__init__() (pytket.zx.phasedgen method)": [[29, "pytket.zx.PhasedGen.__init__"]], "__init__() (pytket.zx.quantumtype method)": [[29, "pytket.zx.QuantumType.__init__"]], "__init__() (pytket.zx.rewrite method)": [[29, "pytket.zx.Rewrite.__init__"]], "__init__() (pytket.zx.zxbox method)": [[29, "pytket.zx.ZXBox.__init__"]], "__init__() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.__init__"]], "__init__() (pytket.zx.zxgen method)": [[29, "pytket.zx.ZXGen.__init__"]], "__init__() (pytket.zx.zxtype method)": [[29, "pytket.zx.ZXType.__init__"]], "__init__() (pytket.zx.zxvert method)": [[29, "pytket.zx.ZXVert.__init__"]], "__init__() (pytket.zx.zxwire method)": [[29, "pytket.zx.ZXWire.__init__"]], "__init__() (pytket.zx.zxwiretype method)": [[29, "pytket.zx.ZXWireType.__init__"]], "add_vertex() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.add_vertex"]], "add_wire() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.add_wire"]], "add_zxbox() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.add_zxbox"]], "adj_wires() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.adj_wires"]], "apply() (pytket.zx.rewrite method)": [[29, "pytket.zx.Rewrite.apply"]], "basic_wires() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.basic_wires"]], "c() (pytket.zx.flow method)": [[29, "pytket.zx.Flow.c"]], "check_validity() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.check_validity"]], "circuit_to_zx() (in module pytket.zx)": [[29, "pytket.zx.circuit_to_zx"]], "cmap (pytket.zx.flow property)": [[29, "pytket.zx.Flow.cmap"]], "count_vertices() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.count_vertices"]], "count_wires() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.count_wires"]], "create() (pytket.zx.zxgen static method)": [[29, "pytket.zx.ZXGen.create"]], "d() (pytket.zx.flow method)": [[29, "pytket.zx.Flow.d"]], "decompose_boxes() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.decompose_boxes"]], "degree() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.degree"]], "diagram (pytket.zx.zxbox property)": [[29, "pytket.zx.ZXBox.diagram"]], "dmap (pytket.zx.flow property)": [[29, "pytket.zx.Flow.dmap"]], "extend_at_boundary_paulis() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.extend_at_boundary_paulis"]], "extend_for_px_outputs() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.extend_for_PX_outputs"]], "focus() (pytket.zx.flow method)": [[29, "pytket.zx.Flow.focus"]], "free_symbols() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.free_symbols"]], "gadgetise_interior_paulis() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.gadgetise_interior_paulis"]], "get_boundary() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.get_boundary"]], "get_name() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.get_name"]], "get_qtype() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.get_qtype"]], "get_vertex_zxgen() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.get_vertex_ZXGen"]], "get_wire_ends() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.get_wire_ends"]], "get_wire_qtype() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.get_wire_qtype"]], "get_wire_type() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.get_wire_type"]], "get_zxtype() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.get_zxtype"]], "identify_causal_flow() (pytket.zx.flow static method)": [[29, "pytket.zx.Flow.identify_causal_flow"]], "identify_focussed_sets() (pytket.zx.flow static method)": [[29, "pytket.zx.Flow.identify_focussed_sets"]], "identify_pauli_flow() (pytket.zx.flow static method)": [[29, "pytket.zx.Flow.identify_pauli_flow"]], "internalise_gadgets() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.internalise_gadgets"]], "io_extension() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.io_extension"]], "is_symbolic() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.is_symbolic"]], "merge_gadgets() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.merge_gadgets"]], "multiply_scalar() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.multiply_scalar"]], "n_ports (pytket.zx.directedgen property)": [[29, "pytket.zx.DirectedGen.n_ports"]], "n_ports (pytket.zx.zxbox property)": [[29, "pytket.zx.ZXBox.n_ports"]], "n_vertices (pytket.zx.zxdiagram property)": [[29, "pytket.zx.ZXDiagram.n_vertices"]], "n_wires (pytket.zx.zxdiagram property)": [[29, "pytket.zx.ZXDiagram.n_wires"]], "name (pytket.zx.quantumtype property)": [[29, "pytket.zx.QuantumType.name"]], "name (pytket.zx.zxtype property)": [[29, "pytket.zx.ZXType.name"]], "name (pytket.zx.zxwiretype property)": [[29, "pytket.zx.ZXWireType.name"]], "neighbours() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.neighbours"]], "odd() (pytket.zx.flow method)": [[29, "pytket.zx.Flow.odd"]], "other_end() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.other_end"]], "parallel_h_removal() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.parallel_h_removal"]], "param (pytket.zx.cliffordgen property)": [[29, "pytket.zx.CliffordGen.param"]], "param (pytket.zx.phasedgen property)": [[29, "pytket.zx.PhasedGen.param"]], "pytket.zx": [[29, "module-pytket.zx"]], "qtype (pytket.zx.zxgen property)": [[29, "pytket.zx.ZXGen.qtype"]], "rebase_to_mbqc() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.rebase_to_mbqc"]], "rebase_to_zx() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.rebase_to_zx"]], "red_to_green() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.red_to_green"]], "reduce_graphlike_form() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.reduce_graphlike_form"]], "remove_interior_cliffords() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.remove_interior_cliffords"]], "remove_interior_paulis() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.remove_interior_paulis"]], "remove_vertex() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.remove_vertex"]], "remove_wire() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.remove_wire"]], "repeat() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.repeat"]], "scalar (pytket.zx.zxdiagram property)": [[29, "pytket.zx.ZXDiagram.scalar"]], "self_loop_removal() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.self_loop_removal"]], "separate_boundaries() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.separate_boundaries"]], "sequence() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.sequence"]], "set_vertex_zxgen() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.set_vertex_ZXGen"]], "set_wire_qtype() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.set_wire_qtype"]], "set_wire_type() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.set_wire_type"]], "signature (pytket.zx.directedgen property)": [[29, "pytket.zx.DirectedGen.signature"]], "signature (pytket.zx.zxbox property)": [[29, "pytket.zx.ZXBox.signature"]], "spider_fusion() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.spider_fusion"]], "symbol_substitution() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.symbol_substitution"]], "to_mbqc_diag() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.to_MBQC_diag"]], "to_circuit() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.to_circuit"]], "to_doubled_diagram() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.to_doubled_diagram"]], "to_graphlike_form() (pytket.zx.rewrite static method)": [[29, "pytket.zx.Rewrite.to_graphlike_form"]], "to_graphviz_str() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.to_graphviz_str"]], "type (pytket.zx.zxgen property)": [[29, "pytket.zx.ZXGen.type"]], "vertices (pytket.zx.zxdiagram property)": [[29, "pytket.zx.ZXDiagram.vertices"]], "wire_at_port() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.wire_at_port"]], "wire_between() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.wire_between"]], "wires (pytket.zx.zxdiagram property)": [[29, "pytket.zx.ZXDiagram.wires"]], "wires_between() (pytket.zx.zxdiagram method)": [[29, "pytket.zx.ZXDiagram.wires_between"]]}})