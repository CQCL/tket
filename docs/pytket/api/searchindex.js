Search.setIndex({"docnames": ["architecture", "backends", "changelog", "circuit", "circuit_class", "classical", "config", "display", "getting_started", "index", "install", "logging", "mapping", "opensource", "optype", "partition", "passes", "pauli", "placement", "predicates", "qasm", "quipper", "tableau", "tailoring", "transform", "utils", "wasm", "zx"], "filenames": ["architecture.rst", "backends.rst", "changelog.rst", "circuit.rst", "circuit_class.rst", "classical.rst", "config.rst", "display.rst", "getting_started.rst", "index.rst", "install.rst", "logging.rst", "mapping.rst", "opensource.rst", "optype.rst", "partition.rst", "passes.rst", "pauli.rst", "placement.rst", "predicates.rst", "qasm.rst", "quipper.rst", "tableau.rst", "tailoring.rst", "transform.rst", "utils.rst", "wasm.rst", "zx.rst"], "titles": ["pytket.architecture", "pytket.backends", "Changelog", "pytket.circuit", "pytket.circuit.Circuit", "pytket.circuit.logic_exp", "pytket.config", "pytket.circuit.display", "Getting Started", "pytket", "Installation Troubleshooting", "pytket.logging", "pytket.mapping", "Open Source Attribution", "pytket.circuit.OpType", "pytket.partition", "pytket.passes", "pytket.pauli", "pytket.placement", "pytket.predicates", "pytket.qasm", "pytket.quipper", "pytket.tableau", "pytket.tailoring", "pytket.transform", "pytket.utils", "pytket.wasm", "pytket.zx"], "terms": {"class": [0, 1, 2, 4, 5, 6, 7, 11, 12, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27], "_tket": [0, 1, 3, 4, 11, 12, 14, 15, 16, 17, 18, 19, 22, 23, 24, 27], "describ": [0, 1, 3, 4, 9, 10, 16, 18, 22, 27], "connect": [0, 1, 2, 4, 7, 9, 16, 18, 19, 24, 25, 27], "qubit": [0, 1, 2, 3, 4, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 27], "gener": [0, 1, 2, 4, 7, 9, 14, 15, 16, 17, 18, 20, 21, 24, 25, 27], "devic": [0, 1, 2, 3, 8, 9, 14, 16, 18, 24, 25], "__init__": [0, 1, 3, 4, 6, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27], "arg": [0, 1, 3, 4, 5, 16, 17, 19, 22, 24, 27], "kwarg": [0, 1, 2, 3, 4, 7, 16, 17, 18, 19, 22, 24, 25, 27], "overload": [0, 3, 4, 16, 17, 19, 22, 24, 27], "function": [0, 2, 3, 4, 5, 7, 9, 12, 14, 16, 17, 19, 22, 24, 25, 26, 27], "self": [0, 3, 4, 12, 15, 16, 17, 18, 19, 22, 23, 24, 27], "list": [0, 1, 2, 3, 4, 5, 7, 9, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 27], "tupl": [0, 1, 3, 4, 5, 12, 17, 18, 23, 24, 25, 27], "int": [0, 1, 3, 4, 5, 7, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27], "none": [0, 1, 3, 4, 5, 6, 7, 11, 12, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27], "The": [0, 1, 2, 3, 4, 6, 8, 9, 10, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 27], "constructor": [0, 2, 3, 12, 18, 19, 23], "an": [0, 1, 2, 3, 4, 7, 8, 9, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 27], "between": [0, 1, 2, 3, 8, 9, 14, 18, 23, 24, 25, 27], "paramet": [0, 1, 2, 3, 4, 6, 7, 8, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "A": [0, 1, 2, 3, 4, 5, 9, 12, 14, 15, 16, 17, 19, 20, 22, 23, 24, 25, 27], "pair": [0, 2, 4, 16, 17, 18, 24, 25, 27], "repres": [0, 1, 4, 6, 9, 14, 17, 18, 21, 22, 24, 25, 27], "indic": [0, 2, 3, 4, 15, 18, 22, 25, 27], "can": [0, 1, 2, 3, 7, 8, 9, 12, 15, 16, 18, 19, 20, 24, 25, 27], "perform": [0, 1, 2, 3, 4, 8, 15, 16, 17, 18, 23, 24, 25, 27], "two": [0, 1, 2, 3, 4, 5, 14, 16, 17, 18, 19, 24, 25, 27], "oper": [0, 1, 2, 3, 4, 5, 9, 12, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 27], "circuit": [0, 1, 2, 8, 9, 12, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "node": [0, 1, 2, 3, 9, 16, 18, 19, 24, 25, 27], "static": [0, 3, 4, 14, 15, 16, 17, 18, 19, 24, 25, 27], "from_dict": [0, 1, 2, 3, 4, 5, 15, 16, 18, 19, 25], "arg0": [0, 3, 4, 11, 14, 15, 16, 17, 18, 19, 22, 23, 24, 27], "json": [0, 1, 2, 3, 4, 5, 14, 15, 16, 17, 18, 19, 25], "construct": [0, 1, 2, 3, 4, 5, 6, 14, 15, 16, 17, 18, 19, 22, 25, 26, 27], "instanc": [0, 1, 2, 3, 4, 6, 7, 14, 15, 16, 17, 18, 19, 23, 25, 27], "from": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27], "serializ": [0, 1, 2, 3, 4, 5, 15, 16, 17, 18, 19, 25], "dict": [0, 1, 3, 4, 5, 6, 7, 12, 15, 16, 17, 18, 19, 23, 24, 25, 27], "represent": [0, 1, 3, 4, 9, 15, 16, 17, 18, 19, 25, 26], "get_adjacent_nod": 0, "set": [0, 1, 2, 3, 4, 5, 7, 9, 11, 14, 15, 16, 19, 20, 21, 23, 24, 25, 27], "given": [0, 1, 2, 3, 4, 6, 7, 12, 14, 16, 18, 19, 21, 22, 23, 24, 25, 26, 27], "return": [0, 1, 2, 3, 4, 5, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27], "adjac": [0, 2, 14, 24, 27], "get_dist": 0, "node_0": 0, "node_1": 0, "distanc": [0, 18], "them": [0, 2, 4, 8, 9, 15, 16, 24, 25, 27], "to_dict": [0, 1, 2, 3, 4, 5, 6, 15, 16, 18, 19, 25], "contain": [0, 1, 2, 3, 4, 7, 12, 14, 16, 18, 19, 20, 25, 26, 27], "link": [0, 9, 10], "valid_oper": [0, 2], "uid": [0, 27], "bool": [0, 1, 3, 4, 5, 7, 12, 15, 16, 17, 18, 19, 22, 24, 25, 26, 27], "execut": [0, 1, 2, 14, 19], "graph": [0, 2, 9, 15, 16, 18, 19, 24, 25, 27], "unitid": [0, 1, 2, 3, 4, 9, 12, 27], "valid": [0, 1, 2, 4, 16, 20, 27], "i": [0, 1, 2, 3, 4, 5, 6, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 22, 24, 25, 26, 27], "being": [0, 2, 3, 4, 5, 10, 12, 17, 18, 23], "check": [0, 1, 2, 3, 4, 9, 12, 15, 16, 25, 26, 27], "properti": [0, 1, 2, 3, 4, 7, 11, 14, 15, 16, 17, 19, 24, 25, 27], "coupl": [0, 1, 2, 9, 10], "map": [0, 1, 2, 3, 4, 5, 9, 15, 16, 17, 18, 19, 23, 24, 25, 27], "all": [0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 14, 15, 16, 18, 19, 20, 21, 23, 24, 25, 27], "object": [0, 1, 2, 3, 4, 6, 7, 12, 15, 17, 18, 19, 20, 25], "fullyconnect": [0, 1, 2, 9, 18], "specialis": [0, 2, 27], "non": [0, 1, 2, 4, 10, 16, 19, 24, 25, 27], "emul": [0, 2], "Not": [0, 14], "compat": [0, 1, 2, 3, 7, 8, 10, 14, 16, 24, 27], "rout": [0, 1, 2, 4, 9, 12, 16, 18, 24], "placement": [0, 2, 9, 16, 19, 24], "method": [0, 1, 2, 4, 6, 9, 12, 15, 16, 18, 20, 24, 25, 27], "n": [0, 2, 3, 4, 14, 15, 16, 17, 19, 22, 24, 25, 27], "label": [0, 2, 12, 14, 16, 18], "str": [0, 1, 3, 4, 5, 6, 7, 16, 20, 21, 25, 26, 27], "fcnode": 0, "fulli": [0, 2], "number": [0, 1, 2, 3, 4, 7, 8, 12, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27], "name": [0, 1, 2, 3, 4, 9, 11, 14, 15, 16, 17, 21, 24, 25, 26, 27], "ringarch": [0, 2, 9], "inherit": [0, 1, 12, 27], "arrang": [0, 16], "ring": 0, "ringnod": 0, "ringarchitectur": 0, "some": [0, 1, 2, 3, 4, 7, 9, 10, 12, 14, 15, 16, 19, 22, 23, 25, 27], "undirect": [0, 19, 27], "param": [0, 3, 4, 16, 26, 27], "squaregrid": [0, 2, 9], "squar": [0, 24], "lattic": 0, "row": [0, 1, 3, 4, 22, 25], "column": [0, 1, 3, 4, 25], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 21, 23, 24, 25, 27], "valu": [0, 1, 2, 3, 4, 5, 6, 9, 14, 15, 16, 17, 24, 25, 26, 27], "increas": [0, 1, 2, 3, 4, 10, 16, 19, 25], "first": [0, 2, 4, 12, 14, 15, 18, 25, 27], "along": [0, 1, 4, 18], "e": [0, 1, 2, 3, 4, 5, 10, 14, 16, 18, 22, 24, 25, 27], "3": [0, 1, 4, 8, 9, 10, 14, 16, 24, 25], "x": [0, 3, 4, 9, 10, 14, 16, 17, 22, 24, 25, 27], "grid": [0, 2, 3], "0": [0, 1, 3, 4, 7, 8, 9, 10, 13, 14, 16, 17, 19, 24, 25, 27], "1": [0, 1, 3, 4, 7, 8, 9, 12, 14, 16, 17, 18, 19, 22, 23, 24, 25, 27], "2": [0, 1, 3, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 19, 24, 25, 27], "4": [0, 1, 3, 4, 7, 10, 14, 16, 24, 25], "5": [0, 1, 4, 5, 7, 19, 25, 27], "6": [0, 1, 10, 25], "7": [0, 1], "8": [0, 1, 3, 20, 25], "n_row": 0, "n_column": 0, "gridnod": 0, "n_layer": 0, "layer": [0, 3, 12], "qind_to_squind": 0, "index": [0, 3, 4, 9, 15, 16, 17, 22, 25], "convert": [0, 1, 2, 7, 9, 16, 20, 21, 25, 27], "singl": [0, 1, 2, 3, 4, 7, 14, 16, 17, 18, 22, 24, 25, 27], "global": [0, 2, 4, 11, 14, 16, 21, 24, 25, 27], "correspond": [0, 1, 2, 3, 4, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 27], "squind_to_qind": 0, "abstract": [1, 2, 4, 6, 8], "associ": [1, 2, 4, 25], "In": [1, 2, 4, 12, 16, 18, 19, 20, 24, 25, 27], "interfac": [1, 2, 8, 9], "quantum": [1, 2, 3, 4, 8, 9, 14, 16, 19, 24, 25, 27], "simul": [1, 2, 9, 22, 25], "differ": [1, 14, 27], "defin": [1, 3, 4, 6, 7, 8, 9, 12, 14, 16, 19, 21, 25, 27], "variou": [1, 2, 25], "extens": [1, 2, 6, 7, 8, 27], "modul": [1, 2, 3, 6, 8, 9, 18, 20, 23, 25], "core": [1, 7, 10], "There": [1, 2, 8, 16, 19, 25, 27], "sever": [1, 2, 7, 9, 16], "exampl": [1, 2, 3, 8, 9, 10, 16, 19, 25], "notebook": [1, 2, 4, 9, 16, 19], "": [1, 2, 3, 4, 8, 9, 14, 15, 16, 17, 18, 23, 24, 25, 27], "If": [1, 4, 7, 9, 10, 16, 18, 19, 24, 25, 27], "you": [1, 4, 7, 8, 9, 10, 14, 25], "interest": [1, 4], "develop": [1, 9, 10, 13], "your": [1, 9, 10, 16, 20, 25, 26], "own": [1, 2, 16, 19, 25], "see": [1, 4, 5, 8, 9, 14, 16, 18, 19, 24, 25], "creat": [1, 2, 3, 4, 9, 16, 18, 25, 27], "tutori": [1, 2, 4, 8, 9, 14, 16, 18], "specif": [1, 2, 3, 8, 9, 16, 25, 27], "quantinuumbackend": 1, "found": [1, 9, 16, 18, 23, 27], "here": [1, 9], "also": [1, 4, 7, 8, 9, 14, 16, 19, 24, 25, 27], "run": [1, 2, 8, 9, 10, 15, 16, 19, 21, 24, 25, 27], "section": [1, 5, 16, 19], "user": [1, 2, 3, 4, 8, 14, 16, 18, 19, 25], "manual": [1, 2, 4, 5, 8, 9, 16, 18, 19], "directli": [1, 2, 7, 8, 9, 27], "thi": [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 14, 15, 16, 18, 19, 20, 23, 24, 25, 27], "structur": [1, 2, 16, 25], "someth": 1, "produc": [1, 2, 4, 16, 24, 25], "output": [1, 2, 3, 4, 5, 7, 14, 16, 19, 22, 23, 25, 27], "least": [1, 16, 17, 24, 27], "one": [1, 2, 3, 4, 5, 7, 9, 14, 16, 19, 24, 25, 27], "shot": [1, 2, 3, 15, 25], "count": [1, 2, 3, 9, 16, 24, 25, 27], "state": [1, 2, 3, 4, 8, 14, 16, 17, 25, 27], "unitari": [1, 2, 3, 4, 9, 14, 22, 23, 24, 25, 27], "classmethod": [1, 5, 6, 25], "available_devic": [1, 2], "ani": [1, 2, 3, 4, 5, 6, 9, 16, 19, 20, 23, 24, 25, 27], "retriev": [1, 2, 4, 9, 15, 25], "avail": [1, 2, 7, 9, 10, 14, 15, 16, 24, 25, 27], "includ": [1, 2, 3, 8, 15, 16, 19, 25, 26, 27], "architectur": [1, 2, 4, 9, 12, 16, 18, 19, 24, 25], "support": [1, 2, 3, 4, 10, 12, 16, 20, 21, 24, 25], "gate": [1, 2, 3, 4, 7, 8, 9, 12, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25], "error": [1, 2, 11, 16, 18, 24, 25, 27], "other": [1, 2, 3, 4, 8, 9, 10, 14, 16, 17, 19, 20, 24, 25, 27], "hardwar": [1, 9], "inform": [1, 2, 3, 9, 11, 12, 14, 16, 25, 27], "type": [1, 2, 3, 4, 5, 16, 19, 21, 22, 24, 25, 26, 27], "cancel": [1, 2, 16, 24], "handl": [1, 2, 3, 9, 20, 27], "job": [1, 9], "rais": [1, 2, 5, 16, 25, 27], "notimplementederror": 1, "doe": [1, 3, 14, 15, 16, 18, 25], "circuit_statu": 1, "circuitstatu": [1, 2], "report": [1, 9, 10], "default_compilation_pass": [1, 2], "optimisation_level": [1, 2], "basepass": [1, 2, 9, 16], "suggest": 1, "compil": [1, 2, 8, 9, 14, 16, 19, 25], "pass": [1, 2, 4, 9, 18, 24, 25], "possibl": [1, 2, 4, 7, 10, 15, 16, 24, 25, 27], "equival": [1, 2, 4, 5, 14, 15, 16, 24], "suitabl": [1, 2, 4, 16, 25], "At": [1, 10], "minimum": [1, 15, 25], "ensur": [1, 2, 27], "us": [1, 2, 3, 4, 5, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19, 24, 25, 27], "interact": [1, 3, 4, 7, 8, 9, 10, 14, 18], "higher": [1, 8], "optimis": [1, 2, 4, 9, 16, 24], "level": [1, 2, 8, 9, 11, 25], "further": [1, 2, 4, 16, 24, 25, 27], "mai": [1, 4, 9, 10, 14, 15, 16, 19, 23, 24, 25, 27], "appli": [1, 2, 3, 4, 9, 14, 16, 18, 22, 24, 25, 27], "which": [1, 2, 3, 4, 8, 9, 14, 15, 16, 18, 19, 21, 24, 25, 27], "implement": [1, 2, 3, 12, 16, 17, 25, 27], "itself": 1, "so": [1, 2, 9, 16, 17, 24, 25, 27], "tailor": [1, 2, 9], "requir": [1, 4, 7, 9, 10, 15, 16, 19, 23, 25, 27], "option": [1, 2, 3, 4, 6, 7, 15, 16, 24, 25, 27], "dure": [1, 2], "solv": [1, 9, 18], "constraint": [1, 2, 18], "without": [1, 4, 17, 25, 27], "addition": 1, "light": 1, "default": [1, 2, 3, 4, 6, 7, 11, 15, 16, 17, 19, 22, 24, 25, 27], "add": [1, 2, 4, 8, 9, 10, 15, 16, 22, 25, 26, 27], "more": [1, 2, 4, 5, 10, 14, 16, 17, 18, 19, 24, 25], "computation": 1, "intens": 1, "should": [1, 2, 4, 20, 24, 25], "give": [1, 2, 3, 9, 23, 24, 25, 27], "best": [1, 16, 18, 24, 25], "result": [1, 2, 3, 4, 8, 9, 10, 15, 16, 24, 25, 27], "guarante": [1, 2, 3, 4, 27], "predic": [1, 2, 3, 4, 5, 9, 14, 16], "empty_cach": 1, "empti": [1, 2, 4, 15, 16, 17, 27], "cach": 1, "get_compiled_circuit": [1, 2, 9], "sequenc": [1, 2, 3, 8, 9, 14, 15, 16, 24, 25, 27], "act": [1, 2, 3, 4, 5, 14, 16, 19, 20, 23, 25, 27], "place": [1, 2, 4, 14, 16, 18, 24, 25, 27], "As": [1, 15, 16], "well": [1, 2, 8, 18], "degre": [1, 14, 15, 27], "control": [1, 2, 3, 4, 8, 9, 14, 16, 19, 21, 24], "tri": [1, 18], "successfulli": 1, "process_circuit": [1, 2, 9], "rebas": [1, 2, 16, 24, 27], "match": [1, 2, 4, 5, 17, 18, 22, 24, 25, 27], "howev": [1, 16, 20], "alwai": [1, 16, 19, 24], "classic": [1, 2, 3, 4, 5, 7, 9, 14, 16, 19, 21, 24, 25, 27], "valid_circuit": 1, "whether": [1, 2, 3, 4, 7, 12, 15, 16, 24, 25], "meet": 1, "after": [1, 2, 16, 18, 22, 24, 25], "befor": [1, 2, 7, 15, 16, 18, 19, 22, 24, 27], "submit": [1, 9], "fail": [1, 4, 9, 16], "obtain": [1, 10, 16, 24, 25], "about": [1, 27], "failur": [1, 2], "iter": [1, 4, 5, 15, 16, 24, 25, 27], "through": [1, 2, 4, 10, 14, 15, 24, 27], "required_pred": 1, "verifi": [1, 15, 19], "each": [1, 2, 4, 9, 12, 15, 16, 18, 19, 23, 24, 25, 27], "turn": [1, 2, 3, 4, 14, 16, 24, 27], "descript": [1, 27], "get_result": [1, 2, 9], "float": [1, 2, 3, 4, 7, 16, 18, 24, 25, 27], "keyword": [1, 2, 4, 16, 21, 24], "argument": [1, 2, 3, 4, 5, 16, 18, 24, 25], "specifi": [1, 2, 3, 4, 14, 16, 19, 22, 23, 24, 25, 27], "deriv": [1, 25], "follow": [1, 2, 3, 4, 7, 9, 16, 19, 24, 25, 27], "timeout": [1, 2, 18], "maximum": [1, 12, 16, 18, 24], "time": [1, 2, 3, 4, 7, 9, 15, 18, 25], "wait": [1, 7], "remot": 1, "finish": 1, "poll": 1, "interv": [1, 3, 16, 19, 24], "call": [1, 2, 3, 4, 14, 16, 24, 27], "pop_result": 1, "remov": [1, 2, 4, 7, 16, 17, 18, 24, 25, 27], "entri": [1, 3, 17, 18, 25], "wa": [1, 16, 18, 24], "present": [1, 2, 27], "resultcach": 1, "n_shot": [1, 2, 25], "valid_check": 1, "true": [1, 2, 3, 4, 7, 15, 16, 17, 19, 24, 25, 26, 27], "store": [1, 2, 4, 14, 25, 26, 27], "get_": 1, "data": [1, 2, 3, 4, 25], "postprocess": 1, "featur": [1, 2, 4, 8, 9], "supports_contextual_optimis": 1, "contextu": [1, 2], "optimisatioon": 1, "have": [1, 2, 4, 9, 10, 14, 16, 18, 19, 24, 25, 27], "necessari": [1, 25], "enabl": [1, 2, 8, 16], "seed": [1, 2], "rng": 1, "note": [1, 14, 16, 19, 20, 25], "reus": 1, "mani": [1, 2, 4, 8, 16, 27], "memori": [1, 2], "grow": 1, "indefinit": 1, "therefor": [1, 14], "when": [1, 2, 4, 12, 14, 16, 18, 20, 24, 25, 27], "process": [1, 2, 16, 24, 25, 27], "statevector": [1, 2, 3, 17, 25], "whose": [1, 3, 4, 16, 22, 25], "occupi": [1, 3], "signific": [1, 2, 17, 25], "amount": 1, "advis": 1, "union": [1, 25], "per": 1, "separ": [1, 2, 4, 8, 9, 10, 24, 25], "explicitli": [1, 25], "satisfi": [1, 2, 9, 16, 19, 24], "input": [1, 2, 3, 4, 14, 15, 16, 19, 22, 23, 24, 25, 27], "inter": [1, 12], "same": [1, 2, 3, 4, 7, 10, 15, 16, 24, 25, 27], "order": [1, 2, 3, 4, 9, 12, 14, 15, 16, 17, 18, 19, 23, 25, 27], "rebase_pass": [1, 2], "optyp": [1, 2, 3, 4, 9, 16, 19, 22, 23, 24, 25], "ignor": [1, 2, 4, 16, 21, 23, 25], "primit": [1, 2], "run_circuit": [1, 2], "conveni": [1, 16, 20, 24], "addit": [1, 2, 4, 8, 9, 10, 14, 15, 16], "backend_info": [1, 2], "exist": [1, 2, 4, 16, 24, 25, 27], "expectation_allows_nonhermitian": 1, "expect": [1, 2, 14, 15, 17, 25, 27], "allow": [1, 2, 4, 8, 9, 16, 24, 25], "hermitan": 1, "persistent_handl": 1, "must": [1, 2, 3, 4, 9, 16, 18, 19, 21, 22, 24, 25, 27], "supports_count": 1, "via": [1, 2, 8, 15, 16, 25, 27], "get_count": [1, 2, 9, 25], "supports_density_matrix": 1, "densiti": 1, "matrix": [1, 2, 3, 4, 14, 16, 17, 25], "get_density_matrix": 1, "supports_expect": 1, "calcul": [1, 2, 4, 17, 25], "supports_shot": 1, "get_shot": [1, 2, 25], "supports_st": 1, "get_stat": [1, 2], "supports_unitari": 1, "get_unitari": [1, 2, 3, 4], "complex": [1, 16, 17, 25, 27], "byte": [1, 25], "multidimension": 1, "identifi": [1, 2, 4, 24, 27], "sent": 1, "initialis": [1, 2], "hashabl": 1, "basic": [1, 2, 3, 9, 24, 27], "either": [1, 2, 3, 4, 5, 9, 16, 22, 24, 25, 27], "persist": 1, "transient": 1, "depend": [1, 2, 14, 16, 21], "consult": 1, "determin": [1, 25], "from_str": 1, "string": [1, 2, 3, 15, 17, 22, 25, 27], "valueerror": [1, 5, 25], "format": [1, 3, 7, 20, 21, 25], "invalid": [1, 2, 27], "q_bit": 1, "c_bit": 1, "bit": [1, 2, 3, 4, 5, 7, 8, 9, 14, 15, 16, 17, 25], "counter": [1, 3, 25], "outcomearrai": [1, 9, 25], "density_matrix": 1, "ppcirc": [1, 25], "encapsul": [1, 2, 3, 4, 15, 27], "case": [1, 2, 9, 15, 16, 24, 25], "real": [1, 3, 9, 25], "base": [1, 2, 3, 6, 9, 14, 16, 18, 23, 25, 27], "typic": [1, 12, 27], "collect": [1, 4, 24, 25], "measur": [1, 2, 4, 8, 9, 14, 15, 16, 18, 19, 24, 25, 27], "ideal": 1, "These": [1, 4, 14, 15, 16, 21, 24], "take": [1, 2, 3, 8, 14, 15, 16, 24, 25], "form": [1, 3, 6, 16, 24, 25, 27], "arrai": [1, 3, 14, 16, 24, 25], "matric": [1, 2, 25], "provid": [1, 2, 3, 4, 8, 9, 16, 18, 19, 23, 24, 25], "res_dict": 1, "dictionari": [1, 2, 3, 4, 5, 6, 16, 18, 25], "get_bitlist": 1, "intern": [1, 2, 7, 27], "storag": 1, "attributeerror": 1, "sort": 1, "cbit": 1, "basi": [1, 2, 3, 4, 14, 15, 16, 25, 27], "basisord": [1, 2, 3, 9, 25], "ilo": [1, 3, 4, 17, 25], "outcom": [1, 14, 25], "subset": [1, 25], "toggl": [1, 3], "lexicograph": [1, 2, 3, 4, 12], "id": [1, 2, 3, 4], "dlo": [1, 3], "decreas": [1, 2, 3, 16], "post": [1, 24, 25], "invalidresulttyp": 1, "get_debug_info": [1, 2], "success": [1, 24], "rate": [1, 18], "assert": [1, 2, 3, 4, 19], "averag": [1, 18, 24, 25], "across": [1, 25], "decompos": [1, 2, 12, 16, 24, 25], "transform": [1, 2, 3, 4, 9, 14, 15, 16, 23, 25, 27], "onli": [1, 2, 3, 4, 5, 7, 11, 12, 16, 19, 21, 23, 24, 25, 27], "its": [1, 2, 4, 8, 14, 16, 19, 22, 24, 25, 27], "yield": [1, 22, 27], "correct": [1, 2, 4, 15, 25, 26], "debug": [1, 11], "qbit": 1, "ndarrai": [1, 3, 4, 17, 22, 25], "permut": [1, 2, 3, 12, 14, 16, 20, 25], "d": [1, 3, 25], "numpi": [1, 3, 4, 17, 22, 25], "np": [1, 25], "get_distribut": 1, "unit": [1, 2, 3, 4], "exact": [1, 16, 24, 25], "approxim": [1, 2, 16, 24, 25], "probabl": [1, 2, 25], "distribut": [1, 2, 9, 10], "over": [1, 2, 4, 5, 14, 16, 17, 21, 22, 24, 25, 27], "known": [1, 2, 16, 24, 25], "otherwis": [1, 4, 10, 16, 24, 25, 27], "estim": [1, 2, 16, 18, 24, 25], "deprec": [1, 2, 3, 18], "pleas": [1, 9, 18], "get_empirical_distribut": 1, "get_probability_distribut": 1, "instead": [1, 2, 16, 18, 24], "marginalis": 1, "bitstr": [1, 3, 25], "empiricaldistribut": [1, 25], "util": [1, 2, 9], "where": [1, 2, 3, 4, 5, 7, 9, 10, 14, 16, 18, 24, 25, 27], "observ": [1, 25], "margin": [1, 25], "probabilitydistribut": [1, 2, 25], "get_qbitlist": 1, "request_id": 1, "storedresult": 1, "accord": [1, 4, 5, 15, 17, 18, 22, 25], "For": [1, 3, 4, 5, 8, 9, 16, 18, 19, 23, 24, 25], "request": 1, "relev": [1, 25, 27], "mixtur": 1, "runtimeerror": [1, 25], "qu": [1, 2, 22], "2d": [1, 4, 25], "readout": [1, 3, 4, 9, 18, 25], "serial": [1, 2, 6, 7, 25], "write": [1, 3, 4, 6, 7, 9, 25], "contains_measured_result": 1, "contains_state_result": 1, "vector": [1, 3, 4, 23, 25], "namedtupl": 1, "field": 1, "alia": [1, 5], "statusenum": 1, "messag": [1, 2], "error_detail": 1, "completed_tim": 1, "datetim": 1, "queued_tim": 1, "submitted_tim": 1, "running_tim": 1, "cancelled_tim": 1, "error_tim": 1, "queue_posit": 1, "extra": [1, 2, 14, 17, 27], "detail": [1, 2, 8, 9, 25], "timestamp": 1, "chang": [1, 2, 7, 16, 23, 24, 27], "queue": [1, 2], "posit": [1, 2, 3, 25, 27], "dic": [1, 5], "9": [1, 8, 9, 10], "enumer": [1, 5], "device_nam": 1, "version": [1, 2, 8, 9, 27], "gate_set": 1, "n_cl_reg": 1, "supports_fast_feedforward": 1, "fals": [1, 3, 4, 7, 15, 16, 17, 19, 24, 25, 27], "supports_reset": 1, "supports_midcircuit_measur": 1, "all_node_gate_error": 1, "all_edge_gate_error": 1, "all_readout_error": 1, "averaged_node_gate_error": 1, "averaged_edge_gate_error": 1, "averaged_readout_error": 1, "misc": 1, "factori": [1, 5], "instal": [1, 2, 7, 8, 9, 25], "regist": [1, 2, 3, 4, 5, 14, 16, 17, 19, 20, 22, 25], "flag": [1, 2, 3, 8, 15], "fast": [1, 19, 24], "feedforward": [1, 19], "reset": [1, 2, 4, 14], "supports_midcircuit_mea": 1, "midcircuit": 1, "uncorrel": 1, "2x2": [1, 3], "kei": 1, "add_misc": 1, "val": [1, 5], "new": [1, 2, 3, 4, 7, 9, 12, 15, 16, 17, 18, 23, 24, 25, 27], "get_misc": 1, "keyerror": 1, "n_node": 1, "major": 2, "multiplexedtensoredu2box": [2, 3, 4, 9, 14], "synthesis": [2, 3, 14, 16, 24], "multiplex": [2, 3, 14], "tensor": [2, 3, 14, 15, 17, 27], "product": [2, 3, 4, 17, 25], "u2": [2, 3, 4, 14, 24], "minor": 2, "maxnclregpred": [2, 9, 19], "most": [2, 9, 10, 16, 17, 19, 25, 27], "barrier": [2, 4, 12, 14, 16, 19], "qcontrolbox": [2, 3, 4, 9, 14], "left": [2, 4, 14, 16, 18, 24, 25], "tk1": [2, 4, 14, 16, 24], "tk2": [2, 4, 14, 16, 19, 24], "expos": 2, "circuitrender": [2, 3, 7], "qasm": [2, 8, 9], "now": [2, 21], "recognis": [2, 4], "rxxyyzz": 2, "hqslib1": 2, "header": [2, 20], "round_angl": [2, 24], "roundangl": [2, 9, 16], "angl": [2, 3, 4, 8, 9, 14, 16, 24, 27], "below": [2, 4, 16, 25], "threshold": [2, 25], "round": [2, 16, 24, 25], "dyadic": 2, "fraction": 2, "pi": [2, 3, 4, 8, 9, 14, 16, 24, 27], "throughout": 2, "fix": [2, 3, 4, 8, 9, 24, 25], "bug": [2, 8, 9], "get_operator_expectation_valu": [2, 9, 25], "comput": [2, 3, 4, 8, 9, 16, 23, 25], "pauli": [2, 3, 9, 14, 15, 16, 22, 23, 24, 25, 27], "term": [2, 4, 9, 14, 15, 17, 24, 25], "code": [2, 8, 9, 10], "occur": [2, 4, 16, 18, 19, 24, 27], "wire": [2, 3, 4, 7, 16, 19, 21, 23, 24, 27], "pre": [2, 16, 24], "arm": 2, "linux": [2, 8, 9, 10], "platform": [2, 8, 9], "updat": [2, 6, 10, 22, 25, 27], "toffolibox": [2, 3, 4, 9, 14], "utilis": 2, "multiplexor": [2, 3, 14], "improv": [2, 16, 22, 24], "decomposit": [2, 3, 9, 15, 16, 24], "diagonalbox": [2, 3, 4, 9, 14], "diagon": [2, 3, 14, 16], "rz": [2, 3, 4, 7, 8, 9, 14, 16, 23, 24], "networkx": [2, 25], "custom": [2, 3, 4, 8, 12, 16], "flattenrelabelregisterspass": [2, 9, 16], "relabel": [2, 16, 18], "multipli": [2, 3, 4, 27], "symbol": [2, 3, 4, 8, 9, 14, 16, 19, 20, 24, 27], "auto": 2, "definit": [2, 3, 4, 8, 25], "circuit_to_qasm_io": [2, 9, 20], "throw": [2, 16], "rather": [2, 4, 16], "than": [2, 4, 5, 16, 19, 20, 24, 25], "abort": 2, "try": [2, 10, 16], "statepreparationbox": [2, 3, 4, 9, 14], "prepar": [2, 3, 14, 25], "arbitrari": [2, 3, 14, 15, 16, 24, 27], "wasmwir": 2, "keep": [2, 8, 16], "wasm": [2, 3, 4, 9, 14, 20], "initi": [2, 4, 7, 8, 12, 16, 25], "zxgraphlikeoptimis": [2, 9, 16], "simplifi": [2, 16, 24, 25], "zx": [2, 7, 9, 16, 22], "calculu": [2, 9, 16], "extract": [2, 16, 27], "back": [2, 10, 16, 25, 27], "out": [2, 4, 9, 16, 25, 27], "commutablemeasurespred": [2, 9, 16, 19], "ad": [2, 4, 9, 16, 18, 22, 24], "precondit": [2, 16], "delaymeasur": [2, 9, 16], "allow_parti": [2, 16], "delai": [2, 16, 19], "much": [2, 15, 16], "thei": [2, 4, 14, 16, 17, 18, 24, 27], "cannot": [2, 10, 16], "end": [2, 4, 14, 16, 19, 21, 27], "pytket": [2, 8], "render": [2, 7, 25], "allow_swap": [2, 16, 24], "fullpeepholeoptimis": [2, 9, 16], "even": [2, 7, 14, 16], "target": [2, 4, 8, 9, 16, 18, 24], "correctli": 2, "circbox": [2, 3, 4, 9, 14, 16, 25], "get_op_map": [2, 3], "box": [2, 3, 4, 12, 14, 16, 22, 24, 27], "unhash": 2, "python": [2, 3, 8, 9, 10, 12, 16], "maco": [2, 8, 9, 10], "both": [2, 14, 20, 25, 27], "x86_64": 2, "arm64": [2, 9], "uniformli": [2, 3, 14, 23], "multiplexorbox": [2, 3, 4, 9, 14], "multiplexedrotationbox": [2, 3, 4, 9, 14], "multiplexedu2box": [2, 3, 4, 9, 14], "drop": 2, "qubit_readout": [2, 4], "qubit_to_bit_map": [2, 4], "removeimplicitqubitpermut": [2, 9, 16], "paulisimp": [2, 9, 16], "accept": [2, 4, 10], "implicit": [2, 4, 16, 20, 24], "swap": [2, 4, 9, 12, 14, 16, 18, 19, 24, 25], "multigatereorderroutingmethod": [2, 9, 12], "unknown": 2, "edg": [2, 4, 16, 18, 24, 27], "miss": [2, 20], "lexiroutelabellingmethod": 2, "hit": 2, "dynam": 2, "alloc": [2, 9], "preserv": [2, 16, 23, 24], "phasedx": [2, 4, 14, 16, 24], "synthesi": [2, 9, 12, 16], "tdg": [2, 4, 14], "cy": [2, 4, 14], "zzmax": [2, 4, 14, 16, 24], "clifford": [2, 15, 16, 19, 22, 23, 24, 27], "yyphas": [2, 4, 14, 16], "disallow": 2, "convers": 2, "condit": [2, 3, 4, 8, 9, 14, 16, 19, 24, 25], "strict": [2, 16], "subregist": 2, "larger": 2, "reorder": [2, 16, 24], "view_brows": [2, 7], "open": [2, 3, 4, 7, 9, 27], "browser": [2, 7], "warn": [2, 11, 25], "detect": 2, "cx": [2, 3, 4, 7, 8, 9, 14, 15, 16, 23, 24], "incorrect": 2, "copybit": [2, 14], "read": [2, 3, 6, 19, 21, 22, 25], "zzphase": [2, 4, 14, 16, 24], "respect": [2, 4, 16, 17, 25], "phase": [2, 3, 4, 9, 14, 16, 19, 21, 22, 23, 24, 25, 27], "reli": 2, "routingmethod": [2, 9, 12, 16], "defaultmappingpass": [2, 9, 16], "could": [2, 3, 23], "cycl": [2, 23], "dag": [2, 4, 25], "ha": [2, 3, 4, 9, 10, 15, 16, 18, 19, 24, 25, 27], "been": [2, 3, 9, 10, 19, 25, 27], "ecr": [2, 4, 14, 16], "api": [2, 8], "backend": [2, 3, 4, 8, 9, 18, 19, 20, 25], "shortcut": [2, 8], "u1": [2, 4, 14, 24], "u3": [2, 4, 14, 24], "cu1": [2, 4, 14], "cu3": [2, 4, 14], "iswap": [2, 4, 14], "phasediswap": [2, 4, 14], "eswap": [2, 4, 14], "fsim": [2, 4, 14], "sycamor": [2, 4, 14], "iswapmax": [2, 4, 14], "n_1qb_gate": [2, 4], "n_2qb_gate": [2, 4], "n_nqb_gate": [2, 4], "empriricaldistribut": [2, 25], "manipul": [2, 8], "backendresult": [2, 9, 25], "filter": [2, 25, 27], "make": [2, 4, 20, 25, 27], "work": [2, 8, 9, 16, 24], "multi": [2, 12, 16, 24], "affect": [2, 4, 16, 27], "cnxpairwisedecomposit": [2, 9, 16, 24], "replace_swap": [2, 4], "replace_implicit_wire_swap": [2, 4], "unus": [2, 4], "tk_scratch_bit": 2, "logicexp": [2, 3, 5], "everi": [2, 3, 16, 23, 24, 27], "classicalexpbox": [2, 3, 4, 9, 14, 16], "rename_unit": [2, 4], "schema": 2, "lineplac": [2, 9, 18], "issu": [2, 9, 10], "ident": [2, 4, 14, 16, 17, 22, 24, 25, 27], "kakdecomposit": [2, 9, 16, 24], "except": [2, 16, 19, 27], "created_qubit": [2, 4], "discarded_qubit": [2, 4], "insid": [2, 27], "signatur": [2, 26, 27], "equal": [2, 3, 5, 16, 23, 24, 25], "account": [2, 16, 20], "creation": 2, "discard": [2, 4, 16, 25], "shown": 2, "__repr__": [2, 4, 26], "simplif": [2, 16, 24, 25], "squashrzphasedx": [2, 9, 16], "cny": [2, 14, 16], "cnz": [2, 14, 16], "decomposearbitrarilycontrolledg": [2, 9, 16], "cnx": [2, 14, 16, 24], "get_statevector": [2, 3, 4], "critic": [2, 11], "prefer": [2, 3, 16, 24], "decomposetk2": [2, 9, 16, 24], "fidel": [2, 16, 18, 24], "fewer": [2, 4, 16, 24], "squash": [2, 16, 24], "while": [2, 15, 24], "commut": [2, 12, 15, 16, 17, 24], "properli": 2, "target_2qb_g": [2, 16, 24], "point": [2, 4, 10, 16, 24, 25, 27], "inaccuraci": 2, "normalisedtk2pred": [2, 9, 16, 19, 24], "threequbitsquash": [2, 9, 16, 24], "altern": [2, 25], "unitary3qbox": [2, 3, 4, 9, 14], "get_circuit": [2, 3, 22], "custompass": [2, 9, 16], "suppli": 2, "measure_regist": [2, 4], "rebasecustom": [2, 9, 16], "replac": [2, 4, 10, 16, 24, 25, 27], "int_dist_from_st": 2, "cliffordsimp": [2, 9, 16], "relax": 2, "up": [2, 3, 4, 8, 9, 14, 16, 22, 24, 25], "replace_tk2_2cx": 2, "avoid": 2, "crash": 2, "due": [2, 4, 16, 21], "normalisetk2": [2, 9, 16, 24], "zzphasetorz": [2, 9, 16, 24], "half": [2, 3, 4, 14, 24, 27], "normalis": [2, 16, 19, 24], "circuit_to_zx": [2, 9, 27], "zxdiagram": [2, 9, 27], "to_circuit": [2, 27], "diagram": [2, 7, 27], "to_graphviz_str": [2, 27], "sourc": [2, 4, 8, 9, 27], "graphviz": [2, 25, 27], "packag": [2, 4, 6, 8, 9, 10, 13], "kak": [2, 16, 24], "globalisephasedx": [2, 9, 16, 24], "rotat": [2, 3, 4, 14, 15, 16, 24], "backendinfo": [2, 9], "homonym": 2, "algorithm": [2, 16, 25], "significantli": 2, "reduc": [2, 4, 15, 16, 18, 24, 27], "nphasedx": [2, 14, 16, 24], "decomposenphasedx": [2, 24], "extend": [2, 16, 25], "rang": [2, 3, 4, 14, 25], "recogn": [2, 24], "cliffordcircuitpred": [2, 9, 19], "circuit_from_qasm_wasm": [2, 9, 20], "pars": 2, "file": [2, 4, 6, 7, 20, 21, 25, 26], "extern": [2, 3, 20], "faster": [2, 15], "capabl": 2, "grammar": [2, 16], "explicit": [2, 25, 27], "three": [2, 3, 4, 14, 16, 18, 24], "synthesisetk": [2, 9, 16], "optimisestandard": [2, 24], "synthes": 2, "phasepolybox": [2, 3, 4, 9, 14], "composephasepolybox": [2, 9, 16], "measurementsetup": [2, 9, 15], "measurementbitmap": [2, 9, 15], "nobarrierspred": [2, 9, 19], "qubitpaulioper": [2, 9, 25], "to_sparse_matrix": [2, 17, 25], "nan": 2, "appear": [2, 14, 19, 27], "substitut": [2, 4, 12, 14, 16, 23, 24, 25, 27], "anymor": 2, "problem": [2, 9, 10], "unassign": 2, "ancilla": [2, 4], "squashhq": 2, "rebasehq": 2, "rebaseprojectq": 2, "rebasepyzx": 2, "rebasequil": 2, "rebaseumd": 2, "rebaseufr": 2, "rebaseoqc": 2, "qubitpaulistr": [2, 9, 15, 17, 23, 25], "compile_circuit": 2, "graphplac": [2, 9, 16, 18], "noiseawareplac": [2, 9, 18], "import": [2, 4, 7, 8, 9, 20], "logic": [2, 5, 12, 14, 18, 24, 25], "physic": [2, 3, 12, 18, 24, 25], "def": [2, 4], "add_custom_g": [2, 4], "customgatedef": [2, 3, 4, 9, 14], "gateset": [2, 16, 19, 24], "multiqubit": [2, 24], "characteris": [2, 25], "from_openfermion": 2, "to_openfermion": 2, "program": [2, 14, 18, 21], "telemetri": 2, "subcircuit": [2, 12, 14, 16, 23, 24], "want": [2, 9], "alreadi": [2, 4, 9, 16, 24], "lexirouteroutingmethod": [2, 9, 12, 16], "lexilabellingmethod": [2, 9, 12, 16], "aasrouteroutingmethod": [2, 9, 12], "boxdecompositionroutingmethod": [2, 9, 12], "aaslabellingmethod": [2, 9, 12], "delay_measur": [2, 16], "auto_rebase_pass": [2, 16], "auto_squash_pass": [2, 16], "attempt": [2, 5, 16, 25], "passess": 2, "get_c_regist": [2, 4], "get_q_regist": [2, 4], "c_regist": [2, 4], "q_regist": [2, 4], "naiveplacementpass": [2, 9, 16], "complet": [2, 4, 12, 27], "opgroup": [2, 3, 4], "stamp": 2, "statu": [2, 9], "connectivitypred": [2, 9, 19], "impli": [2, 19], "isol": 2, "second": [2, 4, 7, 14, 25], "jinja2": [2, 7], "regress": 2, "symbol_substitut": [2, 4, 27], "caus": 2, "tableaux": 2, "is_clifford_typ": [2, 3], "op": [2, 3, 4, 5, 9, 14, 16, 26], "nodegraph": 2, "__version__": 2, "attribut": [2, 9], "py": [2, 3, 16, 27], "meth": 2, "dagger": [2, 3, 4, 14, 23], "transpos": [2, 3, 4], "globalphasedxpred": 2, "introduct": [2, 8], "behaviour": [2, 4], "paulisquash": [2, 9, 16], "guidedpaulisimp": [2, 9, 16], "xxphase3": [2, 4, 14, 24], "cxconfigtyp": [2, 9, 15, 16, 24], "multiqg": [2, 24], "config": [2, 9, 16], "compilation_pass_from_script": [2, 16], "simpl": [2, 5, 16, 24, 25], "textual": 2, "rebasetotket": [2, 24], "squashtotk1": 2, "rebasetoqiskit": 2, "decomposemultiqubitsibm": 2, "rebaseibm": 2, "synthesiseibm": 2, "usquashibm": 2, "optimisepostrout": [2, 24], "u": [2, 4, 8, 9, 13, 14, 22, 27], "add_assert": [2, 4], "stabiliserassertionbox": [2, 3, 4, 9], "projectorassertionbox": [2, 3, 4, 9], "summaris": [2, 9, 25], "paulistabilis": [2, 3, 9, 17], "nativ": [2, 8, 9, 25], "m1": [2, 9], "compilerpass": 2, "awar": [2, 12, 16, 24], "polynomi": [2, 3, 14, 16], "aasrout": [2, 9, 16], "displai": [2, 3, 9], "style": [2, 7, 20, 22], "colour": [2, 15, 27], "consid": [2, 16, 18, 19, 22, 24], "decomposemultiqubitscx": [2, 9, 16], "decomposesinglequbitstk1": [2, 9, 16], "synthesisetket": [2, 9, 16], "reducesingl": [2, 24], "optimisepauligadget": [2, 24], "optimisephasegadget": [2, 9, 16, 24], "peepholeoptimise2q": [2, 9, 16], "o2pass": 2, "o1pass": 2, "decomposesinglequbitsibm": 2, "g": [2, 3, 10, 14, 22, 25, 27], "numer": [2, 3, 4, 9, 16, 24, 25, 27], "reliabl": 2, "configur": [2, 6, 7, 15, 16, 24], "occasion": 2, "segfault": 2, "do": [2, 4, 19, 20, 24], "still": [2, 19], "achiev": [2, 16, 23, 24], "circ": [2, 3, 7, 9, 15, 20, 24, 25], "long": 2, "former": 2, "add_phas": [2, 4], "qubiterrorcontain": 2, "bugfix": 2, "longer": [2, 18, 24, 25, 27], "toward": [2, 16, 24], "depth": [2, 4, 9, 12, 18, 24], "lead": 2, "shorter": 2, "express": [2, 3, 4, 5, 7, 16, 19, 24, 25, 27], "around": [2, 27], "symengin": 2, "synthesiseoqc": [2, 9, 16], "combin": [2, 4, 15, 22, 23, 24, 25, 27], "simplifyiniti": [2, 9, 16], "html": [2, 7, 14, 25], "jupyt": [2, 7], "render_circuit_jupyt": [2, 7], "euleranglereduct": [2, 9, 16], "triplet": 2, "removebarri": [2, 9, 16], "triangulargrid": 2, "hexagonalgrid": 2, "cyclicbutterfli": 2, "small": [2, 25], "optim": [2, 8, 16, 24], "knowledg": [2, 16], "refactor": 2, "pytketconfig": [2, 6, 9], "qiskit": [2, 3, 8, 9, 10, 14], "honeywel": 2, "aqt": 2, "ionq": 2, "qsharp": 2, "braket": 2, "authent": 2, "workspac": 2, "move": [2, 16, 24], "namespac": [2, 4], "cirq": [2, 8], "projectq": [2, 3, 24], "pyquil": [2, 10], "pyzx": [2, 24], "qulac": 2, "corrupt": 2, "window": [2, 8, 9], "encrypt": 2, "password": 2, "recommend": [2, 9, 16, 24], "automat": [2, 14, 15, 16, 25], "retri": 2, "openfermion": 2, "break": 2, "aerbackend": [2, 9], "_process_model": 2, "ibmqemulatorbackend": 2, "nois": [2, 16, 23, 24, 25], "model": 2, "subsitut": 2, "abil": [2, 20], "compound": [2, 14], "AND": [2, 4], "OR": [2, 4], "xor": [2, 3, 4, 5], "bitregist": [2, 3, 4, 5, 9], "decomposeclassicalexp": [2, 9, 16], "honeywellbackend": 2, "direct": [2, 4, 16, 19, 24, 25, 27], "ops_of_typ": [2, 4], "commands_of_typ": [2, 4], "spam": [2, 9], "graphcolourmethod": [2, 9, 15, 25], "exhaust": [2, 15], "gen_term_sequence_circuit": [2, 9, 25], "partit": [2, 9, 25], "crx": [2, 4, 14], "cry": [2, 4, 14], "sx": [2, 4, 14, 16], "sxdg": [2, 4, 14], "csx": [2, 4, 14], "csxdg": [2, 4, 14], "cv": [2, 4, 14], "cvdg": [2, 4, 14], "get_config": 2, "sequencepass": [2, 9, 16], "get_sequ": [2, 16], "get_pass": [2, 16], "repeatpass": [2, 9, 16], "repeatwithmetricpass": [2, 9, 16], "repeatuntilsatisfiedpass": [2, 9, 16], "get_pred": [2, 16], "get_metr": [2, 16], "spamcorrect": [2, 25], "azur": 2, "mid": [2, 16, 25], "ibmq": 2, "premium": 2, "minimis": 2, "renamequbitspass": [2, 9, 16], "tool": [2, 8, 9, 14, 23, 25], "onlin": 2, "hermitian": [2, 3, 14], "greater": [2, 4, 5], "gatesetpred": [2, 9, 19], "wrap": 2, "softwar": [2, 8, 9, 10], "ibmqbackend": 2, "amazon": 2, "resulthandl": [2, 9], "etc": [2, 3, 10, 25, 27], "qubitmap": 2, "condition_valu": [2, 4], "convent": [2, 3, 4, 17, 25], "opposit": 2, "access": [2, 9, 23], "violat": 2, "circumst": 2, "redesign": 2, "speed": 2, "visualis": [2, 4, 25], "relat": [2, 27], "qubitoper": 2, "pauli_tensor_matrix": 2, "operator_matrix": 2, "renam": [2, 4, 5], "certain": [2, 16, 24], "high": [2, 25], "routin": [2, 27], "trotteris": [2, 9], "hamiltonian": [2, 18, 25], "reduct": [2, 16, 24, 25], "diagonalis": [2, 9, 15, 16], "inspect": [2, 16], "asynchron": 2, "mitig": 2, "facil": 2, "flow": [2, 14, 27], "generalis": 2, "depth_by_typ": [2, 4], "select": 2, "parameteris": [2, 4, 27], "pattern": [2, 18], "subclass": 2, "within": [2, 4, 7, 9, 14, 16, 24, 25, 27], "free": [2, 4, 9, 10, 25, 27], "stream": [2, 20], "log": [2, 9], "cleaner": 2, "natur": [2, 3], "uniform": 2, "getter": 2, "gateerror": 2, "made": [2, 3, 4, 14, 24, 25, 27], "readonli": 2, "runtim": 2, "stabil": [2, 22], "document": [2, 13, 14], "stricter": 2, "submodul": 2, "top": 2, "favour": 2, "pytket_aqt": 2, "pytket_honeywel": 2, "q": [2, 4, 16, 21, 22], "resourc": [2, 8, 27], "pytket_qsharp": 2, "familiar": 2, "textbook": 2, "popular": [2, 8], "enum": [2, 3, 5, 14, 15, 16, 24, 27], "optimisecliffordszx": 2, "contractur": 2, "how": [2, 8, 25, 27], "stage": 2, "composit": [2, 3, 4, 8, 16], "simpler": 2, "flexibl": 2, "contigu": [2, 16, 25], "dimension": [2, 3], "refer": [2, 4, 15, 25], "individu": [2, 16, 23, 24, 25, 27], "linear": [2, 3, 4, 14, 24], "latex": [2, 3, 4], "quantikz": [2, 4], "build": [2, 6, 8, 9, 15, 25], "final": [2, 3, 4, 9, 25], "track": 2, "entir": [2, 3, 25], "procedur": [2, 25], "compilationunit": [2, 9, 16, 19], "wrapper": [2, 3], "quipper": [2, 8, 9], "consist": [2, 4, 14, 16], "introduc": [2, 16, 23, 24, 25, 27], "batch": 2, "bridg": [2, 4, 14, 16, 24], "insert": [2, 9, 12, 24, 25], "cost": [2, 16], "physicalcircuit": 2, "just": 2, "sped": 2, "redund": [2, 16], "fragment": 2, "sympi": [2, 3, 4, 25, 27], "multipl": [2, 3, 4, 14, 16, 23, 25, 27], "forestbackend": 2, "rigett": 2, "qvm": 2, "qc": [2, 8], "aerunitarybackend": 2, "full": [2, 7, 12, 16, 17, 21, 25], "chain": [2, 16, 27], "command": [2, 3, 4, 9, 10], "export": [2, 20], "pytket_qiskit": 2, "go": 2, "straight": 2, "quantumcircuit": [2, 8], "dagcircuit": 2, "cswap": [2, 4, 14, 21], "add_circuit": [2, 4], "sensibl": 2, "append": [2, 4, 16, 25], "expon": 2, "doc": [2, 25], "quantomat": 2, "chemistri": 2, "part": 2, "eumen": 2, "cnot": [2, 3, 16, 21], "4x4": [2, 3, 14], "patch": 2, "terra": 2, "aqua": 2, "rigetti": 2, "analys": 2, "notat": 2, "ibm": [2, 14], "tketpass": 2, "plug": 2, "stack": 2, "advantag": [2, 25], "tket": [2, 3, 8, 9, 12, 14, 20, 21], "subspac": 2, "expans": 2, "alongsid": 2, "power": [2, 8], "rewrit": [2, 9, 16, 24, 27], "safe": [2, 24], "googl": 2, "logic_exp": [3, 9], "And": [3, 5], "binaryop": [3, 5], "bitand": [3, 5], "biteq": [3, 5], "bitlogicexp": [3, 4, 5], "bitneq": [3, 5], "bitnot": [3, 5], "bitor": [3, 5], "bitwiseop": [3, 5], "bitxor": [3, 5], "constpred": [3, 5], "eq": [3, 5], "neq": [3, 5], "Or": [3, 5, 8], "predicateexp": [3, 5], "regadd": [3, 5], "regand": [3, 5], "regdiv": [3, 5], "regeq": [3, 5], "reggeq": [3, 5], "reggt": [3, 5], "regleq": [3, 5], "reglogicexp": [3, 5], "reglsh": [3, 5], "reglt": [3, 5], "regmul": [3, 5], "regneg": [3, 5], "regneq": [3, 5], "regnot": [3, 5], "regor": [3, 5], "regpow": [3, 5], "regrsh": [3, 5], "regsub": [3, 5], "regwiseop": [3, 5], "regxor": [3, 5], "unaryop": [3, 5], "filter_by_typ": [3, 5], "if_bit": [3, 5], "if_not_bit": [3, 5], "reg_eq": [3, 5], "reg_geq": [3, 5], "reg_gt": [3, 5], "reg_leq": [3, 5], "reg_lt": [3, 5], "reg_neq": [3, 5], "get_circuit_render": [3, 7], "usag": [3, 12], "fresh_symbol": [3, 9], "find": [3, 10, 15, 18, 23], "appropri": [3, 9, 18, 25], "suffix": 3, "yet": [3, 25, 27], "current": [3, 4, 6, 7, 9, 10, 16, 19, 20, 21, 22, 24, 25, 27], "session": 3, "readabl": [3, 4, 27], "arg1": [3, 4, 5, 16, 22, 23], "free_symbol": [3, 4, 27], "get_nam": [3, 27], "complex128": [3, 4, 17], "m": [3, 4, 10, 17, 22], "is_gat": 3, "n_qubit": [3, 4, 17], "angular": 3, "radian": [3, 14, 27], "constrain": [3, 16], "canon": 3, "usual": [3, 9], "rx": [3, 4, 14, 16, 24], "ry": [3, 4, 14, 16, 24], "group": [3, 4, 16], "assign": [3, 4, 18], "unittyp": [3, 9], "v": [3, 4, 14, 24, 27], "member": [3, 11, 14, 15, 16, 17, 24, 25, 27], "length": [3, 22, 25], "dimens": [3, 4, 25], "reg_nam": 3, "singleton": [3, 25], "element": [3, 4, 5, 25], "col": 3, "doubli": 3, "from_list": [3, 17, 25], "to_list": [3, 17, 25], "oldeq": 3, "__eq__": [3, 4, 25], "tripli": 3, "3d": 3, "qubitregist": [3, 4, 9], "__getitem__": [3, 25], "size": [3, 4, 16, 24, 25], "view": [3, 7, 16, 25], "our": [3, 9, 10], "lvert": 3, "abc": 3, "rangl": [3, 25], "c": [3, 4, 8, 14, 16, 19, 21, 23, 24, 25], "b": [3, 16, 17, 19, 24, 25], "interpret": [3, 20, 25], "big": [3, 25], "endian": [3, 4, 25], "BE": [3, 4, 17, 25], "fashion": 3, "a_": 3, "00": 3, "01": 3, "10": [3, 8, 9, 10, 12, 25], "11": [3, 8, 9, 10], "le": 3, "littl": [3, 4, 25], "tabl": [3, 4, 14, 22, 25], "intuit": [3, 24], "manner": 3, "unitary1qbox": [3, 4, 9, 14], "get_matrix": 3, "unitary2qbox": [3, 4, 9, 14], "expbox": [3, 4, 9, 14], "exponenti": [3, 9, 14, 15], "t": [3, 4, 5, 9, 14, 16, 23, 24], "ita": [3, 14], "pauliexpbox": [3, 4, 9, 14, 25], "possibli": [3, 4, 16, 27], "frac12": [3, 14], "sigma_0": 3, "otim": [3, 14, 25], "sigma_1": 3, "cdot": [3, 14], "sigma_i": 3, "y": [3, 4, 14, 17, 24, 25, 27], "z": [3, 4, 14, 17, 22, 24, 25, 27], "get_pauli": 3, "get_phas": 3, "rotation_axi": 3, "35": 3, "axi": [3, 14, 27], "backward": [3, 16, 24], "subject": 3, "get_permut": 3, "get_rotation_axi": 3, "low": 3, "port": [3, 27], "get_n_control": 3, "get_op": 3, "underli": [3, 16, 17, 25], "ariti": [3, 4, 22, 27], "customg": [3, 4, 9, 14], "parametris": [3, 14], "condition": [3, 14], "openqasm": [3, 8, 20], "10b": 3, "mean": [3, 4, 18, 25], "width": [3, 4, 7, 25], "hold": [3, 6, 14, 19, 25], "content_equ": 3, "content": [3, 27], "get_exp": 3, "get_n_i": 3, "pure": [3, 4, 25], "get_n_io": 3, "get_n_o": 3, "qubit_indic": 3, "phase_polynomi": 3, "linear_transform": 3, "boolean": [3, 14, 16, 25, 27], "8x8": 3, "projector": 3, "stabilis": [3, 17], "get_stabilis": 3, "wasmop": [3, 9], "integ": [3, 4, 25, 27], "num_bit": 3, "num_w": 3, "n_input": 3, "n_output": 3, "func_nam": 3, "wasm_uid": 3, "bitwidth": 3, "input_width": 3, "n_i32": 3, "output_width": 3, "multibitop": [3, 9], "parallel": [3, 4, 14, 25, 27], "classicalevalop": [3, 9], "basic_op": 3, "bitwis": [3, 4, 25], "setbitsop": [3, 9], "constant": [3, 5, 27], "evaluat": 3, "classicalop": [3, 9], "n_input_output": 3, "copybitsop": [3, 9], "copi": [3, 4, 14, 19, 26, 27], "rangepredicateop": [3, 9], "binari": [3, 4, 5, 8, 14, 22, 25], "encod": [3, 4, 5, 14, 20, 25], "upper": [3, 4, 18], "lower": [3, 4, 18, 25], "bound": [3, 4, 14, 18], "inclus": 3, "op_map": 3, "share": [3, 4, 27], "activ": 3, "impl_diag": 3, "get_impl_diag": 3, "is_invers": 3, "upper_triangl": 3, "shape": 3, "triangl": [3, 27], "get_diagon": 3, "is_upper_triangl": 3, "assum": [4, 15, 16, 18, 24, 25], "step": [4, 16], "analysi": 4, "condition_bit": 4, "thu": [4, 25], "wai": [4, 9, 10], "h": [4, 7, 8, 9, 14, 16, 23, 24, 25, 27], "save": [4, 6, 20, 25], "ccx": [4, 14, 16, 24], "control_0": 4, "control_1": 4, "ch": [4, 14], "control_qubit": 4, "target_qubit": 4, "crz": [4, 14, 24], "target_0": 4, "target_1": 4, "angle0": 4, "angle1": 4, "angle2": 4, "cz": [4, 14, 24], "qubit_0": 4, "qubit_1": 4, "qubit0": 4, "qubit1": 4, "hadamard": [4, 8, 9, 14, 27], "bit_index": 4, "posisbli": 4, "25": [4, 8, 9, 25], "sdg": [4, 14], "vdg": [4, 14], "xxphase": [4, 14, 16], "xx": [4, 22], "qubit2": 4, "yy": 4, "zz": [4, 22], "__getstate__": 4, "blank": [4, 9], "add_blank_wir": 4, "n_bit": 4, "__iter__": 4, "__mul__": 4, "__rshift__": 4, "sequenti": [4, 12, 17, 22, 25], "unifi": 4, "__setstate__": 4, "__str__": [4, 26], "add_barri": 4, "add_bit": 4, "reject_dup": 4, "uniqu": [4, 15, 27], "fill": 4, "add_c_and": 4, "arg0_in": 4, "arg1_in": 4, "arg_out": 4, "add_gate_method": 4, "add_c_and_to_regist": 4, "reg0_in": 4, "reg1_in": 4, "reg_out": 4, "smallest": 4, "add_c_copybit": 4, "args_in": 4, "args_out": 4, "destin": 4, "add_c_copyreg": 4, "input_reg": 4, "output_reg": 4, "anoth": [4, 10, 19, 23, 25, 27], "truncat": 4, "smaller": [4, 16], "add_c_modifi": 4, "arg_inout": 4, "explicitmodifi": [4, 14], "add_c_not": 4, "arg_in": 4, "NOT": 4, "add_c_not_to_regist": 4, "reg_in": 4, "add_c_or": 4, "add_c_or_to_regist": 4, "add_c_pred": 4, "explicitpred": [4, 14], "add_c_range_pred": 4, "minval": 4, "maxval": 4, "distinct": 4, "add_c_regist": 4, "add_c_setbit": 4, "add_c_setreg": 4, "unsign": [4, 16, 25], "_tket_reg_width": 4, "It": [4, 16, 18, 24, 25], "zero": [4, 16, 24, 25], "pad": [4, 17, 25], "add_c_transform": 4, "classicaltransform": [4, 14], "j": [4, 7], "sum_i": 4, "a_i": [4, 25], "add_c_xor": 4, "add_c_xor_to_regist": 4, "add_circbox": 4, "onto": [4, 24], "add_gat": [4, 14], "add_classicalexpbox_bit": 4, "add_classicalexpbox_regist": 4, "instanti": [4, 7], "halfturn": 4, "add_diagonal_box": 4, "add_expbox": 4, "particular": [4, 20, 27], "add_multiplexed_tensored_u2": 4, "add_multiplexedrot": 4, "add_multiplexedu2": 4, "add_multiplexor": 4, "add_pauliexpbox": 4, "add_phasepolybox": 4, "add_q_regist": 4, "add_qcontrolbox": 4, "add_qubit": 4, "add_state_preparation_box": 4, "add_toffolibox": 4, "add_unitary1qbox": 4, "unitarybox": 4, "add_unitary2qbox": 4, "add_unitary3qbox": 4, "qubit_2": 4, "add_wasm": 4, "funcnam": 4, "filehandl": 4, "wasmfilehandl": [4, 9, 26], "list_i": 4, "list_o": 4, "args_wasm": 4, "handler": [4, 26], "variabl": [4, 5, 14], "wasmstat": 4, "add_wasm_to_reg": 4, "get": [4, 6, 7, 9, 18, 25], "causal": [4, 16], "invers": [4, 16, 24, 25], "adjoint": 4, "interior": [4, 27], "vertic": [4, 15, 18, 27], "longest": 4, "path": [4, 6, 16, 18, 25, 26], "exclud": 4, "sub": [4, 5, 25], "flatten_regist": 4, "likewis": 4, "get_command": 4, "pybind11": 4, "peculiar": 4, "treat": [4, 25], "genuin": 4, "need": [4, 9, 10, 15, 16, 19, 24], "reshap": 4, "get_unitary_times_oth": 4, "matr": 4, "um": 4, "effici": [4, 24], "implicit_qubit_permut": 4, "is_symbol": [4, 27], "measure_al": [4, 7, 8, 9], "doesn": [4, 16, 23], "qreg": 4, "creg_nam": 4, "n_gates_of_typ": 4, "search": [4, 9, 18], "qubit_cr": 4, "qubit_create_al": 4, "qubit_discard": 4, "qubit_discard_al": 4, "qubit_is_cr": 4, "queri": 4, "qubit_is_discard": 4, "remove_blank_wir": 4, "interven": 4, "untouch": [4, 16, 24], "simultan": [4, 12, 14], "substitute_nam": 4, "retain": 4, "were": [4, 24, 25, 27], "repl": 4, "modifi": [4, 12, 14, 16, 18, 25], "symbol_map": [4, 27], "captur": [4, 12, 27], "to_latex_fil": 4, "filenam": [4, 25], "tex": 4, "valid_connect": 4, "arch": 4, "allow_bridg": 4, "confirm": 4, "desir": [4, 11, 15, 16, 22, 25], "middl": 4, "neighbour": [4, 14, 24, 27], "__hash__": 4, "bit_readout": 4, "right": [4, 14, 25], "is_simpl": 4, "simpli": [4, 9, 27], "classicl": 4, "n_gate": 4, "meaning": 4, "neither": 4, "nor": 4, "subsequ": 4, "discuss": [5, 9], "arg2": [5, 16, 23], "eval_v": 5, "evalu": 5, "fold": [5, 16], "expres": 5, "tree": [5, 16, 24], "all_input": 5, "involv": 5, "load": [5, 6, 7], "nest": [5, 7, 16], "rename_arg": 5, "cmap": 5, "wise": 5, "set_valu": 5, "var": 5, "recurs": [5, 7, 12, 16, 27], "seq": 5, "var_typ": 5, "r": 5, "less": [5, 16, 24, 25], "inequ": 5, "userspac": 6, "get_config_file_path": [6, 9], "machin": [6, 25], "load_config_fil": [6, 9], "write_config_fil": [6, 9], "pytket_config": 6, "init": 6, "read_fil": 6, "config_file_path": 6, "write_fil": 6, "pytketextconfig": [6, 9], "from_default_config_fil": 6, "t_ext": 6, "from_extension_dict": 6, "ext_dict": 6, "from_pytketconfig": 6, "p_config": 6, "update_default_config_fil": 6, "update_pytket_config": 6, "internet": 7, "offlin": 7, "done": 7, "pip": [7, 8, 9], "env": 7, "environ": 7, "manag": [7, 8], "get_render_opt": 7, "_for_j": 7, "render_circuit_as_html": 7, "inlin": 7, "cell": 7, "set_render_opt": 7, "min_height": 7, "height": 7, "min_width": 7, "zx_style": 7, "condense_c_bit": 7, "collaps": 7, "condens": 7, "line": [7, 18], "dark_them": 7, "dark": 7, "mode": [7, 9], "transparent_bg": 7, "background": 7, "crop_param": 7, "shorten": 7, "browser_new": 7, "sleep": 7, "tempfil": 7, "delet": [7, 25], "webbrows": 7, "circuit_render": 7, "print": [7, 9], "300px": 7, "ipython": 7, "happi": 7, "offline_displai": 7, "custom_render": 7, "abov": [7, 10, 11, 16], "agnost": 8, "focus": 8, "superior": 8, "nisq": 8, "noisi": 8, "intermedi": 8, "scale": [8, 25], "transpil": 8, "64": 8, "later": 8, "pypi": [8, 10], "those": [8, 16, 27], "older": 8, "date": 8, "upgrad": [8, 10], "interoper": 8, "repo": 8, "design": [8, 16, 18], "system": [8, 27], "mutat": 8, "instruct": [8, 16, 25], "built": [8, 10], "record": [8, 9], "handi": 8, "compon": [8, 22, 25, 27], "On": [8, 9], "hand": 8, "flexibil": 8, "languag": 8, "raw": [8, 25], "embed": 8, "framework": [8, 27], "circuit_from_qasm": [8, 9, 20], "my_qasm_fil": 8, "like": [8, 10, 25], "qiskit_to_tk": 8, "gentl": 8, "toolkit": 9, "quantinuum": 9, "we": [9, 10, 16, 18, 20, 24, 25, 27], "conjunct": 9, "project": [9, 14], "To": [9, 10, 18], "mac": 9, "becaus": [9, 16], "scipi": [9, 17, 25], "brew": 9, "haven": 9, "openbla": 9, "wheel": 9, "prefix": [9, 25], "visit": 9, "troubleshoot": 9, "page": 9, "grant": 9, "sampl": [9, 23, 25], "compiled_circ": 9, "100": [9, 18, 25], "summari": [9, 16], "frequenc": 9, "49": 9, "51": 9, "start": [9, 16, 19, 24], "download": 9, "wish": [9, 25], "academ": 9, "public": [9, 16], "overview": 9, "paper": 9, "topic": 9, "task": 9, "aka": 9, "network": 9, "gadget": [9, 16, 24, 27], "shallow": 9, "strategi": [9, 15, 16, 24, 25], "cluster": 9, "ansatz": 9, "keen": 9, "benchmark": 9, "techniqu": [9, 16], "against": 9, "repositori": [9, 10], "latest": 9, "releas": [9, 10], "feel": [9, 10], "touch": 9, "assist": 9, "fair": 9, "test": [9, 24], "think": 9, "contact": 9, "slack": 9, "channel": 9, "commun": 9, "join": 9, "mail": 9, "question": 9, "idea": 9, "send": 9, "email": 9, "ask": 9, "help": 9, "newest": 9, "cambridgequantum": 9, "com": 9, "github": [9, 10], "pick": [9, 12], "look": 9, "someon": 9, "els": [9, 16, 17, 19, 24, 27], "realli": 9, "thank": 9, "answer": 9, "team": [9, 10, 13], "soon": [9, 10], "licens": 9, "under": [9, 25], "apach": 9, "changelog": 9, "pauli_string_mult": [9, 17], "cnotsynthtyp": [9, 16], "safetymod": [9, 16], "cxmappingpass": [9, 16], "commutethroughmulti": [9, 16, 24], "contextsimp": [9, 16], "customroutingpass": [9, 16], "decomposebox": [9, 16, 24], "decomposeswapstocx": [9, 16], "decomposeswapstocircuit": [9, 16], "flattenregist": [9, 16], "fullmappingpass": [9, 16], "placementpass": [9, 16], "rebasetket": [9, 16], "removediscard": [9, 16], "removeredund": [9, 16, 24], "routingpass": [9, 16], "simplifymeasur": [9, 16], "squashcustom": [9, 16], "squashtk1": [9, 16], "synthesisehq": [9, 16], "synthesiseumd": [9, 16], "script": 9, "auto_rebas": 9, "defaultregisterpred": [9, 19], "directednesspred": [9, 19], "maxnqubitspred": [9, 19], "maxtwoqubitgatespred": [9, 19], "noclassicalbitspred": [9, 19], "noclassicalcontrolpred": [9, 19], "nofastfeedforwardpred": [9, 19], "nomidmeasurepred": [9, 19], "nosymbolspred": [9, 19], "nowireswapspred": [9, 19], "placementpred": [9, 19], "userdefinedpred": [9, 19], "paulipartitionstrat": [9, 15, 25], "measurement_reduct": [9, 15], "term_sequ": [9, 15], "circuit_from_qasm_io": [9, 20], "circuit_from_qasm_str": [9, 20], "circuit_to_qasm": [9, 20], "circuit_to_qasm_str": [9, 20], "circuit_from_quipp": [9, 21], "place_fully_connect": [9, 18], "place_with_map": [9, 18], "mappingmanag": [9, 12], "routingmethodcircuit": [9, 12], "tableau": 9, "unitarytableau": [9, 22], "unitarytableaubox": [9, 22], "paulisynthstrat": [9, 16, 24], "separate_class": [9, 24], "framerandomis": [9, 23], "pauliframerandomis": [9, 23], "universalframerandomis": [9, 23], "apply_clifford_basis_chang": [9, 23], "cliffordgen": [9, 27], "directedgen": [9, 27], "phasedgen": [9, 27], "quantumtyp": [9, 27], "zxbox": [9, 27], "zxgen": [9, 27], "zxtype": [9, 27], "zxvert": [9, 27], "zxwire": [9, 27], "zxwiretyp": [9, 27], "append_pauli_measur": [9, 25], "compare_statevector": [9, 25], "compare_unitari": [9, 25], "counts_from_shot_t": [9, 25], "expectation_from_count": [9, 25], "expectation_from_shot": [9, 25], "get_pauli_expectation_valu": [9, 25], "permute_basis_index": [9, 25], "permute_qubits_in_statevector": [9, 25], "permute_rows_cols_in_unitari": [9, 25], "prepare_circuit": [9, 25], "probs_from_count": [9, 25], "probs_from_st": [9, 25], "readout_count": [9, 25], "set_level": [9, 11], "pip3": 10, "python3": 10, "recent": 10, "commerci": 10, "20": 10, "ltsc": 10, "concern": 10, "publish": 10, "had": [10, 16], "compliant": 10, "receiv": 10, "tracker": 10, "might": 10, "who": 10, "similar": [10, 14, 16, 18, 24], "dev": 10, "diagnos": 10, "trace": [11, 24], "info": [11, 25], "err": 11, "off": [11, 22], "aa": 12, "unplac": [12, 18], "aaslookahead": 12, "comparison": 12, "approach": [12, 16], "outlin": 12, "arxiv": [12, 16, 24], "1902": 12, "08091": 12, "lookahead": [12, 16], "lexirout": 12, "emploi": 12, "purpos": [12, 16, 25], "permit": [12, 19], "partial": [12, 18], "route_circuit": 12, "routing_method": 12, "modif": 12, "route_subcircuit": 12, "proce": 12, "rank": 12, "viabil": 12, "viabl": 12, "front": [12, 16, 24], "max_depth": 12, "max_siz": 12, "parent": 12, "whole": [12, 20, 25], "callabl": [12, 16, 19, 24, 25], "declar": 12, "2013": 13, "2017": 13, "licenc": 13, "http": [13, 14, 16, 24, 25], "www": 13, "mozilla": 13, "org": [13, 14, 16, 24, 25], "en": 13, "mpl": 13, "bitbucket": 13, "cphase": 14, "perhap": 14, "alpha": 14, "mapsto": 14, "begin": [14, 21], "cc": 14, "mathrm": [14, 16], "frac14": 14, "frac": 14, "sqrt": 14, "co": 14, "sin": 14, "lambda": [14, 16, 24, 25], "3_summary_of_quantum_oper": 14, "phi": 14, "theta": 14, "beta": 14, "gamma": 14, "rule": [14, 16, 24, 27], "toffoli": [14, 24], "cccc": 14, "noop": 14, "perman": 14, "strip": 14, "meta": [14, 19], "prevent": 14, "jump": 14, "branch": 14, "goto": 14, "uncondit": 14, "stop": [14, 16, 18], "halt": 14, "immedi": 14, "termin": 14, "third": [14, 16], "togeth": [14, 15, 16, 24, 27], "p": [14, 16, 22, 23, 25], "ldot": [14, 25], "2i": 14, "\u03b1": 14, "pairwis": [14, 16, 24], "compos": [14, 16, 24, 27], "cnry": [14, 16], "maxim": 14, "entangl": 14, "frac16": 14, "setbit": 14, "rangepred": 14, "truth": 14, "multibit": 14, "from_nam": 14, "lazi": [15, 25], "largestfirst": [15, 25], "greedili": 15, "highest": [15, 24], "systemat": 15, "until": [15, 16, 24, 27], "Such": 15, "worst": 15, "often": 15, "belong": [15, 25], "dictat": [15, 16, 24], "flip": [15, 27], "pariti": [15, 25], "invert": 15, "circ_index": 15, "experi": [15, 25], "sum": [15, 25], "weight": [15, 18, 25], "expctat": 15, "add_measurement_circuit": 15, "add_result_for_term": 15, "bitmap": 15, "compar": [15, 25], "measurement_circ": 15, "nonconflictingset": 15, "commutingset": [15, 25], "mutual": 15, "o": [15, 27], "strat": [15, 16], "cx_config": [15, 16, 24], "snake": [15, 16, 24], "whenev": 15, "composition": 16, "special": 16, "compilation_unit": 16, "safety_mod": 16, "before_appli": 16, "after_appli": 16, "invok": 16, "callback": 16, "hampath": 16, "hamilton": 16, "rec": 16, "steiner": 16, "gauss": 16, "repeat": [16, 24, 25, 27], "effect": [16, 18, 22, 27], "compilation_pass": 16, "check_funct": [16, 19, 26], "metric": 16, "audit": 16, "applic": [16, 24, 27], "overal": 16, "postcondit": 16, "pass_list": 16, "arc": [16, 18, 24], "limit": [16, 21], "few": 16, "nb": 16, "remap": 16, "placer": 16, "connectivti": 16, "directed_cx": 16, "duncan": [16, 24], "fagan": [16, 24], "ab": [16, 24], "1901": [16, 24], "10114": [16, 24], "disregard": [16, 24], "orient": [16, 24], "chanc": [16, 24], "past": [16, 24], "min_siz": 16, "minim": [16, 24], "polynomin": 16, "allow_class": [16, 25], "xcirc": [16, 25], "omit": [16, 25], "transfom": 16, "caller": [16, 25], "respons": 16, "respect_direct": 16, "directed": 16, "replacement_circuit": 16, "chosen": [16, 24, 25], "cx_fidel": [16, 24], "zzmax_fidel": [16, 24], "zzphase_fidel": [16, 24], "consider": [16, 24], "exactli": [16, 24, 27], "concret": [16, 24], "euler": 16, "By": [16, 24], "tripl": [16, 24], "merg": [16, 24, 27], "remain": [16, 18, 19, 27], "peephol": 16, "resynthesi": 16, "proceed": [16, 24], "disabl": [16, 24], "blow": [16, 24], "region": 16, "focu": 16, "greedi": 16, "42": [16, 24], "cartan": [16, 24], "weyl": [16, 24], "chamber": [16, 24], "precis": [16, 24], "met": [16, 24], "ie": [16, 24], "come": [16, 24], "resynthesis": [16, 24], "gagdet": 16, "cx_replac": 16, "tk1_replac": 16, "revers": 16, "tk2_replac": 16, "cloutput": 16, "futur": 16, "word": [16, 20], "becom": 16, "mergedoper": 16, "qubit_map": 16, "old": 16, "only_zero": [16, 24], "leav": [16, 24, 25], "alon": [16, 24], "create_all_qubit": 16, "remove_redund": 16, "annot": 16, "singleq": 16, "almost": 16, "beforehand": 16, "withangl": 16, "conform": 16, "arbitrarili": [16, 24], "whitespac": 16, "cliffordsimpnoswap": 16, "simplifyinitialnoclass": 16, "formal": 16, "compilation_pass_grammar": 16, "complilation_pass_from_script": 16, "backu": 16, "naur": 16, "frozenset": 16, "noautorebas": 16, "No": [16, 21, 27], "letter": 17, "alphabet": 17, "coeffici": 17, "coeff": 17, "spars": [17, 25], "qubitpaulimap": 17, "commutes_with": 17, "compress": [17, 25], "dot_stat": [17, 25], "dot": [17, 25], "state_expect": [17, 25], "csc_matrix": [17, 25], "dens": [17, 25], "qubitpaulistring1": 17, "qubitpaulistring2": 17, "independ": 18, "maximum_match": 18, "1000": 18, "maximum_pattern_g": 18, "maximum_pattern_depth": 18, "subgraph": 18, "monomorphsim": 18, "monomorph": 18, "reflect": [18, 25], "what": 18, "origin": [18, 19, 24, 25], "total": [18, 25], "millisecond": 18, "modify_config": 18, "solut": 18, "maximum_line_g": 18, "maximum_line_depth": 18, "outdegre": 18, "circl": 18, "node_error": 18, "link_error": 18, "readout_error": 18, "readouterror": 18, "paramt": 18, "get_placement_map": 18, "overheard": 18, "qmap": 18, "fully_connect": 18, "enforc": 19, "restrict": 19, "compris": [19, 23, 25], "check_all_pred": 19, "final_map": 19, "initial_map": 19, "allowed_typ": 19, "ones": 19, "last": 19, "although": 20, "librari": 20, "qelib1": 20, "again": [20, 27], "unlk": 20, "reimport": 20, "parser": [20, 21], "input_fil": [20, 21], "pathlik": 20, "utf": 20, "stream_in": 20, "textio": 20, "text": 20, "qasm_str": 20, "wasm_fil": 20, "output_fil": 20, "stream_out": 20, "include_gate_def": 20, "ascii": 21, "subroutin": 21, "qinit": 21, "qterm": 21, "legaci": 21, "qnot": 21, "qmultinot": 21, "qhad": 21, "qswap": 21, "qw": 21, "qgate": 21, "qmea": 21, "gphase": 21, "qprep": 21, "qunprep": 21, "qdiscard": 21, "dterm": 21, "cgate": 21, "cinit": 21, "cterm": 21, "cdiscard": 21, "aaronson": 22, "gottesman": 22, "action": [22, 23], "nqb": 22, "xz": [22, 27], "xph": 22, "zph": 22, "apply_gate_at_end": 22, "gu": 22, "unparameteris": [22, 27], "qb": 22, "apply_gate_at_front": 22, "ug": 22, "get_row_product": 22, "qubitpaulitensor": 22, "get_xrow": 22, "pu": 22, "ux_": 22, "get_zrow": 22, "uz_": 22, "tab": 22, "get_tableau": 22, "boundari": [23, 27], "frame": 23, "deduc": 23, "cycletyp": 23, "frametyp": 23, "conjug": [23, 27], "optypevector": 23, "get_all_circuit": 23, "sample_circuit": 23, "randomis": 23, "c_dagger": 23, "upon": 24, "nearest": 24, "star": 24, "good": 24, "balanc": 24, "logarithm": 24, "harder": 24, "cowtan": 24, "et": [24, 27], "al": [24, 27], "1906": 24, "01734": 24, "commutesqthroughswap": 24, "avg_node_error": 24, "op_node_error": 24, "decomposebridg": 24, "elementari": 24, "decomposeccx": 24, "decomposecxdirect": 24, "redirect": 24, "decomposecontrolledri": 24, "decomposeswap": 24, "decomposeswaptocx": 24, "optimiseclifford": 24, "dilk": 24, "simmon": 24, "sivarajah": 24, "rebasetocirq": 24, "rebasetocliffordsingl": 24, "outsid": 24, "rebasetoprojectq": 24, "rebasetopyzx": 24, "rebasetoquil": 24, "rebasetorzrx": 24, "synthesisepauligraph": 24, "synth_strat": 24, "uccsynthesi": 24, "ucc": 24, "repeatedli": [24, 27], "while_repeat": 24, "bodi": 24, "loop": [24, 27], "main": 24, "pauli_str": 25, "shot_tabl": 25, "contribut": 25, "reference_st": 25, "partition_strat": 25, "colour_method": 25, "state_circuit": 25, "psi": 25, "forc": 25, "rearrang": 25, "0625": 25, "1875": 25, "375": 25, "4375": 25, "5625": 25, "010": 25, "011": 25, "101": 25, "usefulli": 25, "fact": 25, "unmeasur": [25, 27], "c0": 25, "min_p": 25, "1e": 25, "ctr": 25, "input_arrai": 25, "capac": 25, "n_outcom": 25, "choose_indic": 25, "choos": 25, "locat": 25, "ar_dict": 25, "from_int": 25, "big_endian": 25, "from_readout": 25, "_supportsarrai": 25, "dtype": 25, "_nestedsequ": 25, "to_intlist": 25, "to_readout": 25, "1d": 25, "expr": 25, "ans\u00e4tz": 25, "variat": 25, "mathemat": 25, "sum_j": 25, "alpha_j": 25, "p_j": 25, "prototyp": 25, "molecular": 25, "langl": 25, "evolv": 25, "iht": 25, "digit": 25, "abs_tol": 25, "imaginari": 25, "magnitud": 25, "toler": 25, "priori": 25, "suit": 25, "excit": 25, "vqe": 25, "f": 25, "a_1": 25, "a_2": 25, "a_n": 25, "monoton": 25, "pauli_list": 25, "symbol_dict": 25, "scheme": 25, "infer": 25, "all_qubit": 25, "acycl": 25, "save_dag": 25, "websit": 25, "as_nx": 25, "multidigraph": 25, "get_dag": 25, "digraph": 25, "visual": 25, "get_qubit_graph": 25, "fmt": 25, "pdf": 25, "imag": 25, "actual": 25, "wide": 25, "png": 25, "save_qubit_graph": 25, "view_dag": 25, "temporari": 25, "afterward": 25, "view_qubit_graph": 25, "t0": 25, "empir": 25, "dist1": 25, "dist2": 25, "sample_mean": 25, "8888888888888888": 25, "dist3": 25, "dist4": 25, "__add__": 25, "as_count": 25, "criterion": 25, "t1": 25, "domain": 25, "inject": 25, "sample_vari": 25, "varianc": 25, "unbias": 25, "as_dict": 25, "as_rv_discret": 25, "rv_discret": 25, "stat": 25, "rv": 25, "k": [25, 27], "th": 25, "item": 25, "from_empirical_distribut": 25, "ed": 25, "convex_combin": 25, "dist": 25, "convex": 25, "neg": [25, 27], "75": 25, "compress_count": 25, "tol": 25, "06": 25, "round_to_int": 25, "statetupl": 25, "prune": 25, "countsdict": 25, "qubit_subset": 25, "calibr": 25, "restor": 25, "correl": 25, "intend": 25, "furthermor": 25, "calculate_matric": 25, "results_list": 25, "calibration_circuit": 25, "correct_count": 25, "parallel_measur": 25, "bayesian": 25, "negat": 25, "parallelmeasur": 25, "amend": 25, "get_parallel_measur": 25, "slow": 25, "poorli": 25, "veri": 25, "symgateregist": 25, "overrid": 25, "get_func": 25, "typ": 25, "immutabledensematrix": 25, "is_regist": 25, "register_func": 25, "symgatefunc": 25, "circuit_apply_symbolic_qubit": 25, "input_qb": 25, "circuit_apply_symbolic_statevector": 25, "input_st": 25, "immutablematrix": 25, "circuit_to_symbolic_g": 25, "mul": 25, "circuit_to_symbolic_unitari": 25, "filepath": 26, "check_fil": 26, "workflow": 26, "offer": 26, "function_nam": 26, "number_of_paramet": 26, "number_of_return": 26, "i32": 26, "symmetr": 27, "qtype": 27, "asymmetr": 27, "doubl": 27, "variant": 27, "distinguish": 27, "operand": 27, "n_port": 27, "continu": 27, "mix": 27, "diag": 27, "basic_wir": 27, "hbox": 27, "decompose_box": 27, "extend_at_boundary_pauli": 27, "spider": 27, "push": 27, "remove_interior_pauli": 27, "extend_for_px_output": 27, "mbqc": 27, "px": 27, "identif": 27, "gadgetise_interior_pauli": 27, "pivot": 27, "incid": 27, "internalise_gadget": 27, "xy": 27, "next": 27, "vertex": 27, "yz": 27, "io_extens": 27, "zspider": 27, "merge_gadget": 27, "parallel_h_remov": 27, "hopf": 27, "rebase_to_mbqc": 27, "expand": 27, "rebase_to_zx": 27, "xspider": 27, "red_to_green": 27, "red": 27, "green": 27, "reduce_graphlike_form": 27, "graphlik": 27, "local": 27, "complement": 27, "remove_interior_clifford": 27, "proper": 27, "odd": 27, "self_loop_remov": 27, "separate_boundari": 27, "spider_fus": 27, "to_mbqc_diag": 27, "absorb": 27, "plane": 27, "to_graphlike_form": 27, "zxdiag": 27, "classical_input": 27, "classical_output": 27, "unconnect": 27, "classical_in": 27, "classical_out": 27, "add_vertex": 27, "gen": 27, "doubleabl": 27, "add_wir": 27, "u_port": 27, "v_port": 27, "add_zxbox": 27, "inner": 27, "internalis": 27, "adj_wir": 27, "onc": 27, "semant": 27, "check_valid": 27, "attach": 27, "count_vertic": 27, "count_wir": 27, "get_boundari": 27, "get_qtyp": 27, "get_vertex_zxgen": 27, "get_wire_end": 27, "w": 27, "vertex0": 27, "port0": 27, "vertex1": 27, "port1": 27, "get_wire_qtyp": 27, "get_wire_typ": 27, "get_zxtyp": 27, "multiply_scalar": 27, "scalar": 27, "regardless": 27, "other_end": 27, "travers": 27, "remove_vertex": 27, "remove_wir": 27, "set_vertex_zxgen": 27, "set_wire_qtyp": 27, "set_wire_typ": 27, "backen": 27, "tale": 27, "to_doubled_diagram": 27, "unconjug": 27, "wire_at_port": 27, "wire_between": 27, "wires_between": 27, "n_vertic": 27, "disconnect": 27, "n_wire": 27, "depict": 27, "zh": 27, "postselect": 27, "ari": 27, "pz": 27, "admit": 27, "tip": 27}, "objects": {"pytket": [[0, 0, 0, "-", "architecture"], [3, 0, 0, "-", "circuit"], [11, 0, 0, "-", "logging"], [12, 0, 0, "-", "mapping"], [15, 0, 0, "-", "partition"], [16, 0, 0, "-", "passes"], [17, 0, 0, "-", "pauli"], [18, 0, 0, "-", "placement"], [19, 0, 0, "-", "predicates"], [22, 0, 0, "-", "tableau"], [23, 0, 0, "-", "tailoring"], [24, 0, 0, "-", "transform"], [27, 0, 0, "-", "zx"]], "pytket.architecture": [[0, 1, 1, "", "Architecture"], [0, 1, 1, "", "FullyConnected"], [0, 1, 1, "", "RingArch"], [0, 1, 1, "", "SquareGrid"]], "pytket.architecture.Architecture": [[0, 2, 1, "", "__init__"], [0, 3, 1, "", "coupling"], [0, 2, 1, "", "from_dict"], [0, 2, 1, "", "get_adjacent_nodes"], [0, 2, 1, "", "get_distance"], [0, 3, 1, "", "nodes"], [0, 2, 1, "", "to_dict"], [0, 2, 1, "", "valid_operation"]], "pytket.architecture.FullyConnected": [[0, 2, 1, "", "__init__"], [0, 2, 1, "", "from_dict"], [0, 3, 1, "", "nodes"], [0, 2, 1, "", "to_dict"]], "pytket.architecture.RingArch": [[0, 2, 1, "", "__init__"]], "pytket.architecture.SquareGrid": [[0, 2, 1, "", "__init__"], [0, 2, 1, "", "qind_to_squind"], [0, 2, 1, "", "squind_to_qind"]], "pytket.circuit": [[3, 1, 1, "", "BasisOrder"], [3, 1, 1, "", "Bit"], [3, 1, 1, "", "BitRegister"], [3, 1, 1, "", "CircBox"], [4, 1, 1, "", "Circuit"], [3, 1, 1, "", "ClassicalEvalOp"], [3, 1, 1, "", "ClassicalExpBox"], [3, 1, 1, "", "ClassicalOp"], [3, 1, 1, "", "Command"], [3, 1, 1, "", "Conditional"], [3, 1, 1, "", "CopyBitsOp"], [3, 1, 1, "", "CustomGate"], [3, 1, 1, "", "CustomGateDef"], [3, 1, 1, "", "DiagonalBox"], [3, 1, 1, "", "ExpBox"], [3, 1, 1, "", "MultiBitOp"], [3, 1, 1, "", "MultiplexedRotationBox"], [3, 1, 1, "", "MultiplexedTensoredU2Box"], [3, 1, 1, "", "MultiplexedU2Box"], [3, 1, 1, "", "MultiplexorBox"], [3, 1, 1, "", "Node"], [3, 1, 1, "", "Op"], [14, 1, 1, "", "OpType"], [3, 1, 1, "", "PauliExpBox"], [3, 1, 1, "", "PhasePolyBox"], [3, 1, 1, "", "ProjectorAssertionBox"], [3, 1, 1, "", "QControlBox"], [3, 1, 1, "", "Qubit"], [3, 1, 1, "", "QubitRegister"], [3, 1, 1, "", "RangePredicateOp"], [3, 1, 1, "", "SetBitsOp"], [3, 1, 1, "", "StabiliserAssertionBox"], [3, 1, 1, "", "StatePreparationBox"], [3, 1, 1, "", "ToffoliBox"], [3, 1, 1, "", "UnitID"], [3, 1, 1, "", "UnitType"], [3, 1, 1, "", "Unitary1qBox"], [3, 1, 1, "", "Unitary2qBox"], [3, 1, 1, "", "Unitary3qBox"], [3, 1, 1, "", "WASMOp"], [3, 5, 1, "", "fresh_symbol"]], "pytket.circuit.BasisOrder": [[3, 3, 1, "", "name"]], "pytket.circuit.Bit": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "from_list"], [3, 2, 1, "", "oldeq"], [3, 2, 1, "", "to_list"]], "pytket.circuit.BitRegister": [[3, 2, 1, "", "__getitem__"], [3, 2, 1, "", "__init__"], [3, 3, 1, "", "name"], [3, 3, 1, "", "size"]], "pytket.circuit.CircBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"]], "pytket.circuit.Circuit": [[4, 2, 1, "", "CCX"], [4, 2, 1, "", "CH"], [4, 2, 1, "", "CRx"], [4, 2, 1, "", "CRy"], [4, 2, 1, "", "CRz"], [4, 2, 1, "", "CSWAP"], [4, 2, 1, "", "CSX"], [4, 2, 1, "", "CSXdg"], [4, 2, 1, "", "CU1"], [4, 2, 1, "", "CU3"], [4, 2, 1, "", "CV"], [4, 2, 1, "", "CVdg"], [4, 2, 1, "", "CX"], [4, 2, 1, "", "CY"], [4, 2, 1, "", "CZ"], [4, 2, 1, "", "ECR"], [4, 2, 1, "", "ESWAP"], [4, 2, 1, "", "FSim"], [4, 2, 1, "", "H"], [4, 2, 1, "", "ISWAP"], [4, 2, 1, "", "ISWAPMax"], [4, 2, 1, "", "Measure"], [4, 2, 1, "", "Phase"], [4, 2, 1, "", "PhasedISWAP"], [4, 2, 1, "", "PhasedX"], [4, 2, 1, "", "Rx"], [4, 2, 1, "", "Ry"], [4, 2, 1, "", "Rz"], [4, 2, 1, "", "S"], [4, 2, 1, "", "SWAP"], [4, 2, 1, "", "SX"], [4, 2, 1, "", "SXdg"], [4, 2, 1, "", "Sdg"], [4, 2, 1, "", "Sycamore"], [4, 2, 1, "", "T"], [4, 2, 1, "", "TK1"], [4, 2, 1, "", "TK2"], [4, 2, 1, "", "Tdg"], [4, 2, 1, "", "U1"], [4, 2, 1, "", "U2"], [4, 2, 1, "", "U3"], [4, 2, 1, "", "V"], [4, 2, 1, "", "Vdg"], [4, 2, 1, "", "X"], [4, 2, 1, "", "XXPhase"], [4, 2, 1, "", "XXPhase3"], [4, 2, 1, "", "Y"], [4, 2, 1, "", "YYPhase"], [4, 2, 1, "", "Z"], [4, 2, 1, "", "ZZMax"], [4, 2, 1, "", "ZZPhase"], [4, 2, 1, "", "__eq__"], [4, 2, 1, "", "__getstate__"], [4, 4, 1, "", "__hash__"], [4, 2, 1, "", "__init__"], [4, 2, 1, "", "__iter__"], [4, 2, 1, "", "__mul__"], [4, 2, 1, "", "__repr__"], [4, 2, 1, "", "__rshift__"], [4, 2, 1, "", "__setstate__"], [4, 2, 1, "", "__str__"], [4, 2, 1, "", "add_assertion"], [4, 2, 1, "", "add_barrier"], [4, 2, 1, "", "add_bit"], [4, 2, 1, "", "add_blank_wires"], [4, 2, 1, "", "add_c_and"], [4, 2, 1, "", "add_c_and_to_registers"], [4, 2, 1, "", "add_c_copybits"], [4, 2, 1, "", "add_c_copyreg"], [4, 2, 1, "", "add_c_modifier"], [4, 2, 1, "", "add_c_not"], [4, 2, 1, "", "add_c_not_to_registers"], [4, 2, 1, "", "add_c_or"], [4, 2, 1, "", "add_c_or_to_registers"], [4, 2, 1, "", "add_c_predicate"], [4, 2, 1, "", "add_c_range_predicate"], [4, 2, 1, "", "add_c_register"], [4, 2, 1, "", "add_c_setbits"], [4, 2, 1, "", "add_c_setreg"], [4, 2, 1, "", "add_c_transform"], [4, 2, 1, "", "add_c_xor"], [4, 2, 1, "", "add_c_xor_to_registers"], [4, 2, 1, "", "add_circbox"], [4, 2, 1, "", "add_circuit"], [4, 2, 1, "", "add_classicalexpbox_bit"], [4, 2, 1, "", "add_classicalexpbox_register"], [4, 2, 1, "", "add_custom_gate"], [4, 2, 1, "", "add_diagonal_box"], [4, 2, 1, "", "add_expbox"], [4, 2, 1, "", "add_gate"], [4, 2, 1, "", "add_multiplexed_tensored_u2"], [4, 2, 1, "", "add_multiplexedrotation"], [4, 2, 1, "", "add_multiplexedu2"], [4, 2, 1, "", "add_multiplexor"], [4, 2, 1, "", "add_pauliexpbox"], [4, 2, 1, "", "add_phase"], [4, 2, 1, "", "add_phasepolybox"], [4, 2, 1, "", "add_q_register"], [4, 2, 1, "", "add_qcontrolbox"], [4, 2, 1, "", "add_qubit"], [4, 2, 1, "", "add_state_preparation_box"], [4, 2, 1, "", "add_toffolibox"], [4, 2, 1, "", "add_unitary1qbox"], [4, 2, 1, "", "add_unitary2qbox"], [4, 2, 1, "", "add_unitary3qbox"], [4, 2, 1, "", "add_wasm"], [4, 2, 1, "", "add_wasm_to_reg"], [4, 2, 1, "", "append"], [4, 3, 1, "", "bit_readout"], [4, 3, 1, "", "bits"], [4, 3, 1, "", "c_registers"], [4, 2, 1, "", "commands_of_type"], [4, 2, 1, "", "copy"], [4, 3, 1, "", "created_qubits"], [4, 2, 1, "", "dagger"], [4, 2, 1, "", "depth"], [4, 2, 1, "", "depth_by_type"], [4, 3, 1, "", "discarded_qubits"], [4, 2, 1, "", "flatten_registers"], [4, 2, 1, "", "free_symbols"], [4, 2, 1, "", "from_dict"], [4, 2, 1, "", "get_c_register"], [4, 2, 1, "", "get_commands"], [4, 2, 1, "", "get_q_register"], [4, 2, 1, "", "get_statevector"], [4, 2, 1, "", "get_unitary"], [4, 2, 1, "", "get_unitary_times_other"], [4, 2, 1, "", "implicit_qubit_permutation"], [4, 3, 1, "", "is_simple"], [4, 2, 1, "", "is_symbolic"], [4, 2, 1, "", "measure_all"], [4, 2, 1, "", "measure_register"], [4, 2, 1, "", "n_1qb_gates"], [4, 2, 1, "", "n_2qb_gates"], [4, 3, 1, "", "n_bits"], [4, 3, 1, "", "n_gates"], [4, 2, 1, "", "n_gates_of_type"], [4, 2, 1, "", "n_nqb_gates"], [4, 3, 1, "", "n_qubits"], [4, 3, 1, "", "opgroups"], [4, 2, 1, "", "ops_of_type"], [4, 3, 1, "", "phase"], [4, 3, 1, "", "q_registers"], [4, 2, 1, "", "qubit_create"], [4, 2, 1, "", "qubit_create_all"], [4, 2, 1, "", "qubit_discard"], [4, 2, 1, "", "qubit_discard_all"], [4, 2, 1, "", "qubit_is_created"], [4, 2, 1, "", "qubit_is_discarded"], [4, 3, 1, "", "qubit_readout"], [4, 3, 1, "", "qubit_to_bit_map"], [4, 3, 1, "", "qubits"], [4, 2, 1, "", "remove_blank_wires"], [4, 2, 1, "", "rename_units"], [4, 2, 1, "", "replace_SWAPs"], [4, 2, 1, "", "replace_implicit_wire_swaps"], [4, 2, 1, "", "substitute_named"], [4, 2, 1, "", "symbol_substitution"], [4, 2, 1, "", "to_dict"], [4, 2, 1, "", "to_latex_file"], [4, 2, 1, "", "transpose"], [4, 2, 1, "", "valid_connectivity"]], "pytket.circuit.ClassicalEvalOp": [[3, 2, 1, "", "__init__"]], "pytket.circuit.ClassicalExpBox": [[3, 2, 1, "", "content_equality"], [3, 2, 1, "", "get_exp"], [3, 2, 1, "", "get_n_i"], [3, 2, 1, "", "get_n_io"], [3, 2, 1, "", "get_n_o"]], "pytket.circuit.ClassicalOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "n_input_outputs"], [3, 3, 1, "", "n_inputs"], [3, 3, 1, "", "n_outputs"]], "pytket.circuit.Command": [[3, 3, 1, "", "args"], [3, 3, 1, "", "bits"], [3, 2, 1, "", "free_symbols"], [3, 3, 1, "", "op"], [3, 3, 1, "", "opgroup"], [3, 3, 1, "", "qubits"]], "pytket.circuit.Conditional": [[3, 3, 1, "", "op"], [3, 3, 1, "", "value"], [3, 3, 1, "", "width"]], "pytket.circuit.CopyBitsOp": [[3, 2, 1, "", "__init__"]], "pytket.circuit.CustomGate": [[3, 3, 1, "", "gate"], [3, 2, 1, "", "get_circuit"], [3, 3, 1, "", "name"], [3, 3, 1, "", "params"]], "pytket.circuit.CustomGateDef": [[3, 3, 1, "", "args"], [3, 3, 1, "", "arity"], [3, 2, 1, "", "define"], [3, 3, 1, "", "definition"], [3, 2, 1, "", "from_dict"], [3, 3, 1, "", "name"], [3, 2, 1, "", "to_dict"]], "pytket.circuit.DiagonalBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_diagonal"], [3, 2, 1, "", "is_upper_triangle"]], "pytket.circuit.ExpBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"]], "pytket.circuit.MultiBitOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "basic_op"]], "pytket.circuit.MultiplexedRotationBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_op_map"]], "pytket.circuit.MultiplexedTensoredU2Box": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_op_map"]], "pytket.circuit.MultiplexedU2Box": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_impl_diag"], [3, 2, 1, "", "get_op_map"]], "pytket.circuit.MultiplexorBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_op_map"]], "pytket.circuit.Node": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "from_list"], [3, 2, 1, "", "to_list"]], "pytket.circuit.Op": [[3, 2, 1, "", "create"], [3, 3, 1, "", "dagger"], [3, 2, 1, "", "free_symbols"], [3, 2, 1, "", "get_name"], [3, 2, 1, "", "get_unitary"], [3, 2, 1, "", "is_clifford_type"], [3, 2, 1, "", "is_gate"], [3, 3, 1, "", "n_qubits"], [3, 3, 1, "", "params"], [3, 3, 1, "", "transpose"], [3, 3, 1, "", "type"]], "pytket.circuit.OpType": [[14, 2, 1, "", "from_name"], [14, 3, 1, "", "name"]], "pytket.circuit.PauliExpBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_paulis"], [3, 2, 1, "", "get_phase"]], "pytket.circuit.PhasePolyBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 3, 1, "", "linear_transformation"], [3, 3, 1, "", "n_qubits"], [3, 3, 1, "", "phase_polynomial"], [3, 3, 1, "", "qubit_indices"]], "pytket.circuit.ProjectorAssertionBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_matrix"]], "pytket.circuit.QControlBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_n_controls"], [3, 2, 1, "", "get_op"]], "pytket.circuit.Qubit": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "from_list"], [3, 2, 1, "", "to_list"]], "pytket.circuit.QubitRegister": [[3, 2, 1, "", "__getitem__"], [3, 2, 1, "", "__init__"], [3, 3, 1, "", "name"], [3, 3, 1, "", "size"]], "pytket.circuit.RangePredicateOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "lower"], [3, 3, 1, "", "upper"]], "pytket.circuit.SetBitsOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "values"]], "pytket.circuit.StabiliserAssertionBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_stabilisers"]], "pytket.circuit.StatePreparationBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_statevector"], [3, 2, 1, "", "is_inverse"]], "pytket.circuit.ToffoliBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_permutation"], [3, 2, 1, "", "get_rotation_axis"]], "pytket.circuit.UnitID": [[3, 3, 1, "", "index"], [3, 3, 1, "", "reg_name"], [3, 3, 1, "", "type"]], "pytket.circuit.UnitType": [[3, 3, 1, "", "name"]], "pytket.circuit.Unitary1qBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_matrix"]], "pytket.circuit.Unitary2qBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_matrix"]], "pytket.circuit.Unitary3qBox": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "get_circuit"], [3, 2, 1, "", "get_matrix"]], "pytket.circuit.WASMOp": [[3, 2, 1, "", "__init__"], [3, 3, 1, "", "func_name"], [3, 3, 1, "", "input_widths"], [3, 3, 1, "", "n_i32"], [3, 3, 1, "", "num_bits"], [3, 3, 1, "", "num_w"], [3, 3, 1, "", "output_widths"], [3, 3, 1, "", "wasm_uid"]], "pytket.logging": [[11, 1, 1, "", "level"], [11, 5, 1, "", "set_level"]], "pytket.logging.level": [[11, 3, 1, "", "name"]], "pytket.mapping": [[12, 1, 1, "", "AASLabellingMethod"], [12, 1, 1, "", "AASRouteRoutingMethod"], [12, 1, 1, "", "BoxDecompositionRoutingMethod"], [12, 1, 1, "", "LexiLabellingMethod"], [12, 1, 1, "", "LexiRouteRoutingMethod"], [12, 1, 1, "", "MappingManager"], [12, 1, 1, "", "MultiGateReorderRoutingMethod"], [12, 1, 1, "", "RoutingMethod"], [12, 1, 1, "", "RoutingMethodCircuit"]], "pytket.mapping.AASLabellingMethod": [[12, 2, 1, "", "__init__"]], "pytket.mapping.AASRouteRoutingMethod": [[12, 2, 1, "", "__init__"]], "pytket.mapping.BoxDecompositionRoutingMethod": [[12, 2, 1, "", "__init__"]], "pytket.mapping.LexiLabellingMethod": [[12, 2, 1, "", "__init__"]], "pytket.mapping.LexiRouteRoutingMethod": [[12, 2, 1, "", "__init__"]], "pytket.mapping.MappingManager": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "route_circuit"]], "pytket.mapping.MultiGateReorderRoutingMethod": [[12, 2, 1, "", "__init__"]], "pytket.mapping.RoutingMethod": [[12, 2, 1, "", "__init__"]], "pytket.mapping.RoutingMethodCircuit": [[12, 2, 1, "", "__init__"]], "pytket.partition": [[15, 1, 1, "", "GraphColourMethod"], [15, 1, 1, "", "MeasurementBitMap"], [15, 1, 1, "", "MeasurementSetup"], [15, 1, 1, "", "PauliPartitionStrat"], [15, 5, 1, "", "measurement_reduction"], [15, 5, 1, "", "term_sequence"]], "pytket.partition.GraphColourMethod": [[15, 2, 1, "", "__init__"], [15, 3, 1, "", "name"]], "pytket.partition.MeasurementBitMap": [[15, 2, 1, "", "__init__"], [15, 3, 1, "", "bits"], [15, 3, 1, "", "circ_index"], [15, 2, 1, "", "from_dict"], [15, 3, 1, "", "invert"], [15, 2, 1, "", "to_dict"]], "pytket.partition.MeasurementSetup": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "add_measurement_circuit"], [15, 2, 1, "", "add_result_for_term"], [15, 2, 1, "", "from_dict"], [15, 3, 1, "", "measurement_circs"], [15, 3, 1, "", "results"], [15, 2, 1, "", "to_dict"], [15, 2, 1, "", "verify"]], "pytket.partition.PauliPartitionStrat": [[15, 2, 1, "", "__init__"], [15, 3, 1, "", "name"]], "pytket.passes": [[16, 5, 1, "", "AASRouting"], [16, 1, 1, "", "BasePass"], [16, 1, 1, "", "CNotSynthType"], [16, 5, 1, "", "CXMappingPass"], [16, 5, 1, "", "CliffordSimp"], [16, 5, 1, "", "CnXPairwiseDecomposition"], [16, 5, 1, "", "CommuteThroughMultis"], [16, 5, 1, "", "ComposePhasePolyBoxes"], [16, 5, 1, "", "ContextSimp"], [16, 5, 1, "", "CustomPass"], [16, 5, 1, "", "CustomRoutingPass"], [16, 5, 1, "", "DecomposeArbitrarilyControlledGates"], [16, 5, 1, "", "DecomposeBoxes"], [16, 5, 1, "", "DecomposeClassicalExp"], [16, 5, 1, "", "DecomposeMultiQubitsCX"], [16, 5, 1, "", "DecomposeSingleQubitsTK1"], [16, 5, 1, "", "DecomposeSwapsToCXs"], [16, 5, 1, "", "DecomposeSwapsToCircuit"], [16, 5, 1, "", "DecomposeTK2"], [16, 5, 1, "", "DefaultMappingPass"], [16, 5, 1, "", "DelayMeasures"], [16, 5, 1, "", "EulerAngleReduction"], [16, 5, 1, "", "FlattenRegisters"], [16, 5, 1, "", "FlattenRelabelRegistersPass"], [16, 5, 1, "", "FullMappingPass"], [16, 5, 1, "", "FullPeepholeOptimise"], [16, 5, 1, "", "GlobalisePhasedX"], [16, 5, 1, "", "GuidedPauliSimp"], [16, 5, 1, "", "KAKDecomposition"], [16, 5, 1, "", "NaivePlacementPass"], [16, 5, 1, "", "NormaliseTK2"], [16, 5, 1, "", "OptimisePhaseGadgets"], [16, 5, 1, "", "PauliSimp"], [16, 5, 1, "", "PauliSquash"], [16, 5, 1, "", "PeepholeOptimise2Q"], [16, 5, 1, "", "PlacementPass"], [16, 5, 1, "", "RebaseCustom"], [16, 5, 1, "", "RebaseTket"], [16, 5, 1, "", "RemoveBarriers"], [16, 5, 1, "", "RemoveDiscarded"], [16, 5, 1, "", "RemoveImplicitQubitPermutation"], [16, 5, 1, "", "RemoveRedundancies"], [16, 5, 1, "", "RenameQubitsPass"], [16, 1, 1, "", "RepeatPass"], [16, 1, 1, "", "RepeatUntilSatisfiedPass"], [16, 1, 1, "", "RepeatWithMetricPass"], [16, 5, 1, "", "RoundAngles"], [16, 5, 1, "", "RoutingPass"], [16, 1, 1, "", "SafetyMode"], [16, 1, 1, "", "SequencePass"], [16, 5, 1, "", "SimplifyInitial"], [16, 5, 1, "", "SimplifyMeasured"], [16, 5, 1, "", "SquashCustom"], [16, 5, 1, "", "SquashRzPhasedX"], [16, 5, 1, "", "SquashTK1"], [16, 5, 1, "", "SynthesiseHQS"], [16, 5, 1, "", "SynthesiseOQC"], [16, 5, 1, "", "SynthesiseTK"], [16, 5, 1, "", "SynthesiseTket"], [16, 5, 1, "", "SynthesiseUMD"], [16, 5, 1, "", "ThreeQubitSquash"], [16, 5, 1, "", "ZXGraphlikeOptimisation"], [16, 5, 1, "", "ZZPhaseToRz"]], "pytket.passes.BasePass": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "apply"], [16, 2, 1, "", "from_dict"], [16, 2, 1, "", "to_dict"]], "pytket.passes.CNotSynthType": [[16, 2, 1, "", "__init__"], [16, 3, 1, "", "name"]], "pytket.passes.RepeatPass": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "get_pass"]], "pytket.passes.RepeatUntilSatisfiedPass": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "get_pass"], [16, 2, 1, "", "get_predicate"]], "pytket.passes.RepeatWithMetricPass": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "get_metric"], [16, 2, 1, "", "get_pass"]], "pytket.passes.SafetyMode": [[16, 2, 1, "", "__init__"], [16, 3, 1, "", "name"]], "pytket.passes.SequencePass": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "get_sequence"]], "pytket.pauli": [[17, 1, 1, "", "Pauli"], [17, 1, 1, "", "PauliStabiliser"], [17, 1, 1, "", "QubitPauliString"], [17, 5, 1, "", "pauli_string_mult"]], "pytket.pauli.Pauli": [[17, 2, 1, "", "__init__"], [17, 3, 1, "", "name"]], "pytket.pauli.PauliStabiliser": [[17, 2, 1, "", "__init__"], [17, 3, 1, "", "coeff"], [17, 3, 1, "", "string"]], "pytket.pauli.QubitPauliString": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "commutes_with"], [17, 2, 1, "", "compress"], [17, 2, 1, "", "dot_state"], [17, 2, 1, "", "from_list"], [17, 3, 1, "", "map"], [17, 2, 1, "", "state_expectation"], [17, 2, 1, "", "to_list"], [17, 2, 1, "", "to_sparse_matrix"]], "pytket.placement": [[18, 1, 1, "", "GraphPlacement"], [18, 1, 1, "", "LinePlacement"], [18, 1, 1, "", "NoiseAwarePlacement"], [18, 1, 1, "", "Placement"], [18, 5, 1, "", "place_fully_connected"], [18, 5, 1, "", "place_with_map"]], "pytket.placement.GraphPlacement": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "modify_config"]], "pytket.placement.LinePlacement": [[18, 2, 1, "", "__init__"]], "pytket.placement.NoiseAwarePlacement": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "modify_config"]], "pytket.placement.Placement": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "from_dict"], [18, 2, 1, "", "get_placement_map"], [18, 2, 1, "", "get_placement_maps"], [18, 2, 1, "", "place"], [18, 2, 1, "", "place_with_map"], [18, 2, 1, "", "to_dict"]], "pytket.predicates": [[19, 1, 1, "", "CliffordCircuitPredicate"], [19, 1, 1, "", "CommutableMeasuresPredicate"], [19, 1, 1, "", "CompilationUnit"], [19, 1, 1, "", "ConnectivityPredicate"], [19, 1, 1, "", "DefaultRegisterPredicate"], [19, 1, 1, "", "DirectednessPredicate"], [19, 1, 1, "", "GateSetPredicate"], [19, 1, 1, "", "MaxNClRegPredicate"], [19, 1, 1, "", "MaxNQubitsPredicate"], [19, 1, 1, "", "MaxTwoQubitGatesPredicate"], [19, 1, 1, "", "NoBarriersPredicate"], [19, 1, 1, "", "NoClassicalBitsPredicate"], [19, 1, 1, "", "NoClassicalControlPredicate"], [19, 1, 1, "", "NoFastFeedforwardPredicate"], [19, 1, 1, "", "NoMidMeasurePredicate"], [19, 1, 1, "", "NoSymbolsPredicate"], [19, 1, 1, "", "NoWireSwapsPredicate"], [19, 1, 1, "", "NormalisedTK2Predicate"], [19, 1, 1, "", "PlacementPredicate"], [19, 1, 1, "", "Predicate"], [19, 1, 1, "", "UserDefinedPredicate"]], "pytket.predicates.CliffordCircuitPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.CommutableMeasuresPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.CompilationUnit": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "check_all_predicates"], [19, 3, 1, "", "circuit"], [19, 3, 1, "", "final_map"], [19, 3, 1, "", "initial_map"]], "pytket.predicates.ConnectivityPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.DefaultRegisterPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.DirectednessPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.GateSetPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.MaxNClRegPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.MaxNQubitsPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.MaxTwoQubitGatesPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.NoBarriersPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.NoClassicalBitsPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.NoClassicalControlPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.NoFastFeedforwardPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.NoMidMeasurePredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.NoSymbolsPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.NoWireSwapsPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.NormalisedTK2Predicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.PlacementPredicate": [[19, 2, 1, "", "__init__"]], "pytket.predicates.Predicate": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "from_dict"], [19, 2, 1, "", "implies"], [19, 2, 1, "", "to_dict"], [19, 2, 1, "", "verify"]], "pytket.predicates.UserDefinedPredicate": [[19, 2, 1, "", "__init__"]], "pytket.tableau": [[22, 1, 1, "", "UnitaryTableau"], [22, 1, 1, "", "UnitaryTableauBox"]], "pytket.tableau.UnitaryTableau": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "apply_gate_at_end"], [22, 2, 1, "", "apply_gate_at_front"], [22, 2, 1, "", "get_row_product"], [22, 2, 1, "", "get_xrow"], [22, 2, 1, "", "get_zrow"]], "pytket.tableau.UnitaryTableauBox": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "get_circuit"], [22, 2, 1, "", "get_tableau"]], "pytket.tailoring": [[23, 1, 1, "", "FrameRandomisation"], [23, 1, 1, "", "PauliFrameRandomisation"], [23, 1, 1, "", "UniversalFrameRandomisation"], [23, 5, 1, "", "apply_clifford_basis_change"]], "pytket.tailoring.FrameRandomisation": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "get_all_circuits"], [23, 2, 1, "", "sample_circuits"]], "pytket.tailoring.PauliFrameRandomisation": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "get_all_circuits"], [23, 2, 1, "", "sample_circuits"]], "pytket.tailoring.UniversalFrameRandomisation": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "get_all_circuits"], [23, 2, 1, "", "sample_circuits"]], "pytket.transform": [[24, 1, 1, "", "CXConfigType"], [24, 1, 1, "", "PauliSynthStrat"], [24, 1, 1, "", "Transform"], [24, 5, 1, "", "separate_classical"]], "pytket.transform.CXConfigType": [[24, 2, 1, "", "__init__"], [24, 3, 1, "", "name"]], "pytket.transform.PauliSynthStrat": [[24, 2, 1, "", "__init__"], [24, 3, 1, "", "name"]], "pytket.transform.Transform": [[24, 2, 1, "", "CnXPairwiseDecomposition"], [24, 2, 1, "", "CommuteSQThroughSWAP"], [24, 2, 1, "", "CommuteThroughMultis"], [24, 2, 1, "", "DecomposeBRIDGE"], [24, 2, 1, "", "DecomposeBoxes"], [24, 2, 1, "", "DecomposeCCX"], [24, 2, 1, "", "DecomposeCXDirected"], [24, 2, 1, "", "DecomposeControlledRys"], [24, 2, 1, "", "DecomposeNPhasedX"], [24, 2, 1, "", "DecomposeSWAP"], [24, 2, 1, "", "DecomposeSWAPtoCX"], [24, 2, 1, "", "DecomposeTK2"], [24, 2, 1, "", "GlobalisePhasedX"], [24, 2, 1, "", "KAKDecomposition"], [24, 2, 1, "", "NormaliseTK2"], [24, 2, 1, "", "OptimiseCliffords"], [24, 2, 1, "", "OptimisePauliGadgets"], [24, 2, 1, "", "OptimisePhaseGadgets"], [24, 2, 1, "", "OptimisePostRouting"], [24, 2, 1, "", "OptimiseStandard"], [24, 2, 1, "", "RebaseToCirq"], [24, 2, 1, "", "RebaseToCliffordSingles"], [24, 2, 1, "", "RebaseToProjectQ"], [24, 2, 1, "", "RebaseToPyZX"], [24, 2, 1, "", "RebaseToQuil"], [24, 2, 1, "", "RebaseToRzRx"], [24, 2, 1, "", "RebaseToTket"], [24, 2, 1, "", "ReduceSingles"], [24, 2, 1, "", "RemoveRedundancies"], [24, 2, 1, "", "SynthesisePauliGraph"], [24, 2, 1, "", "ThreeQubitSquash"], [24, 2, 1, "", "UCCSynthesis"], [24, 2, 1, "", "ZZPhaseToRz"], [24, 2, 1, "", "__init__"], [24, 2, 1, "", "apply"], [24, 2, 1, "", "repeat"], [24, 2, 1, "", "round_angles"], [24, 2, 1, "", "sequence"], [24, 2, 1, "", "while_repeat"]], "pytket.zx": [[27, 1, 1, "", "CliffordGen"], [27, 1, 1, "", "DirectedGen"], [27, 1, 1, "", "PhasedGen"], [27, 1, 1, "", "QuantumType"], [27, 1, 1, "", "Rewrite"], [27, 1, 1, "", "ZXBox"], [27, 1, 1, "", "ZXDiagram"], [27, 1, 1, "", "ZXGen"], [27, 1, 1, "", "ZXType"], [27, 1, 1, "", "ZXVert"], [27, 1, 1, "", "ZXWire"], [27, 1, 1, "", "ZXWireType"], [27, 5, 1, "", "circuit_to_zx"]], "pytket.zx.CliffordGen": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "param"]], "pytket.zx.DirectedGen": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "n_ports"], [27, 3, 1, "", "signature"]], "pytket.zx.PhasedGen": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "param"]], "pytket.zx.QuantumType": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "name"]], "pytket.zx.Rewrite": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "apply"], [27, 2, 1, "", "basic_wires"], [27, 2, 1, "", "decompose_boxes"], [27, 2, 1, "", "extend_at_boundary_paulis"], [27, 2, 1, "", "extend_for_PX_outputs"], [27, 2, 1, "", "gadgetise_interior_paulis"], [27, 2, 1, "", "internalise_gadgets"], [27, 2, 1, "", "io_extension"], [27, 2, 1, "", "merge_gadgets"], [27, 2, 1, "", "parallel_h_removal"], [27, 2, 1, "", "rebase_to_mbqc"], [27, 2, 1, "", "rebase_to_zx"], [27, 2, 1, "", "red_to_green"], [27, 2, 1, "", "reduce_graphlike_form"], [27, 2, 1, "", "remove_interior_cliffords"], [27, 2, 1, "", "remove_interior_paulis"], [27, 2, 1, "", "repeat"], [27, 2, 1, "", "self_loop_removal"], [27, 2, 1, "", "separate_boundaries"], [27, 2, 1, "", "sequence"], [27, 2, 1, "", "spider_fusion"], [27, 2, 1, "", "to_MBQC_diag"], [27, 2, 1, "", "to_graphlike_form"]], "pytket.zx.ZXBox": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "diagram"], [27, 3, 1, "", "n_ports"], [27, 3, 1, "", "signature"]], "pytket.zx.ZXDiagram": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "add_vertex"], [27, 2, 1, "", "add_wire"], [27, 2, 1, "", "add_zxbox"], [27, 2, 1, "", "adj_wires"], [27, 2, 1, "", "check_validity"], [27, 2, 1, "", "count_vertices"], [27, 2, 1, "", "count_wires"], [27, 2, 1, "", "degree"], [27, 2, 1, "", "free_symbols"], [27, 2, 1, "", "get_boundary"], [27, 2, 1, "", "get_name"], [27, 2, 1, "", "get_qtype"], [27, 2, 1, "", "get_vertex_ZXGen"], [27, 2, 1, "", "get_wire_ends"], [27, 2, 1, "", "get_wire_qtype"], [27, 2, 1, "", "get_wire_type"], [27, 2, 1, "", "get_zxtype"], [27, 2, 1, "", "is_symbolic"], [27, 2, 1, "", "multiply_scalar"], [27, 3, 1, "", "n_vertices"], [27, 3, 1, "", "n_wires"], [27, 2, 1, "", "neighbours"], [27, 2, 1, "", "other_end"], [27, 2, 1, "", "remove_vertex"], [27, 2, 1, "", "remove_wire"], [27, 3, 1, "", "scalar"], [27, 2, 1, "", "set_vertex_ZXGen"], [27, 2, 1, "", "set_wire_qtype"], [27, 2, 1, "", "set_wire_type"], [27, 2, 1, "", "symbol_substitution"], [27, 2, 1, "", "to_circuit"], [27, 2, 1, "", "to_doubled_diagram"], [27, 2, 1, "", "to_graphviz_str"], [27, 3, 1, "", "vertices"], [27, 2, 1, "", "wire_at_port"], [27, 2, 1, "", "wire_between"], [27, 3, 1, "", "wires"], [27, 2, 1, "", "wires_between"]], "pytket.zx.ZXGen": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "create"], [27, 3, 1, "", "qtype"], [27, 3, 1, "", "type"]], "pytket.zx.ZXType": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "name"]], "pytket.zx.ZXVert": [[27, 2, 1, "", "__init__"]], "pytket.zx.ZXWire": [[27, 2, 1, "", "__init__"]], "pytket.zx.ZXWireType": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "name"]], "pytket": [[1, 0, 0, "-", "backends"], [6, 0, 0, "-", "config"], [20, 0, 0, "-", "qasm"], [21, 0, 0, "-", "quipper"], [25, 0, 0, "-", "utils"], [26, 0, 0, "-", "wasm"]], "pytket.backends": [[1, 1, 1, "", "Backend"], [1, 0, 0, "-", "backendinfo"], [1, 0, 0, "-", "backendresult"], [1, 0, 0, "-", "resulthandle"], [1, 0, 0, "-", "status"]], "pytket.backends.Backend": [[1, 2, 1, "", "__init__"], [1, 2, 1, "", "available_devices"], [1, 3, 1, "", "backend_info"], [1, 2, 1, "", "cancel"], [1, 2, 1, "", "circuit_status"], [1, 2, 1, "", "default_compilation_pass"], [1, 2, 1, "", "empty_cache"], [1, 3, 1, "", "expectation_allows_nonhermitian"], [1, 2, 1, "", "get_compiled_circuit"], [1, 2, 1, "", "get_compiled_circuits"], [1, 2, 1, "", "get_result"], [1, 2, 1, "", "get_results"], [1, 3, 1, "", "persistent_handles"], [1, 2, 1, "", "pop_result"], [1, 2, 1, "", "process_circuit"], [1, 2, 1, "", "process_circuits"], [1, 2, 1, "", "rebase_pass"], [1, 3, 1, "", "required_predicates"], [1, 2, 1, "", "run_circuit"], [1, 2, 1, "", "run_circuits"], [1, 3, 1, "", "supports_contextual_optimisation"], [1, 3, 1, "", "supports_counts"], [1, 3, 1, "", "supports_density_matrix"], [1, 3, 1, "", "supports_expectation"], [1, 3, 1, "", "supports_shots"], [1, 3, 1, "", "supports_state"], [1, 3, 1, "", "supports_unitary"], [1, 2, 1, "", "valid_circuit"]], "pytket.backends.backendinfo": [[1, 1, 1, "", "BackendInfo"]], "pytket.backends.backendinfo.BackendInfo": [[1, 2, 1, "", "add_misc"], [1, 2, 1, "", "from_dict"], [1, 2, 1, "", "get_misc"], [1, 3, 1, "", "n_nodes"], [1, 3, 1, "", "nodes"], [1, 2, 1, "", "to_dict"]], "pytket.backends.backendresult": [[1, 1, 1, "", "BackendResult"], [1, 1, 1, "", "StoredResult"]], "pytket.backends.backendresult.BackendResult": [[1, 3, 1, "", "contains_measured_results"], [1, 3, 1, "", "contains_state_results"], [1, 2, 1, "", "from_dict"], [1, 2, 1, "", "get_bitlist"], [1, 2, 1, "", "get_counts"], [1, 2, 1, "", "get_debug_info"], [1, 2, 1, "", "get_density_matrix"], [1, 2, 1, "", "get_distribution"], [1, 2, 1, "", "get_empirical_distribution"], [1, 2, 1, "", "get_probability_distribution"], [1, 2, 1, "", "get_qbitlist"], [1, 2, 1, "", "get_result"], [1, 2, 1, "", "get_shots"], [1, 2, 1, "", "get_state"], [1, 2, 1, "", "get_unitary"], [1, 2, 1, "", "to_dict"]], "pytket.backends.backendresult.StoredResult": [[1, 4, 1, "", "counts"], [1, 4, 1, "", "density_matrix"], [1, 4, 1, "", "shots"], [1, 4, 1, "", "state"], [1, 4, 1, "", "unitary"]], "pytket.backends.resulthandle": [[1, 1, 1, "", "ResultHandle"]], "pytket.backends.resulthandle.ResultHandle": [[1, 2, 1, "", "from_str"]], "pytket.backends.status": [[1, 1, 1, "", "CircuitStatus"], [1, 1, 1, "", "StatusEnum"]], "pytket.backends.status.CircuitStatus": [[1, 4, 1, "", "cancelled_time"], [1, 4, 1, "", "completed_time"], [1, 4, 1, "", "error_detail"], [1, 4, 1, "", "error_time"], [1, 2, 1, "", "from_dict"], [1, 4, 1, "", "message"], [1, 4, 1, "", "queue_position"], [1, 4, 1, "", "queued_time"], [1, 4, 1, "", "running_time"], [1, 4, 1, "", "status"], [1, 4, 1, "", "submitted_time"], [1, 2, 1, "", "to_dict"]], "pytket.circuit": [[7, 0, 0, "-", "display"], [5, 0, 0, "-", "logic_exp"]], "pytket.circuit.display": [[7, 1, 1, "", "CircuitRenderer"], [7, 5, 1, "", "get_circuit_renderer"]], "pytket.circuit.display.CircuitRenderer": [[7, 2, 1, "", "get_render_options"], [7, 2, 1, "", "render_circuit_as_html"], [7, 2, 1, "", "render_circuit_jupyter"], [7, 2, 1, "", "set_render_options"], [7, 2, 1, "", "view_browser"]], "pytket.circuit.logic_exp": [[5, 1, 1, "", "And"], [5, 1, 1, "", "BinaryOp"], [5, 1, 1, "", "BitAnd"], [5, 1, 1, "", "BitEq"], [5, 1, 1, "", "BitLogicExp"], [5, 1, 1, "", "BitNeq"], [5, 1, 1, "", "BitNot"], [5, 1, 1, "", "BitOr"], [5, 1, 1, "", "BitWiseOp"], [5, 1, 1, "", "BitXor"], [5, 4, 1, "", "ConstPredicate"], [5, 1, 1, "", "Eq"], [5, 1, 1, "", "LogicExp"], [5, 1, 1, "", "Neq"], [5, 1, 1, "", "Or"], [5, 1, 1, "", "PredicateExp"], [5, 1, 1, "", "RegAdd"], [5, 1, 1, "", "RegAnd"], [5, 1, 1, "", "RegDiv"], [5, 1, 1, "", "RegEq"], [5, 1, 1, "", "RegGeq"], [5, 1, 1, "", "RegGt"], [5, 1, 1, "", "RegLeq"], [5, 1, 1, "", "RegLogicExp"], [5, 1, 1, "", "RegLsh"], [5, 1, 1, "", "RegLt"], [5, 1, 1, "", "RegMul"], [5, 1, 1, "", "RegNeg"], [5, 1, 1, "", "RegNeq"], [5, 1, 1, "", "RegNot"], [5, 1, 1, "", "RegOr"], [5, 1, 1, "", "RegPow"], [5, 1, 1, "", "RegRsh"], [5, 1, 1, "", "RegSub"], [5, 1, 1, "", "RegWiseOp"], [5, 1, 1, "", "RegXor"], [5, 1, 1, "", "UnaryOp"], [5, 1, 1, "", "Xor"], [5, 5, 1, "", "filter_by_type"], [5, 5, 1, "", "if_bit"], [5, 5, 1, "", "if_not_bit"], [5, 5, 1, "", "reg_eq"], [5, 5, 1, "", "reg_geq"], [5, 5, 1, "", "reg_gt"], [5, 5, 1, "", "reg_leq"], [5, 5, 1, "", "reg_lt"], [5, 5, 1, "", "reg_neq"]], "pytket.circuit.logic_exp.And": [[5, 2, 1, "", "eval_vals"]], "pytket.circuit.logic_exp.BitOr": [[5, 2, 1, "", "eval_vals"]], "pytket.circuit.logic_exp.LogicExp": [[5, 2, 1, "", "all_inputs"], [5, 2, 1, "", "eval_vals"], [5, 2, 1, "", "factory"], [5, 2, 1, "", "from_dict"], [5, 2, 1, "", "rename_args"], [5, 2, 1, "", "set_value"], [5, 2, 1, "", "to_dict"]], "pytket.config": [[6, 5, 1, "", "get_config_file_path"], [6, 5, 1, "", "load_config_file"], [6, 5, 1, "", "write_config_file"]], "pytket.config.pytket_config": [[6, 1, 1, "", "PytketConfig"], [6, 1, 1, "", "PytketExtConfig"]], "pytket.config.pytket_config.PytketConfig": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "default"], [6, 2, 1, "", "read_file"], [6, 2, 1, "", "write_file"]], "pytket.config.pytket_config.PytketExtConfig": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "from_default_config_file"], [6, 2, 1, "", "from_extension_dict"], [6, 2, 1, "", "from_pytketconfig"], [6, 2, 1, "", "to_dict"], [6, 2, 1, "", "update_default_config_file"], [6, 2, 1, "", "update_pytket_config"]], "pytket.passes": [[16, 0, 0, "-", "auto_rebase"], [16, 0, 0, "-", "script"]], "pytket.passes.auto_rebase": [[16, 5, 1, "", "auto_rebase_pass"], [16, 5, 1, "", "auto_squash_pass"]], "pytket.passes.script": [[16, 5, 1, "", "compilation_pass_from_script"], [16, 5, 1, "", "compilation_pass_grammar"]], "pytket.qasm": [[20, 5, 1, "", "circuit_from_qasm"], [20, 5, 1, "", "circuit_from_qasm_io"], [20, 5, 1, "", "circuit_from_qasm_str"], [20, 5, 1, "", "circuit_from_qasm_wasm"], [20, 5, 1, "", "circuit_to_qasm"], [20, 5, 1, "", "circuit_to_qasm_io"], [20, 5, 1, "", "circuit_to_qasm_str"]], "pytket.quipper": [[21, 5, 1, "", "circuit_from_quipper"]], "pytket.utils": [[25, 1, 1, "", "Graph"], [25, 1, 1, "", "OutcomeArray"], [25, 1, 1, "", "QubitPauliOperator"], [25, 5, 1, "", "append_pauli_measurement"], [25, 5, 1, "", "compare_statevectors"], [25, 5, 1, "", "compare_unitaries"], [25, 5, 1, "", "counts_from_shot_table"], [25, 0, 0, "-", "distribution"], [25, 5, 1, "", "expectation_from_counts"], [25, 5, 1, "", "expectation_from_shots"], [25, 5, 1, "", "gen_term_sequence_circuit"], [25, 5, 1, "", "get_operator_expectation_value"], [25, 5, 1, "", "get_pauli_expectation_value"], [25, 5, 1, "", "permute_basis_indexing"], [25, 5, 1, "", "permute_qubits_in_statevector"], [25, 5, 1, "", "permute_rows_cols_in_unitary"], [25, 5, 1, "", "prepare_circuit"], [25, 5, 1, "", "probs_from_counts"], [25, 5, 1, "", "probs_from_state"], [25, 5, 1, "", "readout_counts"], [25, 0, 0, "-", "spam"], [25, 0, 0, "-", "symbolic"]], "pytket.utils.Graph": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "as_nx"], [25, 2, 1, "", "get_DAG"], [25, 2, 1, "", "get_qubit_graph"], [25, 2, 1, "", "save_DAG"], [25, 2, 1, "", "save_qubit_graph"], [25, 2, 1, "", "view_DAG"], [25, 2, 1, "", "view_qubit_graph"]], "pytket.utils.OutcomeArray": [[25, 2, 1, "", "choose_indices"], [25, 2, 1, "", "counts"], [25, 2, 1, "", "from_dict"], [25, 2, 1, "", "from_ints"], [25, 2, 1, "", "from_readouts"], [25, 3, 1, "", "n_outcomes"], [25, 2, 1, "", "to_dict"], [25, 2, 1, "", "to_intlist"], [25, 2, 1, "", "to_readout"], [25, 2, 1, "", "to_readouts"], [25, 3, 1, "", "width"]], "pytket.utils.QubitPauliOperator": [[25, 2, 1, "", "__init__"], [25, 3, 1, "", "all_qubits"], [25, 2, 1, "", "compress"], [25, 2, 1, "", "dot_state"], [25, 2, 1, "", "from_list"], [25, 2, 1, "", "state_expectation"], [25, 2, 1, "", "subs"], [25, 2, 1, "", "to_list"], [25, 2, 1, "", "to_sparse_matrix"]], "pytket.utils.distribution": [[25, 1, 1, "", "EmpiricalDistribution"], [25, 1, 1, "", "ProbabilityDistribution"], [25, 5, 1, "", "convex_combination"]], "pytket.utils.distribution.EmpiricalDistribution": [[25, 2, 1, "", "__add__"], [25, 2, 1, "", "__eq__"], [25, 2, 1, "", "__getitem__"], [25, 2, 1, "", "as_counter"], [25, 2, 1, "", "condition"], [25, 2, 1, "", "map"], [25, 2, 1, "", "sample_mean"], [25, 2, 1, "", "sample_variance"], [25, 3, 1, "", "support"], [25, 3, 1, "", "total"]], "pytket.utils.distribution.ProbabilityDistribution": [[25, 2, 1, "", "__getitem__"], [25, 2, 1, "", "as_dict"], [25, 2, 1, "", "as_rv_discrete"], [25, 2, 1, "", "condition"], [25, 2, 1, "", "expectation"], [25, 2, 1, "", "from_empirical_distribution"], [25, 2, 1, "", "map"], [25, 3, 1, "", "support"], [25, 2, 1, "", "variance"]], "pytket.utils.spam": [[25, 1, 1, "", "SpamCorrecter"], [25, 5, 1, "", "compress_counts"]], "pytket.utils.spam.SpamCorrecter": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "calculate_matrices"], [25, 2, 1, "", "calibration_circuits"], [25, 2, 1, "", "correct_counts"], [25, 2, 1, "", "from_dict"], [25, 2, 1, "", "get_parallel_measure"], [25, 2, 1, "", "to_dict"]], "pytket.utils.symbolic": [[25, 1, 1, "", "SymGateRegister"], [25, 5, 1, "", "circuit_apply_symbolic_qubit"], [25, 5, 1, "", "circuit_apply_symbolic_statevector"], [25, 5, 1, "", "circuit_to_symbolic_gates"], [25, 5, 1, "", "circuit_to_symbolic_unitary"]], "pytket.utils.symbolic.SymGateRegister": [[25, 2, 1, "", "get_func"], [25, 2, 1, "", "is_registered"], [25, 2, 1, "", "register_func"]], "pytket.wasm": [[26, 1, 1, "", "WasmFileHandler"]], "pytket.wasm.WasmFileHandler": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "__repr__"], [26, 2, 1, "", "__str__"], [26, 2, 1, "", "check_function"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"]}, "titleterms": {"pytket": [0, 1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], "architectur": 0, "backend": 1, "resulthandl": 1, "backendresult": 1, "statu": 1, "backendinfo": 1, "changelog": 2, "1": 2, "15": 2, "0": 2, "mai": 2, "2023": 2, "14": 2, "april": 2, "13": 2, "2": 2, "march": 2, "11": 2, "januari": 2, "10": 2, "decemb": 2, "2022": 2, "9": 2, "novemb": 2, "8": 2, "7": 2, "3": 2, "octob": 2, "6": 2, "septemb": 2, "5": 2, "august": 2, "4": 2, "juli": 2, "june": 2, "19": 2, "februari": 2, "18": 2, "17": 2, "2021": 2, "16": 2, "12": 2, "2020": 2, "2019": 2, "2018": 2, "circuit": [3, 4, 5, 7, 14], "class": 3, "logic_exp": 5, "config": 6, "displai": 7, "exampl": 7, "usag": 7, "get": [8, 10], "start": 8, "extens": 9, "how": 9, "cite": 9, "user": 9, "support": 9, "licenc": 9, "introduct": 9, "more": 9, "document": 9, "api": 9, "refer": 9, "indic": 9, "tabl": 9, "instal": 10, "troubleshoot": 10, "gener": 10, "instruct": 10, "frequent": 10, "ask": 10, "question": 10, "i": 10, "build": 10, "my": 10, "system": 10, "do": 10, "all": 10, "version": 10, "work": 10, "window": 10, "modul": 10, "mention": 10, "doc": 10, "could": 10, "found": 10, "why": 10, "when": 10, "ran": 10, "pip": 10, "onli": 10, "an": 10, "old": 10, "what": 10, "give": 10, "ve": 10, "tri": 10, "recommend": 10, "action": 10, "here": 10, "still": 10, "won": 10, "t": 10, "can": 10, "log": 11, "map": 12, "open": 13, "sourc": 13, "attribut": 13, "symengin": 13, "eigen": 13, "optyp": 14, "partit": 15, "pass": 16, "script": 16, "auto_rebas": 16, "pauli": 17, "placement": 18, "predic": 19, "qasm": 20, "quipper": 21, "tableau": 22, "tailor": 23, "transform": 24, "util": 25, "distribut": 25, "spam": 25, "symbol": 25, "wasm": 26, "zx": 27}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"pytket.architecture": [[0, "module-pytket.architecture"]], "pytket.backends": [[1, "pytket-backends"]], "pytket.backends.backend": [[1, "pytket-backends-backend"]], "pytket.backends.resulthandle": [[1, "module-pytket.backends.resulthandle"]], "pytket.backends.backendresult": [[1, "module-pytket.backends.backendresult"]], "pytket.backends.status": [[1, "module-pytket.backends.status"]], "pytket.backends.backendinfo": [[1, "module-pytket.backends.backendinfo"]], "Changelog": [[2, "changelog"]], "1.15.0 (May 2023)": [[2, "may-2023"]], "1.14.0 (April 2023)": [[2, "april-2023"]], "1.13.2 (March 2023)": [[2, "march-2023"]], "1.13.1 (March 2023)": [[2, "id1"]], "1.13.0 (March 2023)": [[2, "id2"]], "1.11.1 (January 2023)": [[2, "january-2023"]], "1.11.0 (January 2023)": [[2, "id5"]], "1.10.0 (December 2022)": [[2, "december-2022"]], "1.9.1 (December 2022)": [[2, "id6"]], "1.9.0 (November 2022)": [[2, "november-2022"]], "1.8.1 (November 2022)": [[2, "id7"]], "1.8.0 (November 2022)": [[2, "id8"]], "1.7.3 (October 2022)": [[2, "october-2022"]], "1.6.1 (September 2022)": [[2, "september-2022"]], "1.6.0 (September 2022)": [[2, "id9"]], "1.5.2 (August 2022)": [[2, "august-2022"]], "1.5.1 (August 2022)": [[2, "id12"]], "1.5.0 (August 2022)": [[2, "id13"]], "1.4.3 (July 2022)": [[2, "july-2022"]], "1.4.2 (July 2022)": [[2, "id14"]], "1.4.1 (July 2022)": [[2, "id15"]], "1.3.0 (June 2022)": [[2, "june-2022"]], "1.2.2 (May 2022)": [[2, "may-2022"]], "1.2.1 (May 2022)": [[2, "id16"]], "1.1.0 (April 2022)": [[2, "april-2022"]], "1.0.1 (March 2022)": [[2, "march-2022"]], "1.0.0 (March 2022)": [[2, "id17"]], "0.19.2 (February 2022)": [[2, "february-2022"]], "0.19.1 (February 2022)": [[2, "id18"]], "0.19.0 (February 2022)": [[2, "id19"]], "0.18.0 (January 2022)": [[2, "january-2022"]], "0.17.0 (November 2021)": [[2, "november-2021"]], "0.16.0 (October 2021)": [[2, "october-2021"]], "0.15.0 (September 2021)": [[2, "september-2021"]], "0.14.0 (September 2021)": [[2, "id20"]], "0.13.0 (July 2021)": [[2, "july-2021"]], "0.12.0 (June 2021)": [[2, "june-2021"]], "0.11.0 (May 2021)": [[2, "may-2021"]], "0.10.1 (May 2021)": [[2, "id21"]], "0.10.0 (April 2021)": [[2, "april-2021"]], "0.9.0 (March 2021)": [[2, "march-2021"]], "0.8.0 (March 2021)": [[2, "id22"]], "0.7.2 (February 2021)": [[2, "february-2021"]], "0.7.1 (February 2021)": [[2, "id23"]], "0.7.0 (February 2021)": [[2, "id24"]], "0.6.1 (October 2020)": [[2, "october-2020"]], "0.6.0 (September 2020)": [[2, "september-2020"]], "0.5.7 (August 2020)": [[2, "august-2020"]], "0.5.5 (June 2020)": [[2, "june-2020"]], "0.5.4 (May 2020)": [[2, "may-2020"]], "0.5.2 (April 2020)": [[2, "april-2020"]], "0.4.1 (December 2019)": [[2, "december-2019"]], "0.4.0 (November 2019)": [[2, "november-2019"]], "0.3.0 (August 2019)": [[2, "august-2019"]], "0.2.3 (July 2019)": [[2, "july-2019"]], "0.2.2 (June 2019)": [[2, "june-2019"]], "0.2.1 (June 2019)": [[2, "id25"]], "0.2.0 (June 2019)": [[2, "id26"]], "0.1.6 (April 2019)": [[2, "april-2019"]], "0.1.5 (April 2019)": [[2, "id27"]], "0.1.4 (April 2019)": [[2, "id28"]], "0.1.3 (March 2019)": [[2, "march-2019"]], "0.1.2 (February 2019)": [[2, "february-2019"]], "0.1.0 (December 2018)": [[2, "december-2018"]], "0.0.1 (July 2018)": [[2, "july-2018"]], "pytket.circuit": [[3, "pytket-circuit"]], "Classes:": [[3, null]], "pytket.circuit.Circuit": [[4, "pytket-circuit-circuit"]], "pytket.circuit.logic_exp": [[5, "pytket-circuit-logic-exp"]], "pytket.config": [[6, "module-pytket.config"]], "pytket.circuit.display": [[7, "pytket-circuit-display"]], "Example usage:": [[7, "example-usage"]], "Getting Started": [[8, "getting-started"]], "pytket": [[9, "pytket"]], "Extensions": [[9, "extensions"]], "How to cite": [[9, "how-to-cite"]], "User Support": [[9, "user-support"]], "LICENCE": [[9, "licence"]], "Introduction:": [[9, null]], "More Documentation:": [[9, null]], "API Reference:": [[9, null]], "Indices and tables": [[9, "indices-and-tables"]], "Installation Troubleshooting": [[10, "installation-troubleshooting"]], "General Installation Instructions": [[10, "general-installation-instructions"]], "Frequently Asked Questions": [[10, "frequently-asked-questions"]], "Is there a build of pytket for my system?": [[10, "is-there-a-build-of-pytket-for-my-system"]], "Do all versions of pytket work with Windows?": [[10, "do-all-versions-of-pytket-work-with-windows"]], "pytket installed but modules mentioned in the docs could not be found. Why?": [[10, "pytket-installed-but-modules-mentioned-in-the-docs-could-not-be-found-why"]], "When I ran pip install pytket, I could only get an old version. What gives?": [[10, "when-i-ran-pip-install-pytket-i-could-only-get-an-old-version-what-gives"]], "I\u2019ve tried the recommended actions here and it still won\u2019t work! What can I do?": [[10, "i-ve-tried-the-recommended-actions-here-and-it-still-won-t-work-what-can-i-do"]], "pytket.logging": [[11, "module-pytket.logging"]], "pytket.mapping": [[12, "module-pytket.mapping"]], "Open Source Attribution": [[13, "open-source-attribution"]], "Symengine": [[13, "symengine"]], "Eigen": [[13, "eigen"]], "pytket.circuit.OpType": [[14, "pytket-circuit-optype"]], "pytket.partition": [[15, "module-pytket.partition"]], "pytket.passes": [[16, "pytket-passes"]], "pytket.passes.script": [[16, "module-pytket.passes.script"]], "pytket.passes.auto_rebase": [[16, "module-pytket.passes.auto_rebase"]], "pytket.pauli": [[17, "module-pytket.pauli"]], "pytket.placement": [[18, "pytket-placement"]], "pytket.predicates": [[19, "pytket-predicates"]], "pytket.qasm": [[20, "pytket-qasm"]], "pytket.quipper": [[21, "module-pytket.quipper"]], "pytket.tableau": [[22, "module-pytket.tableau"]], "pytket.tailoring": [[23, "module-pytket.tailoring"]], "pytket.transform": [[24, "module-pytket.transform"]], "pytket.utils": [[25, "module-pytket.utils"]], "pytket.utils.distribution": [[25, "pytket-utils-distribution"]], "pytket.utils.spam": [[25, "module-pytket.utils.spam"]], "pytket.utils.symbolic": [[25, "module-pytket.utils.symbolic"]], "pytket.wasm": [[26, "module-pytket.wasm"]], "pytket.zx": [[27, "module-pytket.zx"]]}, "indexentries": {"architecture (class in pytket.architecture)": [[0, "pytket.architecture.Architecture"]], "fullyconnected (class in pytket.architecture)": [[0, "pytket.architecture.FullyConnected"]], "ringarch (class in pytket.architecture)": [[0, "pytket.architecture.RingArch"]], "squaregrid (class in pytket.architecture)": [[0, "pytket.architecture.SquareGrid"]], "__init__() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.__init__"]], "__init__() (pytket.architecture.fullyconnected method)": [[0, "pytket.architecture.FullyConnected.__init__"]], "__init__() (pytket.architecture.ringarch method)": [[0, "pytket.architecture.RingArch.__init__"]], "__init__() (pytket.architecture.squaregrid method)": [[0, "pytket.architecture.SquareGrid.__init__"]], "coupling (pytket.architecture.architecture property)": [[0, "pytket.architecture.Architecture.coupling"]], "from_dict() (pytket.architecture.architecture static method)": [[0, "pytket.architecture.Architecture.from_dict"]], "from_dict() (pytket.architecture.fullyconnected static method)": [[0, "pytket.architecture.FullyConnected.from_dict"]], "get_adjacent_nodes() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.get_adjacent_nodes"]], "get_distance() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.get_distance"]], "module": [[0, "module-pytket.architecture"], [1, "module-pytket.backends"], [1, "module-pytket.backends.backendinfo"], [1, "module-pytket.backends.backendresult"], [1, "module-pytket.backends.resulthandle"], [1, "module-pytket.backends.status"], [3, "module-pytket.circuit"], [5, "module-pytket.circuit.logic_exp"], [6, "module-pytket.config"], [7, "module-pytket.circuit.display"], [11, "module-pytket.logging"], [12, "module-pytket.mapping"], [15, "module-pytket.partition"], [16, "module-pytket.passes"], [16, "module-pytket.passes.auto_rebase"], [16, "module-pytket.passes.script"], [17, "module-pytket.pauli"], [18, "module-pytket.placement"], [19, "module-pytket.predicates"], [20, "module-pytket.qasm"], [21, "module-pytket.quipper"], [22, "module-pytket.tableau"], [23, "module-pytket.tailoring"], [24, "module-pytket.transform"], [25, "module-pytket.utils"], [25, "module-pytket.utils.distribution"], [25, "module-pytket.utils.spam"], [25, "module-pytket.utils.symbolic"], [26, "module-pytket.wasm"], [27, "module-pytket.zx"]], "nodes (pytket.architecture.architecture property)": [[0, "pytket.architecture.Architecture.nodes"]], "nodes (pytket.architecture.fullyconnected property)": [[0, "pytket.architecture.FullyConnected.nodes"]], "pytket.architecture": [[0, "module-pytket.architecture"]], "qind_to_squind() (pytket.architecture.squaregrid method)": [[0, "pytket.architecture.SquareGrid.qind_to_squind"]], "squind_to_qind() (pytket.architecture.squaregrid method)": [[0, "pytket.architecture.SquareGrid.squind_to_qind"]], "to_dict() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.to_dict"]], "to_dict() (pytket.architecture.fullyconnected method)": [[0, "pytket.architecture.FullyConnected.to_dict"]], "valid_operation() (pytket.architecture.architecture method)": [[0, "pytket.architecture.Architecture.valid_operation"]], "backend (class in pytket.backends)": [[1, "pytket.backends.Backend"]], "backendinfo (class in pytket.backends.backendinfo)": [[1, "pytket.backends.backendinfo.BackendInfo"]], "backendresult (class in pytket.backends.backendresult)": [[1, "pytket.backends.backendresult.BackendResult"]], "circuitstatus (class in pytket.backends.status)": [[1, "pytket.backends.status.CircuitStatus"]], "resulthandle (class in pytket.backends.resulthandle)": [[1, "pytket.backends.resulthandle.ResultHandle"]], "statusenum (class in pytket.backends.status)": [[1, "pytket.backends.status.StatusEnum"]], "storedresult (class in pytket.backends.backendresult)": [[1, "pytket.backends.backendresult.StoredResult"]], "__init__() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.__init__"]], "add_misc() (pytket.backends.backendinfo.backendinfo method)": [[1, "pytket.backends.backendinfo.BackendInfo.add_misc"]], "available_devices() (pytket.backends.backend class method)": [[1, "pytket.backends.Backend.available_devices"]], "backend_info (pytket.backends.backend property)": [[1, "pytket.backends.Backend.backend_info"]], "cancel() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.cancel"]], "cancelled_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.cancelled_time"]], "circuit_status() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.circuit_status"]], "completed_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.completed_time"]], "contains_measured_results (pytket.backends.backendresult.backendresult property)": [[1, "pytket.backends.backendresult.BackendResult.contains_measured_results"]], "contains_state_results (pytket.backends.backendresult.backendresult property)": [[1, "pytket.backends.backendresult.BackendResult.contains_state_results"]], "counts (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.counts"]], "default_compilation_pass() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.default_compilation_pass"]], "density_matrix (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.density_matrix"]], "empty_cache() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.empty_cache"]], "error_detail (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.error_detail"]], "error_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.error_time"]], "expectation_allows_nonhermitian (pytket.backends.backend property)": [[1, "pytket.backends.Backend.expectation_allows_nonhermitian"]], "from_dict() (pytket.backends.backendinfo.backendinfo class method)": [[1, "pytket.backends.backendinfo.BackendInfo.from_dict"]], "from_dict() (pytket.backends.backendresult.backendresult class method)": [[1, "pytket.backends.backendresult.BackendResult.from_dict"]], "from_dict() (pytket.backends.status.circuitstatus class method)": [[1, "pytket.backends.status.CircuitStatus.from_dict"]], "from_str() (pytket.backends.resulthandle.resulthandle class method)": [[1, "pytket.backends.resulthandle.ResultHandle.from_str"]], "get_bitlist() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_bitlist"]], "get_compiled_circuit() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.get_compiled_circuit"]], "get_compiled_circuits() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.get_compiled_circuits"]], "get_counts() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_counts"]], "get_debug_info() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_debug_info"]], "get_density_matrix() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_density_matrix"]], "get_distribution() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_distribution"]], "get_empirical_distribution() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_empirical_distribution"]], "get_misc() (pytket.backends.backendinfo.backendinfo method)": [[1, "pytket.backends.backendinfo.BackendInfo.get_misc"]], "get_probability_distribution() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_probability_distribution"]], "get_qbitlist() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_qbitlist"]], "get_result() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.get_result"]], "get_result() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_result"]], "get_results() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.get_results"]], "get_shots() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_shots"]], "get_state() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_state"]], "get_unitary() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.get_unitary"]], "message (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.message"]], "n_nodes (pytket.backends.backendinfo.backendinfo property)": [[1, "pytket.backends.backendinfo.BackendInfo.n_nodes"]], "nodes (pytket.backends.backendinfo.backendinfo property)": [[1, "pytket.backends.backendinfo.BackendInfo.nodes"]], "persistent_handles (pytket.backends.backend property)": [[1, "pytket.backends.Backend.persistent_handles"]], "pop_result() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.pop_result"]], "process_circuit() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.process_circuit"]], "process_circuits() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.process_circuits"]], "pytket.backends": [[1, "module-pytket.backends"]], "pytket.backends.backendinfo": [[1, "module-pytket.backends.backendinfo"]], "pytket.backends.backendresult": [[1, "module-pytket.backends.backendresult"]], "pytket.backends.resulthandle": [[1, "module-pytket.backends.resulthandle"]], "pytket.backends.status": [[1, "module-pytket.backends.status"]], "queue_position (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.queue_position"]], "queued_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.queued_time"]], "rebase_pass() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.rebase_pass"]], "required_predicates (pytket.backends.backend property)": [[1, "pytket.backends.Backend.required_predicates"]], "run_circuit() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.run_circuit"]], "run_circuits() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.run_circuits"]], "running_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.running_time"]], "shots (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.shots"]], "state (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.state"]], "status (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.status"]], "submitted_time (pytket.backends.status.circuitstatus attribute)": [[1, "pytket.backends.status.CircuitStatus.submitted_time"]], "supports_contextual_optimisation (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_contextual_optimisation"]], "supports_counts (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_counts"]], "supports_density_matrix (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_density_matrix"]], "supports_expectation (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_expectation"]], "supports_shots (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_shots"]], "supports_state (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_state"]], "supports_unitary (pytket.backends.backend property)": [[1, "pytket.backends.Backend.supports_unitary"]], "to_dict() (pytket.backends.backendinfo.backendinfo method)": [[1, "pytket.backends.backendinfo.BackendInfo.to_dict"]], "to_dict() (pytket.backends.backendresult.backendresult method)": [[1, "pytket.backends.backendresult.BackendResult.to_dict"]], "to_dict() (pytket.backends.status.circuitstatus method)": [[1, "pytket.backends.status.CircuitStatus.to_dict"]], "unitary (pytket.backends.backendresult.storedresult attribute)": [[1, "pytket.backends.backendresult.StoredResult.unitary"]], "valid_circuit() (pytket.backends.backend method)": [[1, "pytket.backends.Backend.valid_circuit"]], "basisorder (class in pytket.circuit)": [[3, "pytket.circuit.BasisOrder"]], "bit (class in pytket.circuit)": [[3, "pytket.circuit.Bit"]], "bitregister (class in pytket.circuit)": [[3, "pytket.circuit.BitRegister"]], "circbox (class in pytket.circuit)": [[3, "pytket.circuit.CircBox"]], "classicalevalop (class in pytket.circuit)": [[3, "pytket.circuit.ClassicalEvalOp"]], "classicalexpbox (class in pytket.circuit)": [[3, "pytket.circuit.ClassicalExpBox"]], "classicalop (class in pytket.circuit)": [[3, "pytket.circuit.ClassicalOp"]], "command (class in pytket.circuit)": [[3, "pytket.circuit.Command"]], "conditional (class in pytket.circuit)": [[3, "pytket.circuit.Conditional"]], "copybitsop (class in pytket.circuit)": [[3, "pytket.circuit.CopyBitsOp"]], "customgate (class in pytket.circuit)": [[3, "pytket.circuit.CustomGate"]], "customgatedef (class in pytket.circuit)": [[3, "pytket.circuit.CustomGateDef"]], "diagonalbox (class in pytket.circuit)": [[3, "pytket.circuit.DiagonalBox"]], "expbox (class in pytket.circuit)": [[3, "pytket.circuit.ExpBox"]], "multibitop (class in pytket.circuit)": [[3, "pytket.circuit.MultiBitOp"]], "multiplexedrotationbox (class in pytket.circuit)": [[3, "pytket.circuit.MultiplexedRotationBox"]], "multiplexedtensoredu2box (class in pytket.circuit)": [[3, "pytket.circuit.MultiplexedTensoredU2Box"]], "multiplexedu2box (class in pytket.circuit)": [[3, "pytket.circuit.MultiplexedU2Box"]], "multiplexorbox (class in pytket.circuit)": [[3, "pytket.circuit.MultiplexorBox"]], "node (class in pytket.circuit)": [[3, "pytket.circuit.Node"]], "op (class in pytket.circuit)": [[3, "pytket.circuit.Op"]], "pauliexpbox (class in pytket.circuit)": [[3, "pytket.circuit.PauliExpBox"]], "phasepolybox (class in pytket.circuit)": [[3, "pytket.circuit.PhasePolyBox"]], "projectorassertionbox (class in pytket.circuit)": [[3, "pytket.circuit.ProjectorAssertionBox"]], "qcontrolbox (class in pytket.circuit)": [[3, "pytket.circuit.QControlBox"]], "qubit (class in pytket.circuit)": [[3, "pytket.circuit.Qubit"]], "qubitregister (class in pytket.circuit)": [[3, "pytket.circuit.QubitRegister"]], "rangepredicateop (class in pytket.circuit)": [[3, "pytket.circuit.RangePredicateOp"]], "setbitsop (class in pytket.circuit)": [[3, "pytket.circuit.SetBitsOp"]], "stabiliserassertionbox (class in pytket.circuit)": [[3, "pytket.circuit.StabiliserAssertionBox"]], "statepreparationbox (class in pytket.circuit)": [[3, "pytket.circuit.StatePreparationBox"]], "toffolibox (class in pytket.circuit)": [[3, "pytket.circuit.ToffoliBox"]], "unitid (class in pytket.circuit)": [[3, "pytket.circuit.UnitID"]], "unittype (class in pytket.circuit)": [[3, "pytket.circuit.UnitType"]], "unitary1qbox (class in pytket.circuit)": [[3, "pytket.circuit.Unitary1qBox"]], "unitary2qbox (class in pytket.circuit)": [[3, "pytket.circuit.Unitary2qBox"]], "unitary3qbox (class in pytket.circuit)": [[3, "pytket.circuit.Unitary3qBox"]], "wasmop (class in pytket.circuit)": [[3, "pytket.circuit.WASMOp"]], "__getitem__() (pytket.circuit.bitregister method)": [[3, "pytket.circuit.BitRegister.__getitem__"]], "__getitem__() (pytket.circuit.qubitregister method)": [[3, "pytket.circuit.QubitRegister.__getitem__"]], "__init__() (pytket.circuit.bit method)": [[3, "pytket.circuit.Bit.__init__"]], "__init__() (pytket.circuit.bitregister method)": [[3, "pytket.circuit.BitRegister.__init__"]], "__init__() (pytket.circuit.circbox method)": [[3, "pytket.circuit.CircBox.__init__"]], "__init__() (pytket.circuit.classicalevalop method)": [[3, "pytket.circuit.ClassicalEvalOp.__init__"]], "__init__() (pytket.circuit.classicalop method)": [[3, "pytket.circuit.ClassicalOp.__init__"]], "__init__() (pytket.circuit.copybitsop method)": [[3, "pytket.circuit.CopyBitsOp.__init__"]], "__init__() (pytket.circuit.diagonalbox method)": [[3, "pytket.circuit.DiagonalBox.__init__"]], "__init__() (pytket.circuit.expbox method)": [[3, "pytket.circuit.ExpBox.__init__"]], "__init__() (pytket.circuit.multibitop method)": [[3, "pytket.circuit.MultiBitOp.__init__"]], "__init__() (pytket.circuit.multiplexedrotationbox method)": [[3, "pytket.circuit.MultiplexedRotationBox.__init__"]], "__init__() (pytket.circuit.multiplexedtensoredu2box method)": [[3, "pytket.circuit.MultiplexedTensoredU2Box.__init__"]], "__init__() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.__init__"]], "__init__() (pytket.circuit.multiplexorbox method)": [[3, "pytket.circuit.MultiplexorBox.__init__"]], "__init__() (pytket.circuit.node method)": [[3, "pytket.circuit.Node.__init__"]], "__init__() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.__init__"]], "__init__() (pytket.circuit.phasepolybox method)": [[3, "pytket.circuit.PhasePolyBox.__init__"]], "__init__() (pytket.circuit.projectorassertionbox method)": [[3, "pytket.circuit.ProjectorAssertionBox.__init__"]], "__init__() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.__init__"]], "__init__() (pytket.circuit.qubit method)": [[3, "pytket.circuit.Qubit.__init__"]], "__init__() (pytket.circuit.qubitregister method)": [[3, "pytket.circuit.QubitRegister.__init__"]], "__init__() (pytket.circuit.rangepredicateop method)": [[3, "pytket.circuit.RangePredicateOp.__init__"]], "__init__() (pytket.circuit.setbitsop method)": [[3, "pytket.circuit.SetBitsOp.__init__"]], "__init__() (pytket.circuit.stabiliserassertionbox method)": [[3, "pytket.circuit.StabiliserAssertionBox.__init__"]], "__init__() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.__init__"]], "__init__() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.__init__"]], "__init__() (pytket.circuit.unitary1qbox method)": [[3, "pytket.circuit.Unitary1qBox.__init__"]], "__init__() (pytket.circuit.unitary2qbox method)": [[3, "pytket.circuit.Unitary2qBox.__init__"]], "__init__() (pytket.circuit.unitary3qbox method)": [[3, "pytket.circuit.Unitary3qBox.__init__"]], "__init__() (pytket.circuit.wasmop method)": [[3, "pytket.circuit.WASMOp.__init__"]], "args (pytket.circuit.command property)": [[3, "pytket.circuit.Command.args"]], "args (pytket.circuit.customgatedef property)": [[3, "pytket.circuit.CustomGateDef.args"]], "arity (pytket.circuit.customgatedef property)": [[3, "pytket.circuit.CustomGateDef.arity"]], "basic_op (pytket.circuit.multibitop property)": [[3, "pytket.circuit.MultiBitOp.basic_op"]], "bits (pytket.circuit.command property)": [[3, "pytket.circuit.Command.bits"]], "content_equality() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.content_equality"]], "create() (pytket.circuit.op static method)": [[3, "pytket.circuit.Op.create"]], "dagger (pytket.circuit.op property)": [[3, "pytket.circuit.Op.dagger"]], "define() (pytket.circuit.customgatedef static method)": [[3, "pytket.circuit.CustomGateDef.define"]], "definition (pytket.circuit.customgatedef property)": [[3, "pytket.circuit.CustomGateDef.definition"]], "free_symbols() (pytket.circuit.command method)": [[3, "pytket.circuit.Command.free_symbols"]], "free_symbols() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.free_symbols"]], "fresh_symbol() (in module pytket.circuit)": [[3, "pytket.circuit.fresh_symbol"]], "from_dict() (pytket.circuit.customgatedef static method)": [[3, "pytket.circuit.CustomGateDef.from_dict"]], "from_list() (pytket.circuit.bit static method)": [[3, "pytket.circuit.Bit.from_list"]], "from_list() (pytket.circuit.node static method)": [[3, "pytket.circuit.Node.from_list"]], "from_list() (pytket.circuit.qubit static method)": [[3, "pytket.circuit.Qubit.from_list"]], "func_name (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.func_name"]], "gate (pytket.circuit.customgate property)": [[3, "pytket.circuit.CustomGate.gate"]], "get_circuit() (pytket.circuit.circbox method)": [[3, "pytket.circuit.CircBox.get_circuit"]], "get_circuit() (pytket.circuit.customgate method)": [[3, "pytket.circuit.CustomGate.get_circuit"]], "get_circuit() (pytket.circuit.diagonalbox method)": [[3, "pytket.circuit.DiagonalBox.get_circuit"]], "get_circuit() (pytket.circuit.expbox method)": [[3, "pytket.circuit.ExpBox.get_circuit"]], "get_circuit() (pytket.circuit.multiplexedrotationbox method)": [[3, "pytket.circuit.MultiplexedRotationBox.get_circuit"]], "get_circuit() (pytket.circuit.multiplexedtensoredu2box method)": [[3, "pytket.circuit.MultiplexedTensoredU2Box.get_circuit"]], "get_circuit() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.get_circuit"]], "get_circuit() (pytket.circuit.multiplexorbox method)": [[3, "pytket.circuit.MultiplexorBox.get_circuit"]], "get_circuit() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.get_circuit"]], "get_circuit() (pytket.circuit.phasepolybox method)": [[3, "pytket.circuit.PhasePolyBox.get_circuit"]], "get_circuit() (pytket.circuit.projectorassertionbox method)": [[3, "pytket.circuit.ProjectorAssertionBox.get_circuit"]], "get_circuit() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.get_circuit"]], "get_circuit() (pytket.circuit.stabiliserassertionbox method)": [[3, "pytket.circuit.StabiliserAssertionBox.get_circuit"]], "get_circuit() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.get_circuit"]], "get_circuit() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.get_circuit"]], "get_circuit() (pytket.circuit.unitary1qbox method)": [[3, "pytket.circuit.Unitary1qBox.get_circuit"]], "get_circuit() (pytket.circuit.unitary2qbox method)": [[3, "pytket.circuit.Unitary2qBox.get_circuit"]], "get_circuit() (pytket.circuit.unitary3qbox method)": [[3, "pytket.circuit.Unitary3qBox.get_circuit"]], "get_diagonal() (pytket.circuit.diagonalbox method)": [[3, "pytket.circuit.DiagonalBox.get_diagonal"]], "get_exp() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.get_exp"]], "get_impl_diag() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.get_impl_diag"]], "get_matrix() (pytket.circuit.projectorassertionbox method)": [[3, "pytket.circuit.ProjectorAssertionBox.get_matrix"]], "get_matrix() (pytket.circuit.unitary1qbox method)": [[3, "pytket.circuit.Unitary1qBox.get_matrix"]], "get_matrix() (pytket.circuit.unitary2qbox method)": [[3, "pytket.circuit.Unitary2qBox.get_matrix"]], "get_matrix() (pytket.circuit.unitary3qbox method)": [[3, "pytket.circuit.Unitary3qBox.get_matrix"]], "get_n_controls() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.get_n_controls"]], "get_n_i() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.get_n_i"]], "get_n_io() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.get_n_io"]], "get_n_o() (pytket.circuit.classicalexpbox method)": [[3, "pytket.circuit.ClassicalExpBox.get_n_o"]], "get_name() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.get_name"]], "get_op() (pytket.circuit.qcontrolbox method)": [[3, "pytket.circuit.QControlBox.get_op"]], "get_op_map() (pytket.circuit.multiplexedrotationbox method)": [[3, "pytket.circuit.MultiplexedRotationBox.get_op_map"]], "get_op_map() (pytket.circuit.multiplexedtensoredu2box method)": [[3, "pytket.circuit.MultiplexedTensoredU2Box.get_op_map"]], "get_op_map() (pytket.circuit.multiplexedu2box method)": [[3, "pytket.circuit.MultiplexedU2Box.get_op_map"]], "get_op_map() (pytket.circuit.multiplexorbox method)": [[3, "pytket.circuit.MultiplexorBox.get_op_map"]], "get_paulis() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.get_paulis"]], "get_permutation() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.get_permutation"]], "get_phase() (pytket.circuit.pauliexpbox method)": [[3, "pytket.circuit.PauliExpBox.get_phase"]], "get_rotation_axis() (pytket.circuit.toffolibox method)": [[3, "pytket.circuit.ToffoliBox.get_rotation_axis"]], "get_stabilisers() (pytket.circuit.stabiliserassertionbox method)": [[3, "pytket.circuit.StabiliserAssertionBox.get_stabilisers"]], "get_statevector() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.get_statevector"]], "get_unitary() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.get_unitary"]], "index (pytket.circuit.unitid property)": [[3, "pytket.circuit.UnitID.index"]], "input_widths (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.input_widths"]], "is_clifford_type() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.is_clifford_type"]], "is_gate() (pytket.circuit.op method)": [[3, "pytket.circuit.Op.is_gate"]], "is_inverse() (pytket.circuit.statepreparationbox method)": [[3, "pytket.circuit.StatePreparationBox.is_inverse"]], "is_upper_triangle() (pytket.circuit.diagonalbox method)": [[3, "pytket.circuit.DiagonalBox.is_upper_triangle"]], "linear_transformation (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.linear_transformation"]], "lower (pytket.circuit.rangepredicateop property)": [[3, "pytket.circuit.RangePredicateOp.lower"]], "n_i32 (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.n_i32"]], "n_input_outputs (pytket.circuit.classicalop property)": [[3, "pytket.circuit.ClassicalOp.n_input_outputs"]], "n_inputs (pytket.circuit.classicalop property)": [[3, "pytket.circuit.ClassicalOp.n_inputs"]], "n_outputs (pytket.circuit.classicalop property)": [[3, "pytket.circuit.ClassicalOp.n_outputs"]], "n_qubits (pytket.circuit.op property)": [[3, "pytket.circuit.Op.n_qubits"]], "n_qubits (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.n_qubits"]], "name (pytket.circuit.basisorder property)": [[3, "pytket.circuit.BasisOrder.name"]], "name (pytket.circuit.bitregister property)": [[3, "pytket.circuit.BitRegister.name"]], "name (pytket.circuit.customgate property)": [[3, "pytket.circuit.CustomGate.name"]], "name (pytket.circuit.customgatedef property)": [[3, "pytket.circuit.CustomGateDef.name"]], "name (pytket.circuit.qubitregister property)": [[3, "pytket.circuit.QubitRegister.name"]], "name (pytket.circuit.unittype property)": [[3, "pytket.circuit.UnitType.name"]], "num_bits (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.num_bits"]], "num_w (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.num_w"]], "oldeq() (pytket.circuit.bit method)": [[3, "pytket.circuit.Bit.oldeq"]], "op (pytket.circuit.command property)": [[3, "pytket.circuit.Command.op"]], "op (pytket.circuit.conditional property)": [[3, "pytket.circuit.Conditional.op"]], "opgroup (pytket.circuit.command property)": [[3, "pytket.circuit.Command.opgroup"]], "output_widths (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.output_widths"]], "params (pytket.circuit.customgate property)": [[3, "pytket.circuit.CustomGate.params"]], "params (pytket.circuit.op property)": [[3, "pytket.circuit.Op.params"]], "phase_polynomial (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.phase_polynomial"]], "pytket.circuit": [[3, "module-pytket.circuit"]], "qubit_indices (pytket.circuit.phasepolybox property)": [[3, "pytket.circuit.PhasePolyBox.qubit_indices"]], "qubits (pytket.circuit.command property)": [[3, "pytket.circuit.Command.qubits"]], "reg_name (pytket.circuit.unitid property)": [[3, "pytket.circuit.UnitID.reg_name"]], "size (pytket.circuit.bitregister property)": [[3, "pytket.circuit.BitRegister.size"]], "size (pytket.circuit.qubitregister property)": [[3, "pytket.circuit.QubitRegister.size"]], "to_dict() (pytket.circuit.customgatedef method)": [[3, "pytket.circuit.CustomGateDef.to_dict"]], "to_list() (pytket.circuit.bit method)": [[3, "pytket.circuit.Bit.to_list"]], "to_list() (pytket.circuit.node method)": [[3, "pytket.circuit.Node.to_list"]], "to_list() (pytket.circuit.qubit method)": [[3, "pytket.circuit.Qubit.to_list"]], "transpose (pytket.circuit.op property)": [[3, "pytket.circuit.Op.transpose"]], "type (pytket.circuit.op property)": [[3, "pytket.circuit.Op.type"]], "type (pytket.circuit.unitid property)": [[3, "pytket.circuit.UnitID.type"]], "upper (pytket.circuit.rangepredicateop property)": [[3, "pytket.circuit.RangePredicateOp.upper"]], "value (pytket.circuit.conditional property)": [[3, "pytket.circuit.Conditional.value"]], "values (pytket.circuit.setbitsop property)": [[3, "pytket.circuit.SetBitsOp.values"]], "wasm_uid (pytket.circuit.wasmop property)": [[3, "pytket.circuit.WASMOp.wasm_uid"]], "width (pytket.circuit.conditional property)": [[3, "pytket.circuit.Conditional.width"]], "ccx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CCX"]], "ch() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CH"]], "crx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CRx"]], "cry() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CRy"]], "crz() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CRz"]], "cswap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CSWAP"]], "csx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CSX"]], "csxdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CSXdg"]], "cu1() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CU1"]], "cu3() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CU3"]], "cv() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CV"]], "cvdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CVdg"]], "cx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CX"]], "cy() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CY"]], "cz() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.CZ"]], "circuit (class in pytket.circuit)": [[4, "pytket.circuit.Circuit"]], "ecr() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ECR"]], "eswap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ESWAP"]], "fsim() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.FSim"]], "h() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.H"]], "iswap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ISWAP"]], "iswapmax() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ISWAPMax"]], "measure() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Measure"]], "phase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Phase"]], "phasediswap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.PhasedISWAP"]], "phasedx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.PhasedX"]], "rx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Rx"]], "ry() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Ry"]], "rz() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Rz"]], "s() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.S"]], "swap() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.SWAP"]], "sx() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.SX"]], "sxdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.SXdg"]], "sdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Sdg"]], "sycamore() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Sycamore"]], "t() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.T"]], "tk1() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.TK1"]], "tk2() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.TK2"]], "tdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Tdg"]], "u1() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.U1"]], "u2() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.U2"]], "u3() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.U3"]], "v() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.V"]], "vdg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Vdg"]], "x() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.X"]], "xxphase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.XXPhase"]], "xxphase3() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.XXPhase3"]], "y() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Y"]], "yyphase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.YYPhase"]], "z() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.Z"]], "zzmax() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ZZMax"]], "zzphase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ZZPhase"]], "__eq__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__eq__"]], "__getstate__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__getstate__"]], "__hash__ (pytket.circuit.circuit attribute)": [[4, "pytket.circuit.Circuit.__hash__"]], "__init__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__init__"]], "__iter__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__iter__"]], "__mul__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__mul__"]], "__repr__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__repr__"]], "__rshift__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__rshift__"]], "__setstate__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__setstate__"]], "__str__() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.__str__"]], "add_assertion() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_assertion"]], "add_barrier() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_barrier"]], "add_bit() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_bit"]], "add_blank_wires() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_blank_wires"]], "add_c_and() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_and"]], "add_c_and_to_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_and_to_registers"]], "add_c_copybits() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_copybits"]], "add_c_copyreg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_copyreg"]], "add_c_modifier() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_modifier"]], "add_c_not() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_not"]], "add_c_not_to_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_not_to_registers"]], "add_c_or() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_or"]], "add_c_or_to_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_or_to_registers"]], "add_c_predicate() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_predicate"]], "add_c_range_predicate() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_range_predicate"]], "add_c_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_register"]], "add_c_setbits() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_setbits"]], "add_c_setreg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_setreg"]], "add_c_transform() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_transform"]], "add_c_xor() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_xor"]], "add_c_xor_to_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_c_xor_to_registers"]], "add_circbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_circbox"]], "add_circuit() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_circuit"]], "add_classicalexpbox_bit() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_classicalexpbox_bit"]], "add_classicalexpbox_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_classicalexpbox_register"]], "add_custom_gate() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_custom_gate"]], "add_diagonal_box() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_diagonal_box"]], "add_expbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_expbox"]], "add_gate() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_gate"]], "add_multiplexed_tensored_u2() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_multiplexed_tensored_u2"]], "add_multiplexedrotation() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_multiplexedrotation"]], "add_multiplexedu2() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_multiplexedu2"]], "add_multiplexor() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_multiplexor"]], "add_pauliexpbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_pauliexpbox"]], "add_phase() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_phase"]], "add_phasepolybox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_phasepolybox"]], "add_q_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_q_register"]], "add_qcontrolbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_qcontrolbox"]], "add_qubit() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_qubit"]], "add_state_preparation_box() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_state_preparation_box"]], "add_toffolibox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_toffolibox"]], "add_unitary1qbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_unitary1qbox"]], "add_unitary2qbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_unitary2qbox"]], "add_unitary3qbox() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_unitary3qbox"]], "add_wasm() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_wasm"]], "add_wasm_to_reg() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.add_wasm_to_reg"]], "append() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.append"]], "bit_readout (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.bit_readout"]], "bits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.bits"]], "c_registers (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.c_registers"]], "commands_of_type() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.commands_of_type"]], "copy() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.copy"]], "created_qubits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.created_qubits"]], "dagger() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.dagger"]], "depth() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.depth"]], "depth_by_type() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.depth_by_type"]], "discarded_qubits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.discarded_qubits"]], "flatten_registers() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.flatten_registers"]], "free_symbols() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.free_symbols"]], "from_dict() (pytket.circuit.circuit static method)": [[4, "pytket.circuit.Circuit.from_dict"]], "get_c_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_c_register"]], "get_commands() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_commands"]], "get_q_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_q_register"]], "get_statevector() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_statevector"]], "get_unitary() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_unitary"]], "get_unitary_times_other() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.get_unitary_times_other"]], "implicit_qubit_permutation() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.implicit_qubit_permutation"]], "is_simple (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.is_simple"]], "is_symbolic() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.is_symbolic"]], "measure_all() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.measure_all"]], "measure_register() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.measure_register"]], "n_1qb_gates() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.n_1qb_gates"]], "n_2qb_gates() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.n_2qb_gates"]], "n_bits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.n_bits"]], "n_gates (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.n_gates"]], "n_gates_of_type() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.n_gates_of_type"]], "n_nqb_gates() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.n_nqb_gates"]], "n_qubits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.n_qubits"]], "opgroups (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.opgroups"]], "ops_of_type() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.ops_of_type"]], "phase (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.phase"]], "q_registers (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.q_registers"]], "qubit_create() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_create"]], "qubit_create_all() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_create_all"]], "qubit_discard() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_discard"]], "qubit_discard_all() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_discard_all"]], "qubit_is_created() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_is_created"]], "qubit_is_discarded() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.qubit_is_discarded"]], "qubit_readout (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.qubit_readout"]], "qubit_to_bit_map (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.qubit_to_bit_map"]], "qubits (pytket.circuit.circuit property)": [[4, "pytket.circuit.Circuit.qubits"]], "remove_blank_wires() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.remove_blank_wires"]], "rename_units() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.rename_units"]], "replace_swaps() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.replace_SWAPs"]], "replace_implicit_wire_swaps() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.replace_implicit_wire_swaps"]], "substitute_named() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.substitute_named"]], "symbol_substitution() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.symbol_substitution"]], "to_dict() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.to_dict"]], "to_latex_file() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.to_latex_file"]], "transpose() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.transpose"]], "valid_connectivity() (pytket.circuit.circuit method)": [[4, "pytket.circuit.Circuit.valid_connectivity"]], "and (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.And"]], "binaryop (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BinaryOp"]], "bitand (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitAnd"]], "biteq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitEq"]], "bitlogicexp (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitLogicExp"]], "bitneq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitNeq"]], "bitnot (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitNot"]], "bitor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitOr"]], "bitwiseop (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitWiseOp"]], "bitxor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.BitXor"]], "constpredicate (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.ConstPredicate"]], "eq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.Eq"]], "logicexp (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.LogicExp"]], "neq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.Neq"]], "or (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.Or"]], "predicateexp (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.PredicateExp"]], "regadd (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegAdd"]], "regand (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegAnd"]], "regdiv (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegDiv"]], "regeq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegEq"]], "reggeq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegGeq"]], "reggt (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegGt"]], "regleq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegLeq"]], "reglogicexp (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegLogicExp"]], "reglsh (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegLsh"]], "reglt (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegLt"]], "regmul (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegMul"]], "regneg (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegNeg"]], "regneq (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegNeq"]], "regnot (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegNot"]], "regor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegOr"]], "regpow (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegPow"]], "regrsh (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegRsh"]], "regsub (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegSub"]], "regwiseop (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegWiseOp"]], "regxor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.RegXor"]], "unaryop (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.UnaryOp"]], "xor (class in pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.Xor"]], "all_inputs() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.all_inputs"]], "eval_vals() (pytket.circuit.logic_exp.and method)": [[5, "pytket.circuit.logic_exp.And.eval_vals"]], "eval_vals() (pytket.circuit.logic_exp.bitor method)": [[5, "pytket.circuit.logic_exp.BitOr.eval_vals"]], "eval_vals() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.eval_vals"]], "factory() (pytket.circuit.logic_exp.logicexp class method)": [[5, "pytket.circuit.logic_exp.LogicExp.factory"]], "filter_by_type() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.filter_by_type"]], "from_dict() (pytket.circuit.logic_exp.logicexp class method)": [[5, "pytket.circuit.logic_exp.LogicExp.from_dict"]], "if_bit() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.if_bit"]], "if_not_bit() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.if_not_bit"]], "pytket.circuit.logic_exp": [[5, "module-pytket.circuit.logic_exp"]], "reg_eq() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_eq"]], "reg_geq() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_geq"]], "reg_gt() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_gt"]], "reg_leq() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_leq"]], "reg_lt() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_lt"]], "reg_neq() (in module pytket.circuit.logic_exp)": [[5, "pytket.circuit.logic_exp.reg_neq"]], "rename_args() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.rename_args"]], "set_value() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.set_value"]], "to_dict() (pytket.circuit.logic_exp.logicexp method)": [[5, "pytket.circuit.logic_exp.LogicExp.to_dict"]], "pytketconfig (class in pytket.config.pytket_config)": [[6, "pytket.config.pytket_config.PytketConfig"]], "pytketextconfig (class in pytket.config.pytket_config)": [[6, "pytket.config.pytket_config.PytketExtConfig"]], "__init__() (pytket.config.pytket_config.pytketconfig method)": [[6, "pytket.config.pytket_config.PytketConfig.__init__"]], "__init__() (pytket.config.pytket_config.pytketextconfig method)": [[6, "pytket.config.pytket_config.PytketExtConfig.__init__"]], "default() (pytket.config.pytket_config.pytketconfig class method)": [[6, "pytket.config.pytket_config.PytketConfig.default"]], "from_default_config_file() (pytket.config.pytket_config.pytketextconfig class method)": [[6, "pytket.config.pytket_config.PytketExtConfig.from_default_config_file"]], "from_extension_dict() (pytket.config.pytket_config.pytketextconfig class method)": [[6, "pytket.config.pytket_config.PytketExtConfig.from_extension_dict"]], "from_pytketconfig() (pytket.config.pytket_config.pytketextconfig class method)": [[6, "pytket.config.pytket_config.PytketExtConfig.from_pytketconfig"]], "get_config_file_path() (in module pytket.config)": [[6, "pytket.config.get_config_file_path"]], "load_config_file() (in module pytket.config)": [[6, "pytket.config.load_config_file"]], "pytket.config": [[6, "module-pytket.config"]], "read_file() (pytket.config.pytket_config.pytketconfig class method)": [[6, "pytket.config.pytket_config.PytketConfig.read_file"]], "to_dict() (pytket.config.pytket_config.pytketextconfig method)": [[6, "pytket.config.pytket_config.PytketExtConfig.to_dict"]], "update_default_config_file() (pytket.config.pytket_config.pytketextconfig method)": [[6, "pytket.config.pytket_config.PytketExtConfig.update_default_config_file"]], "update_pytket_config() (pytket.config.pytket_config.pytketextconfig method)": [[6, "pytket.config.pytket_config.PytketExtConfig.update_pytket_config"]], "write_config_file() (in module pytket.config)": [[6, "pytket.config.write_config_file"]], "write_file() (pytket.config.pytket_config.pytketconfig method)": [[6, "pytket.config.pytket_config.PytketConfig.write_file"]], "circuitrenderer (class in pytket.circuit.display)": [[7, "pytket.circuit.display.CircuitRenderer"]], "get_circuit_renderer() (in module pytket.circuit.display)": [[7, "pytket.circuit.display.get_circuit_renderer"]], "get_render_options() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.get_render_options"]], "pytket.circuit.display": [[7, "module-pytket.circuit.display"]], "render_circuit_as_html() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.render_circuit_as_html"]], "render_circuit_jupyter() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.render_circuit_jupyter"]], "set_render_options() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.set_render_options"]], "view_browser() (pytket.circuit.display.circuitrenderer method)": [[7, "pytket.circuit.display.CircuitRenderer.view_browser"]], "level (class in pytket.logging)": [[11, "pytket.logging.level"]], "name (pytket.logging.level property)": [[11, "pytket.logging.level.name"]], "pytket.logging": [[11, "module-pytket.logging"]], "set_level() (in module pytket.logging)": [[11, "pytket.logging.set_level"]], "aaslabellingmethod (class in pytket.mapping)": [[12, "pytket.mapping.AASLabellingMethod"]], "aasrouteroutingmethod (class in pytket.mapping)": [[12, "pytket.mapping.AASRouteRoutingMethod"]], "boxdecompositionroutingmethod (class in pytket.mapping)": [[12, "pytket.mapping.BoxDecompositionRoutingMethod"]], "lexilabellingmethod (class in pytket.mapping)": [[12, "pytket.mapping.LexiLabellingMethod"]], "lexirouteroutingmethod (class in pytket.mapping)": [[12, "pytket.mapping.LexiRouteRoutingMethod"]], "mappingmanager (class in pytket.mapping)": [[12, "pytket.mapping.MappingManager"]], "multigatereorderroutingmethod (class in pytket.mapping)": [[12, "pytket.mapping.MultiGateReorderRoutingMethod"]], "routingmethod (class in pytket.mapping)": [[12, "pytket.mapping.RoutingMethod"]], "routingmethodcircuit (class in pytket.mapping)": [[12, "pytket.mapping.RoutingMethodCircuit"]], "__init__() (pytket.mapping.aaslabellingmethod method)": [[12, "pytket.mapping.AASLabellingMethod.__init__"]], "__init__() (pytket.mapping.aasrouteroutingmethod method)": [[12, "pytket.mapping.AASRouteRoutingMethod.__init__"]], "__init__() (pytket.mapping.boxdecompositionroutingmethod method)": [[12, "pytket.mapping.BoxDecompositionRoutingMethod.__init__"]], "__init__() (pytket.mapping.lexilabellingmethod method)": [[12, "pytket.mapping.LexiLabellingMethod.__init__"]], "__init__() (pytket.mapping.lexirouteroutingmethod method)": [[12, "pytket.mapping.LexiRouteRoutingMethod.__init__"]], "__init__() (pytket.mapping.mappingmanager method)": [[12, "pytket.mapping.MappingManager.__init__"]], "__init__() (pytket.mapping.multigatereorderroutingmethod method)": [[12, "pytket.mapping.MultiGateReorderRoutingMethod.__init__"]], "__init__() (pytket.mapping.routingmethod method)": [[12, "pytket.mapping.RoutingMethod.__init__"]], "__init__() (pytket.mapping.routingmethodcircuit method)": [[12, "pytket.mapping.RoutingMethodCircuit.__init__"]], "pytket.mapping": [[12, "module-pytket.mapping"]], "route_circuit() (pytket.mapping.mappingmanager method)": [[12, "pytket.mapping.MappingManager.route_circuit"]], "optype (class in pytket.circuit)": [[14, "pytket.circuit.OpType"]], "from_name() (pytket.circuit.optype static method)": [[14, "pytket.circuit.OpType.from_name"]], "name (pytket.circuit.optype property)": [[14, "pytket.circuit.OpType.name"]], "graphcolourmethod (class in pytket.partition)": [[15, "pytket.partition.GraphColourMethod"]], "measurementbitmap (class in pytket.partition)": [[15, "pytket.partition.MeasurementBitMap"]], "measurementsetup (class in pytket.partition)": [[15, "pytket.partition.MeasurementSetup"]], "paulipartitionstrat (class in pytket.partition)": [[15, "pytket.partition.PauliPartitionStrat"]], "__init__() (pytket.partition.graphcolourmethod method)": [[15, "pytket.partition.GraphColourMethod.__init__"]], "__init__() (pytket.partition.measurementbitmap method)": [[15, "pytket.partition.MeasurementBitMap.__init__"]], "__init__() (pytket.partition.measurementsetup method)": [[15, "pytket.partition.MeasurementSetup.__init__"]], "__init__() (pytket.partition.paulipartitionstrat method)": [[15, "pytket.partition.PauliPartitionStrat.__init__"]], "add_measurement_circuit() (pytket.partition.measurementsetup method)": [[15, "pytket.partition.MeasurementSetup.add_measurement_circuit"]], "add_result_for_term() (pytket.partition.measurementsetup method)": [[15, "pytket.partition.MeasurementSetup.add_result_for_term"]], "bits (pytket.partition.measurementbitmap property)": [[15, "pytket.partition.MeasurementBitMap.bits"]], "circ_index (pytket.partition.measurementbitmap property)": [[15, "pytket.partition.MeasurementBitMap.circ_index"]], "from_dict() (pytket.partition.measurementbitmap static method)": [[15, "pytket.partition.MeasurementBitMap.from_dict"]], "from_dict() (pytket.partition.measurementsetup static method)": [[15, "pytket.partition.MeasurementSetup.from_dict"]], "invert (pytket.partition.measurementbitmap property)": [[15, "pytket.partition.MeasurementBitMap.invert"]], "measurement_circs (pytket.partition.measurementsetup property)": [[15, "pytket.partition.MeasurementSetup.measurement_circs"]], "measurement_reduction() (in module pytket.partition)": [[15, "pytket.partition.measurement_reduction"]], "name (pytket.partition.graphcolourmethod property)": [[15, "pytket.partition.GraphColourMethod.name"]], "name (pytket.partition.paulipartitionstrat property)": [[15, "pytket.partition.PauliPartitionStrat.name"]], "pytket.partition": [[15, "module-pytket.partition"]], "results (pytket.partition.measurementsetup property)": [[15, "pytket.partition.MeasurementSetup.results"]], "term_sequence() (in module pytket.partition)": [[15, "pytket.partition.term_sequence"]], "to_dict() (pytket.partition.measurementbitmap method)": [[15, "pytket.partition.MeasurementBitMap.to_dict"]], "to_dict() (pytket.partition.measurementsetup method)": [[15, "pytket.partition.MeasurementSetup.to_dict"]], "verify() (pytket.partition.measurementsetup method)": [[15, "pytket.partition.MeasurementSetup.verify"]], "aasrouting() (in module pytket.passes)": [[16, "pytket.passes.AASRouting"]], "basepass (class in pytket.passes)": [[16, "pytket.passes.BasePass"]], "cnotsynthtype (class in pytket.passes)": [[16, "pytket.passes.CNotSynthType"]], "cxmappingpass() (in module pytket.passes)": [[16, "pytket.passes.CXMappingPass"]], "cliffordsimp() (in module pytket.passes)": [[16, "pytket.passes.CliffordSimp"]], "cnxpairwisedecomposition() (in module pytket.passes)": [[16, "pytket.passes.CnXPairwiseDecomposition"]], "commutethroughmultis() (in module pytket.passes)": [[16, "pytket.passes.CommuteThroughMultis"]], "composephasepolyboxes() (in module pytket.passes)": [[16, "pytket.passes.ComposePhasePolyBoxes"]], "contextsimp() (in module pytket.passes)": [[16, "pytket.passes.ContextSimp"]], "custompass() (in module pytket.passes)": [[16, "pytket.passes.CustomPass"]], "customroutingpass() (in module pytket.passes)": [[16, "pytket.passes.CustomRoutingPass"]], "decomposearbitrarilycontrolledgates() (in module pytket.passes)": [[16, "pytket.passes.DecomposeArbitrarilyControlledGates"]], "decomposeboxes() (in module pytket.passes)": [[16, "pytket.passes.DecomposeBoxes"]], "decomposeclassicalexp() (in module pytket.passes)": [[16, "pytket.passes.DecomposeClassicalExp"]], "decomposemultiqubitscx() (in module pytket.passes)": [[16, "pytket.passes.DecomposeMultiQubitsCX"]], "decomposesinglequbitstk1() (in module pytket.passes)": [[16, "pytket.passes.DecomposeSingleQubitsTK1"]], "decomposeswapstocxs() (in module pytket.passes)": [[16, "pytket.passes.DecomposeSwapsToCXs"]], "decomposeswapstocircuit() (in module pytket.passes)": [[16, "pytket.passes.DecomposeSwapsToCircuit"]], "decomposetk2() (in module pytket.passes)": [[16, "pytket.passes.DecomposeTK2"]], "defaultmappingpass() (in module pytket.passes)": [[16, "pytket.passes.DefaultMappingPass"]], "delaymeasures() (in module pytket.passes)": [[16, "pytket.passes.DelayMeasures"]], "euleranglereduction() (in module pytket.passes)": [[16, "pytket.passes.EulerAngleReduction"]], "flattenregisters() (in module pytket.passes)": [[16, "pytket.passes.FlattenRegisters"]], "flattenrelabelregisterspass() (in module pytket.passes)": [[16, "pytket.passes.FlattenRelabelRegistersPass"]], "fullmappingpass() (in module pytket.passes)": [[16, "pytket.passes.FullMappingPass"]], "fullpeepholeoptimise() (in module pytket.passes)": [[16, "pytket.passes.FullPeepholeOptimise"]], "globalisephasedx() (in module pytket.passes)": [[16, "pytket.passes.GlobalisePhasedX"]], "guidedpaulisimp() (in module pytket.passes)": [[16, "pytket.passes.GuidedPauliSimp"]], "kakdecomposition() (in module pytket.passes)": [[16, "pytket.passes.KAKDecomposition"]], "naiveplacementpass() (in module pytket.passes)": [[16, "pytket.passes.NaivePlacementPass"]], "normalisetk2() (in module pytket.passes)": [[16, "pytket.passes.NormaliseTK2"]], "optimisephasegadgets() (in module pytket.passes)": [[16, "pytket.passes.OptimisePhaseGadgets"]], "paulisimp() (in module pytket.passes)": [[16, "pytket.passes.PauliSimp"]], "paulisquash() (in module pytket.passes)": [[16, "pytket.passes.PauliSquash"]], "peepholeoptimise2q() (in module pytket.passes)": [[16, "pytket.passes.PeepholeOptimise2Q"]], "placementpass() (in module pytket.passes)": [[16, "pytket.passes.PlacementPass"]], "rebasecustom() (in module pytket.passes)": [[16, "pytket.passes.RebaseCustom"]], "rebasetket() (in module pytket.passes)": [[16, "pytket.passes.RebaseTket"]], "removebarriers() (in module pytket.passes)": [[16, "pytket.passes.RemoveBarriers"]], "removediscarded() (in module pytket.passes)": [[16, "pytket.passes.RemoveDiscarded"]], "removeimplicitqubitpermutation() (in module pytket.passes)": [[16, "pytket.passes.RemoveImplicitQubitPermutation"]], "removeredundancies() (in module pytket.passes)": [[16, "pytket.passes.RemoveRedundancies"]], "renamequbitspass() (in module pytket.passes)": [[16, "pytket.passes.RenameQubitsPass"]], "repeatpass (class in pytket.passes)": [[16, "pytket.passes.RepeatPass"]], "repeatuntilsatisfiedpass (class in pytket.passes)": [[16, "pytket.passes.RepeatUntilSatisfiedPass"]], "repeatwithmetricpass (class in pytket.passes)": [[16, "pytket.passes.RepeatWithMetricPass"]], "roundangles() (in module pytket.passes)": [[16, "pytket.passes.RoundAngles"]], "routingpass() (in module pytket.passes)": [[16, "pytket.passes.RoutingPass"]], "safetymode (class in pytket.passes)": [[16, "pytket.passes.SafetyMode"]], "sequencepass (class in pytket.passes)": [[16, "pytket.passes.SequencePass"]], "simplifyinitial() (in module pytket.passes)": [[16, "pytket.passes.SimplifyInitial"]], "simplifymeasured() (in module pytket.passes)": [[16, "pytket.passes.SimplifyMeasured"]], "squashcustom() (in module pytket.passes)": [[16, "pytket.passes.SquashCustom"]], "squashrzphasedx() (in module pytket.passes)": [[16, "pytket.passes.SquashRzPhasedX"]], "squashtk1() (in module pytket.passes)": [[16, "pytket.passes.SquashTK1"]], "synthesisehqs() (in module pytket.passes)": [[16, "pytket.passes.SynthesiseHQS"]], "synthesiseoqc() (in module pytket.passes)": [[16, "pytket.passes.SynthesiseOQC"]], "synthesisetk() (in module pytket.passes)": [[16, "pytket.passes.SynthesiseTK"]], "synthesisetket() (in module pytket.passes)": [[16, "pytket.passes.SynthesiseTket"]], "synthesiseumd() (in module pytket.passes)": [[16, "pytket.passes.SynthesiseUMD"]], "threequbitsquash() (in module pytket.passes)": [[16, "pytket.passes.ThreeQubitSquash"]], "zxgraphlikeoptimisation() (in module pytket.passes)": [[16, "pytket.passes.ZXGraphlikeOptimisation"]], "zzphasetorz() (in module pytket.passes)": [[16, "pytket.passes.ZZPhaseToRz"]], "__init__() (pytket.passes.basepass method)": [[16, "pytket.passes.BasePass.__init__"]], "__init__() (pytket.passes.cnotsynthtype method)": [[16, "pytket.passes.CNotSynthType.__init__"]], "__init__() (pytket.passes.repeatpass method)": [[16, "pytket.passes.RepeatPass.__init__"]], "__init__() (pytket.passes.repeatuntilsatisfiedpass method)": [[16, "pytket.passes.RepeatUntilSatisfiedPass.__init__"]], "__init__() (pytket.passes.repeatwithmetricpass method)": [[16, "pytket.passes.RepeatWithMetricPass.__init__"]], "__init__() (pytket.passes.safetymode method)": [[16, "pytket.passes.SafetyMode.__init__"]], "__init__() (pytket.passes.sequencepass method)": [[16, "pytket.passes.SequencePass.__init__"]], "apply() (pytket.passes.basepass method)": [[16, "pytket.passes.BasePass.apply"]], "auto_rebase_pass() (in module pytket.passes.auto_rebase)": [[16, "pytket.passes.auto_rebase.auto_rebase_pass"]], "auto_squash_pass() (in module pytket.passes.auto_rebase)": [[16, "pytket.passes.auto_rebase.auto_squash_pass"]], "compilation_pass_from_script() (in module pytket.passes.script)": [[16, "pytket.passes.script.compilation_pass_from_script"]], "compilation_pass_grammar() (in module pytket.passes.script)": [[16, "pytket.passes.script.compilation_pass_grammar"]], "from_dict() (pytket.passes.basepass static method)": [[16, "pytket.passes.BasePass.from_dict"]], "get_metric() (pytket.passes.repeatwithmetricpass method)": [[16, "pytket.passes.RepeatWithMetricPass.get_metric"]], "get_pass() (pytket.passes.repeatpass method)": [[16, "pytket.passes.RepeatPass.get_pass"]], "get_pass() (pytket.passes.repeatuntilsatisfiedpass method)": [[16, "pytket.passes.RepeatUntilSatisfiedPass.get_pass"]], "get_pass() (pytket.passes.repeatwithmetricpass method)": [[16, "pytket.passes.RepeatWithMetricPass.get_pass"]], "get_predicate() (pytket.passes.repeatuntilsatisfiedpass method)": [[16, "pytket.passes.RepeatUntilSatisfiedPass.get_predicate"]], "get_sequence() (pytket.passes.sequencepass method)": [[16, "pytket.passes.SequencePass.get_sequence"]], "name (pytket.passes.cnotsynthtype property)": [[16, "pytket.passes.CNotSynthType.name"]], "name (pytket.passes.safetymode property)": [[16, "pytket.passes.SafetyMode.name"]], "pytket.passes": [[16, "module-pytket.passes"]], "pytket.passes.auto_rebase": [[16, "module-pytket.passes.auto_rebase"]], "pytket.passes.script": [[16, "module-pytket.passes.script"]], "to_dict() (pytket.passes.basepass method)": [[16, "pytket.passes.BasePass.to_dict"]], "pauli (class in pytket.pauli)": [[17, "pytket.pauli.Pauli"]], "paulistabiliser (class in pytket.pauli)": [[17, "pytket.pauli.PauliStabiliser"]], "qubitpaulistring (class in pytket.pauli)": [[17, "pytket.pauli.QubitPauliString"]], "__init__() (pytket.pauli.pauli method)": [[17, "pytket.pauli.Pauli.__init__"]], "__init__() (pytket.pauli.paulistabiliser method)": [[17, "pytket.pauli.PauliStabiliser.__init__"]], "__init__() (pytket.pauli.qubitpaulistring method)": [[17, "pytket.pauli.QubitPauliString.__init__"]], "coeff (pytket.pauli.paulistabiliser property)": [[17, "pytket.pauli.PauliStabiliser.coeff"]], "commutes_with() (pytket.pauli.qubitpaulistring method)": [[17, "pytket.pauli.QubitPauliString.commutes_with"]], "compress() (pytket.pauli.qubitpaulistring method)": [[17, "pytket.pauli.QubitPauliString.compress"]], "dot_state() (pytket.pauli.qubitpaulistring method)": [[17, "pytket.pauli.QubitPauliString.dot_state"]], "from_list() (pytket.pauli.qubitpaulistring static method)": [[17, "pytket.pauli.QubitPauliString.from_list"]], "map (pytket.pauli.qubitpaulistring property)": [[17, "pytket.pauli.QubitPauliString.map"]], "name (pytket.pauli.pauli property)": [[17, "pytket.pauli.Pauli.name"]], "pauli_string_mult() (in module pytket.pauli)": [[17, "pytket.pauli.pauli_string_mult"]], "pytket.pauli": [[17, "module-pytket.pauli"]], "state_expectation() (pytket.pauli.qubitpaulistring method)": [[17, "pytket.pauli.QubitPauliString.state_expectation"]], "string (pytket.pauli.paulistabiliser property)": [[17, "pytket.pauli.PauliStabiliser.string"]], "to_list() (pytket.pauli.qubitpaulistring method)": [[17, "pytket.pauli.QubitPauliString.to_list"]], "to_sparse_matrix() (pytket.pauli.qubitpaulistring method)": [[17, "pytket.pauli.QubitPauliString.to_sparse_matrix"]], "graphplacement (class in pytket.placement)": [[18, "pytket.placement.GraphPlacement"]], "lineplacement (class in pytket.placement)": [[18, "pytket.placement.LinePlacement"]], "noiseawareplacement (class in pytket.placement)": [[18, "pytket.placement.NoiseAwarePlacement"]], "placement (class in pytket.placement)": [[18, "pytket.placement.Placement"]], "__init__() (pytket.placement.graphplacement method)": [[18, "pytket.placement.GraphPlacement.__init__"]], "__init__() (pytket.placement.lineplacement method)": [[18, "pytket.placement.LinePlacement.__init__"]], "__init__() (pytket.placement.noiseawareplacement method)": [[18, "pytket.placement.NoiseAwarePlacement.__init__"]], "__init__() (pytket.placement.placement method)": [[18, "pytket.placement.Placement.__init__"]], "from_dict() (pytket.placement.placement static method)": [[18, "pytket.placement.Placement.from_dict"]], "get_placement_map() (pytket.placement.placement method)": [[18, "pytket.placement.Placement.get_placement_map"]], "get_placement_maps() (pytket.placement.placement method)": [[18, "pytket.placement.Placement.get_placement_maps"]], "modify_config() (pytket.placement.graphplacement method)": [[18, "pytket.placement.GraphPlacement.modify_config"]], "modify_config() (pytket.placement.noiseawareplacement method)": [[18, "pytket.placement.NoiseAwarePlacement.modify_config"]], "place() (pytket.placement.placement method)": [[18, "pytket.placement.Placement.place"]], "place_fully_connected() (in module pytket.placement)": [[18, "pytket.placement.place_fully_connected"]], "place_with_map() (in module pytket.placement)": [[18, "pytket.placement.place_with_map"]], "place_with_map() (pytket.placement.placement static method)": [[18, "pytket.placement.Placement.place_with_map"]], "pytket.placement": [[18, "module-pytket.placement"]], "to_dict() (pytket.placement.placement method)": [[18, "pytket.placement.Placement.to_dict"]], "cliffordcircuitpredicate (class in pytket.predicates)": [[19, "pytket.predicates.CliffordCircuitPredicate"]], "commutablemeasurespredicate (class in pytket.predicates)": [[19, "pytket.predicates.CommutableMeasuresPredicate"]], "compilationunit (class in pytket.predicates)": [[19, "pytket.predicates.CompilationUnit"]], "connectivitypredicate (class in pytket.predicates)": [[19, "pytket.predicates.ConnectivityPredicate"]], "defaultregisterpredicate (class in pytket.predicates)": [[19, "pytket.predicates.DefaultRegisterPredicate"]], "directednesspredicate (class in pytket.predicates)": [[19, "pytket.predicates.DirectednessPredicate"]], "gatesetpredicate (class in pytket.predicates)": [[19, "pytket.predicates.GateSetPredicate"]], "maxnclregpredicate (class in pytket.predicates)": [[19, "pytket.predicates.MaxNClRegPredicate"]], "maxnqubitspredicate (class in pytket.predicates)": [[19, "pytket.predicates.MaxNQubitsPredicate"]], "maxtwoqubitgatespredicate (class in pytket.predicates)": [[19, "pytket.predicates.MaxTwoQubitGatesPredicate"]], "nobarrierspredicate (class in pytket.predicates)": [[19, "pytket.predicates.NoBarriersPredicate"]], "noclassicalbitspredicate (class in pytket.predicates)": [[19, "pytket.predicates.NoClassicalBitsPredicate"]], "noclassicalcontrolpredicate (class in pytket.predicates)": [[19, "pytket.predicates.NoClassicalControlPredicate"]], "nofastfeedforwardpredicate (class in pytket.predicates)": [[19, "pytket.predicates.NoFastFeedforwardPredicate"]], "nomidmeasurepredicate (class in pytket.predicates)": [[19, "pytket.predicates.NoMidMeasurePredicate"]], "nosymbolspredicate (class in pytket.predicates)": [[19, "pytket.predicates.NoSymbolsPredicate"]], "nowireswapspredicate (class in pytket.predicates)": [[19, "pytket.predicates.NoWireSwapsPredicate"]], "normalisedtk2predicate (class in pytket.predicates)": [[19, "pytket.predicates.NormalisedTK2Predicate"]], "placementpredicate (class in pytket.predicates)": [[19, "pytket.predicates.PlacementPredicate"]], "predicate (class in pytket.predicates)": [[19, "pytket.predicates.Predicate"]], "userdefinedpredicate (class in pytket.predicates)": [[19, "pytket.predicates.UserDefinedPredicate"]], "__init__() (pytket.predicates.cliffordcircuitpredicate method)": [[19, "pytket.predicates.CliffordCircuitPredicate.__init__"]], "__init__() (pytket.predicates.commutablemeasurespredicate method)": [[19, "pytket.predicates.CommutableMeasuresPredicate.__init__"]], "__init__() (pytket.predicates.compilationunit method)": [[19, "pytket.predicates.CompilationUnit.__init__"]], "__init__() (pytket.predicates.connectivitypredicate method)": [[19, "pytket.predicates.ConnectivityPredicate.__init__"]], "__init__() (pytket.predicates.defaultregisterpredicate method)": [[19, "pytket.predicates.DefaultRegisterPredicate.__init__"]], "__init__() (pytket.predicates.directednesspredicate method)": [[19, "pytket.predicates.DirectednessPredicate.__init__"]], "__init__() (pytket.predicates.gatesetpredicate method)": [[19, "pytket.predicates.GateSetPredicate.__init__"]], "__init__() (pytket.predicates.maxnclregpredicate method)": [[19, "pytket.predicates.MaxNClRegPredicate.__init__"]], "__init__() (pytket.predicates.maxnqubitspredicate method)": [[19, "pytket.predicates.MaxNQubitsPredicate.__init__"]], "__init__() (pytket.predicates.maxtwoqubitgatespredicate method)": [[19, "pytket.predicates.MaxTwoQubitGatesPredicate.__init__"]], "__init__() (pytket.predicates.nobarrierspredicate method)": [[19, "pytket.predicates.NoBarriersPredicate.__init__"]], "__init__() (pytket.predicates.noclassicalbitspredicate method)": [[19, "pytket.predicates.NoClassicalBitsPredicate.__init__"]], "__init__() (pytket.predicates.noclassicalcontrolpredicate method)": [[19, "pytket.predicates.NoClassicalControlPredicate.__init__"]], "__init__() (pytket.predicates.nofastfeedforwardpredicate method)": [[19, "pytket.predicates.NoFastFeedforwardPredicate.__init__"]], "__init__() (pytket.predicates.nomidmeasurepredicate method)": [[19, "pytket.predicates.NoMidMeasurePredicate.__init__"]], "__init__() (pytket.predicates.nosymbolspredicate method)": [[19, "pytket.predicates.NoSymbolsPredicate.__init__"]], "__init__() (pytket.predicates.nowireswapspredicate method)": [[19, "pytket.predicates.NoWireSwapsPredicate.__init__"]], "__init__() (pytket.predicates.normalisedtk2predicate method)": [[19, "pytket.predicates.NormalisedTK2Predicate.__init__"]], "__init__() (pytket.predicates.placementpredicate method)": [[19, "pytket.predicates.PlacementPredicate.__init__"]], "__init__() (pytket.predicates.predicate method)": [[19, "pytket.predicates.Predicate.__init__"]], "__init__() (pytket.predicates.userdefinedpredicate method)": [[19, "pytket.predicates.UserDefinedPredicate.__init__"]], "check_all_predicates() (pytket.predicates.compilationunit method)": [[19, "pytket.predicates.CompilationUnit.check_all_predicates"]], "circuit (pytket.predicates.compilationunit property)": [[19, "pytket.predicates.CompilationUnit.circuit"]], "final_map (pytket.predicates.compilationunit property)": [[19, "pytket.predicates.CompilationUnit.final_map"]], "from_dict() (pytket.predicates.predicate static method)": [[19, "pytket.predicates.Predicate.from_dict"]], "implies() (pytket.predicates.predicate method)": [[19, "pytket.predicates.Predicate.implies"]], "initial_map (pytket.predicates.compilationunit property)": [[19, "pytket.predicates.CompilationUnit.initial_map"]], "pytket.predicates": [[19, "module-pytket.predicates"]], "to_dict() (pytket.predicates.predicate method)": [[19, "pytket.predicates.Predicate.to_dict"]], "verify() (pytket.predicates.predicate method)": [[19, "pytket.predicates.Predicate.verify"]], "circuit_from_qasm() (in module pytket.qasm)": [[20, "pytket.qasm.circuit_from_qasm"]], "circuit_from_qasm_io() (in module pytket.qasm)": [[20, "pytket.qasm.circuit_from_qasm_io"]], "circuit_from_qasm_str() (in module pytket.qasm)": [[20, "pytket.qasm.circuit_from_qasm_str"]], "circuit_from_qasm_wasm() (in module pytket.qasm)": [[20, "pytket.qasm.circuit_from_qasm_wasm"]], "circuit_to_qasm() (in module pytket.qasm)": [[20, "pytket.qasm.circuit_to_qasm"]], "circuit_to_qasm_io() (in module pytket.qasm)": [[20, "pytket.qasm.circuit_to_qasm_io"]], "circuit_to_qasm_str() (in module pytket.qasm)": [[20, "pytket.qasm.circuit_to_qasm_str"]], "pytket.qasm": [[20, "module-pytket.qasm"]], "circuit_from_quipper() (in module pytket.quipper)": [[21, "pytket.quipper.circuit_from_quipper"]], "pytket.quipper": [[21, "module-pytket.quipper"]], "unitarytableau (class in pytket.tableau)": [[22, "pytket.tableau.UnitaryTableau"]], "unitarytableaubox (class in pytket.tableau)": [[22, "pytket.tableau.UnitaryTableauBox"]], "__init__() (pytket.tableau.unitarytableau method)": [[22, "pytket.tableau.UnitaryTableau.__init__"]], "__init__() (pytket.tableau.unitarytableaubox method)": [[22, "pytket.tableau.UnitaryTableauBox.__init__"]], "apply_gate_at_end() (pytket.tableau.unitarytableau method)": [[22, "pytket.tableau.UnitaryTableau.apply_gate_at_end"]], "apply_gate_at_front() (pytket.tableau.unitarytableau method)": [[22, "pytket.tableau.UnitaryTableau.apply_gate_at_front"]], "get_circuit() (pytket.tableau.unitarytableaubox method)": [[22, "pytket.tableau.UnitaryTableauBox.get_circuit"]], "get_row_product() (pytket.tableau.unitarytableau method)": [[22, "pytket.tableau.UnitaryTableau.get_row_product"]], "get_tableau() (pytket.tableau.unitarytableaubox method)": [[22, "pytket.tableau.UnitaryTableauBox.get_tableau"]], "get_xrow() (pytket.tableau.unitarytableau method)": [[22, "pytket.tableau.UnitaryTableau.get_xrow"]], "get_zrow() (pytket.tableau.unitarytableau method)": [[22, "pytket.tableau.UnitaryTableau.get_zrow"]], "pytket.tableau": [[22, "module-pytket.tableau"]], "framerandomisation (class in pytket.tailoring)": [[23, "pytket.tailoring.FrameRandomisation"]], "pauliframerandomisation (class in pytket.tailoring)": [[23, "pytket.tailoring.PauliFrameRandomisation"]], "universalframerandomisation (class in pytket.tailoring)": [[23, "pytket.tailoring.UniversalFrameRandomisation"]], "__init__() (pytket.tailoring.framerandomisation method)": [[23, "pytket.tailoring.FrameRandomisation.__init__"]], "__init__() (pytket.tailoring.pauliframerandomisation method)": [[23, "pytket.tailoring.PauliFrameRandomisation.__init__"]], "__init__() (pytket.tailoring.universalframerandomisation method)": [[23, "pytket.tailoring.UniversalFrameRandomisation.__init__"]], "apply_clifford_basis_change() (in module pytket.tailoring)": [[23, "pytket.tailoring.apply_clifford_basis_change"]], "get_all_circuits() (pytket.tailoring.framerandomisation method)": [[23, "pytket.tailoring.FrameRandomisation.get_all_circuits"]], "get_all_circuits() (pytket.tailoring.pauliframerandomisation method)": [[23, "pytket.tailoring.PauliFrameRandomisation.get_all_circuits"]], "get_all_circuits() (pytket.tailoring.universalframerandomisation method)": [[23, "pytket.tailoring.UniversalFrameRandomisation.get_all_circuits"]], "pytket.tailoring": [[23, "module-pytket.tailoring"]], "sample_circuits() (pytket.tailoring.framerandomisation method)": [[23, "pytket.tailoring.FrameRandomisation.sample_circuits"]], "sample_circuits() (pytket.tailoring.pauliframerandomisation method)": [[23, "pytket.tailoring.PauliFrameRandomisation.sample_circuits"]], "sample_circuits() (pytket.tailoring.universalframerandomisation method)": [[23, "pytket.tailoring.UniversalFrameRandomisation.sample_circuits"]], "cxconfigtype (class in pytket.transform)": [[24, "pytket.transform.CXConfigType"]], "cnxpairwisedecomposition() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.CnXPairwiseDecomposition"]], "commutesqthroughswap() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.CommuteSQThroughSWAP"]], "commutethroughmultis() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.CommuteThroughMultis"]], "decomposebridge() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeBRIDGE"]], "decomposeboxes() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeBoxes"]], "decomposeccx() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeCCX"]], "decomposecxdirected() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeCXDirected"]], "decomposecontrolledrys() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeControlledRys"]], "decomposenphasedx() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeNPhasedX"]], "decomposeswap() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeSWAP"]], "decomposeswaptocx() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeSWAPtoCX"]], "decomposetk2() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.DecomposeTK2"]], "globalisephasedx() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.GlobalisePhasedX"]], "kakdecomposition() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.KAKDecomposition"]], "normalisetk2() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.NormaliseTK2"]], "optimisecliffords() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.OptimiseCliffords"]], "optimisepauligadgets() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.OptimisePauliGadgets"]], "optimisephasegadgets() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.OptimisePhaseGadgets"]], "optimisepostrouting() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.OptimisePostRouting"]], "optimisestandard() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.OptimiseStandard"]], "paulisynthstrat (class in pytket.transform)": [[24, "pytket.transform.PauliSynthStrat"]], "rebasetocirq() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.RebaseToCirq"]], "rebasetocliffordsingles() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.RebaseToCliffordSingles"]], "rebasetoprojectq() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.RebaseToProjectQ"]], "rebasetopyzx() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.RebaseToPyZX"]], "rebasetoquil() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.RebaseToQuil"]], "rebasetorzrx() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.RebaseToRzRx"]], "rebasetotket() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.RebaseToTket"]], "reducesingles() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.ReduceSingles"]], "removeredundancies() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.RemoveRedundancies"]], "synthesisepauligraph() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.SynthesisePauliGraph"]], "threequbitsquash() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.ThreeQubitSquash"]], "transform (class in pytket.transform)": [[24, "pytket.transform.Transform"]], "uccsynthesis() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.UCCSynthesis"]], "zzphasetorz() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.ZZPhaseToRz"]], "__init__() (pytket.transform.cxconfigtype method)": [[24, "pytket.transform.CXConfigType.__init__"]], "__init__() (pytket.transform.paulisynthstrat method)": [[24, "pytket.transform.PauliSynthStrat.__init__"]], "__init__() (pytket.transform.transform method)": [[24, "pytket.transform.Transform.__init__"]], "apply() (pytket.transform.transform method)": [[24, "pytket.transform.Transform.apply"]], "name (pytket.transform.cxconfigtype property)": [[24, "pytket.transform.CXConfigType.name"]], "name (pytket.transform.paulisynthstrat property)": [[24, "pytket.transform.PauliSynthStrat.name"]], "pytket.transform": [[24, "module-pytket.transform"]], "repeat() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.repeat"]], "round_angles() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.round_angles"]], "separate_classical() (in module pytket.transform)": [[24, "pytket.transform.separate_classical"]], "sequence() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.sequence"]], "while_repeat() (pytket.transform.transform static method)": [[24, "pytket.transform.Transform.while_repeat"]], "empiricaldistribution (class in pytket.utils.distribution)": [[25, "pytket.utils.distribution.EmpiricalDistribution"]], "graph (class in pytket.utils)": [[25, "pytket.utils.Graph"]], "outcomearray (class in pytket.utils)": [[25, "pytket.utils.OutcomeArray"]], "probabilitydistribution (class in pytket.utils.distribution)": [[25, "pytket.utils.distribution.ProbabilityDistribution"]], "qubitpaulioperator (class in pytket.utils)": [[25, "pytket.utils.QubitPauliOperator"]], "spamcorrecter (class in pytket.utils.spam)": [[25, "pytket.utils.spam.SpamCorrecter"]], "symgateregister (class in pytket.utils.symbolic)": [[25, "pytket.utils.symbolic.SymGateRegister"]], "__add__() (pytket.utils.distribution.empiricaldistribution method)": [[25, "pytket.utils.distribution.EmpiricalDistribution.__add__"]], "__eq__() (pytket.utils.distribution.empiricaldistribution method)": [[25, "pytket.utils.distribution.EmpiricalDistribution.__eq__"]], "__getitem__() (pytket.utils.distribution.empiricaldistribution method)": [[25, "pytket.utils.distribution.EmpiricalDistribution.__getitem__"]], "__getitem__() (pytket.utils.distribution.probabilitydistribution method)": [[25, "pytket.utils.distribution.ProbabilityDistribution.__getitem__"]], "__init__() (pytket.utils.graph method)": [[25, "pytket.utils.Graph.__init__"]], "__init__() (pytket.utils.qubitpaulioperator method)": [[25, "pytket.utils.QubitPauliOperator.__init__"]], "__init__() (pytket.utils.spam.spamcorrecter method)": [[25, "pytket.utils.spam.SpamCorrecter.__init__"]], "all_qubits (pytket.utils.qubitpaulioperator property)": [[25, "pytket.utils.QubitPauliOperator.all_qubits"]], "append_pauli_measurement() (in module pytket.utils)": [[25, "pytket.utils.append_pauli_measurement"]], "as_counter() (pytket.utils.distribution.empiricaldistribution method)": [[25, "pytket.utils.distribution.EmpiricalDistribution.as_counter"]], "as_dict() (pytket.utils.distribution.probabilitydistribution method)": [[25, "pytket.utils.distribution.ProbabilityDistribution.as_dict"]], "as_nx() (pytket.utils.graph method)": [[25, "pytket.utils.Graph.as_nx"]], "as_rv_discrete() (pytket.utils.distribution.probabilitydistribution method)": [[25, "pytket.utils.distribution.ProbabilityDistribution.as_rv_discrete"]], "calculate_matrices() (pytket.utils.spam.spamcorrecter method)": [[25, "pytket.utils.spam.SpamCorrecter.calculate_matrices"]], "calibration_circuits() (pytket.utils.spam.spamcorrecter method)": [[25, "pytket.utils.spam.SpamCorrecter.calibration_circuits"]], "choose_indices() (pytket.utils.outcomearray method)": [[25, "pytket.utils.OutcomeArray.choose_indices"]], "circuit_apply_symbolic_qubit() (in module pytket.utils.symbolic)": [[25, "pytket.utils.symbolic.circuit_apply_symbolic_qubit"]], "circuit_apply_symbolic_statevector() (in module pytket.utils.symbolic)": [[25, "pytket.utils.symbolic.circuit_apply_symbolic_statevector"]], "circuit_to_symbolic_gates() (in module pytket.utils.symbolic)": [[25, "pytket.utils.symbolic.circuit_to_symbolic_gates"]], "circuit_to_symbolic_unitary() (in module pytket.utils.symbolic)": [[25, "pytket.utils.symbolic.circuit_to_symbolic_unitary"]], "compare_statevectors() (in module pytket.utils)": [[25, "pytket.utils.compare_statevectors"]], "compare_unitaries() (in module pytket.utils)": [[25, "pytket.utils.compare_unitaries"]], "compress() (pytket.utils.qubitpaulioperator method)": [[25, "pytket.utils.QubitPauliOperator.compress"]], "compress_counts() (in module pytket.utils.spam)": [[25, "pytket.utils.spam.compress_counts"]], "condition() (pytket.utils.distribution.empiricaldistribution method)": [[25, "pytket.utils.distribution.EmpiricalDistribution.condition"]], "condition() (pytket.utils.distribution.probabilitydistribution method)": [[25, "pytket.utils.distribution.ProbabilityDistribution.condition"]], "convex_combination() (in module pytket.utils.distribution)": [[25, "pytket.utils.distribution.convex_combination"]], "correct_counts() (pytket.utils.spam.spamcorrecter method)": [[25, "pytket.utils.spam.SpamCorrecter.correct_counts"]], "counts() (pytket.utils.outcomearray method)": [[25, "pytket.utils.OutcomeArray.counts"]], "counts_from_shot_table() (in module pytket.utils)": [[25, "pytket.utils.counts_from_shot_table"]], "dot_state() (pytket.utils.qubitpaulioperator method)": [[25, "pytket.utils.QubitPauliOperator.dot_state"]], "expectation() (pytket.utils.distribution.probabilitydistribution method)": [[25, "pytket.utils.distribution.ProbabilityDistribution.expectation"]], "expectation_from_counts() (in module pytket.utils)": [[25, "pytket.utils.expectation_from_counts"]], "expectation_from_shots() (in module pytket.utils)": [[25, "pytket.utils.expectation_from_shots"]], "from_dict() (pytket.utils.outcomearray class method)": [[25, "pytket.utils.OutcomeArray.from_dict"]], "from_dict() (pytket.utils.spam.spamcorrecter class method)": [[25, "pytket.utils.spam.SpamCorrecter.from_dict"]], "from_empirical_distribution() (pytket.utils.distribution.probabilitydistribution class method)": [[25, "pytket.utils.distribution.ProbabilityDistribution.from_empirical_distribution"]], "from_ints() (pytket.utils.outcomearray class method)": [[25, "pytket.utils.OutcomeArray.from_ints"]], "from_list() (pytket.utils.qubitpaulioperator class method)": [[25, "pytket.utils.QubitPauliOperator.from_list"]], "from_readouts() (pytket.utils.outcomearray class method)": [[25, "pytket.utils.OutcomeArray.from_readouts"]], "gen_term_sequence_circuit() (in module pytket.utils)": [[25, "pytket.utils.gen_term_sequence_circuit"]], "get_dag() (pytket.utils.graph method)": [[25, "pytket.utils.Graph.get_DAG"]], "get_func() (pytket.utils.symbolic.symgateregister class method)": [[25, "pytket.utils.symbolic.SymGateRegister.get_func"]], "get_operator_expectation_value() (in module pytket.utils)": [[25, "pytket.utils.get_operator_expectation_value"]], "get_parallel_measure() (pytket.utils.spam.spamcorrecter method)": [[25, "pytket.utils.spam.SpamCorrecter.get_parallel_measure"]], "get_pauli_expectation_value() (in module pytket.utils)": [[25, "pytket.utils.get_pauli_expectation_value"]], "get_qubit_graph() (pytket.utils.graph method)": [[25, "pytket.utils.Graph.get_qubit_graph"]], "is_registered() (pytket.utils.symbolic.symgateregister class method)": [[25, "pytket.utils.symbolic.SymGateRegister.is_registered"]], "map() (pytket.utils.distribution.empiricaldistribution method)": [[25, "pytket.utils.distribution.EmpiricalDistribution.map"]], "map() (pytket.utils.distribution.probabilitydistribution method)": [[25, "pytket.utils.distribution.ProbabilityDistribution.map"]], "n_outcomes (pytket.utils.outcomearray property)": [[25, "pytket.utils.OutcomeArray.n_outcomes"]], "permute_basis_indexing() (in module pytket.utils)": [[25, "pytket.utils.permute_basis_indexing"]], "permute_qubits_in_statevector() (in module pytket.utils)": [[25, "pytket.utils.permute_qubits_in_statevector"]], "permute_rows_cols_in_unitary() (in module pytket.utils)": [[25, "pytket.utils.permute_rows_cols_in_unitary"]], "prepare_circuit() (in module pytket.utils)": [[25, "pytket.utils.prepare_circuit"]], "probs_from_counts() (in module pytket.utils)": [[25, "pytket.utils.probs_from_counts"]], "probs_from_state() (in module pytket.utils)": [[25, "pytket.utils.probs_from_state"]], "pytket.utils": [[25, "module-pytket.utils"]], "pytket.utils.distribution": [[25, "module-pytket.utils.distribution"]], "pytket.utils.spam": [[25, "module-pytket.utils.spam"]], "pytket.utils.symbolic": [[25, "module-pytket.utils.symbolic"]], "readout_counts() (in module pytket.utils)": [[25, "pytket.utils.readout_counts"]], "register_func() (pytket.utils.symbolic.symgateregister class method)": [[25, "pytket.utils.symbolic.SymGateRegister.register_func"]], "sample_mean() (pytket.utils.distribution.empiricaldistribution method)": [[25, "pytket.utils.distribution.EmpiricalDistribution.sample_mean"]], "sample_variance() (pytket.utils.distribution.empiricaldistribution method)": [[25, "pytket.utils.distribution.EmpiricalDistribution.sample_variance"]], "save_dag() (pytket.utils.graph method)": [[25, "pytket.utils.Graph.save_DAG"]], "save_qubit_graph() (pytket.utils.graph method)": [[25, "pytket.utils.Graph.save_qubit_graph"]], "state_expectation() (pytket.utils.qubitpaulioperator method)": [[25, "pytket.utils.QubitPauliOperator.state_expectation"]], "subs() (pytket.utils.qubitpaulioperator method)": [[25, "pytket.utils.QubitPauliOperator.subs"]], "support (pytket.utils.distribution.empiricaldistribution property)": [[25, "pytket.utils.distribution.EmpiricalDistribution.support"]], "support (pytket.utils.distribution.probabilitydistribution property)": [[25, "pytket.utils.distribution.ProbabilityDistribution.support"]], "to_dict() (pytket.utils.outcomearray method)": [[25, "pytket.utils.OutcomeArray.to_dict"]], "to_dict() (pytket.utils.spam.spamcorrecter method)": [[25, "pytket.utils.spam.SpamCorrecter.to_dict"]], "to_intlist() (pytket.utils.outcomearray method)": [[25, "pytket.utils.OutcomeArray.to_intlist"]], "to_list() (pytket.utils.qubitpaulioperator method)": [[25, "pytket.utils.QubitPauliOperator.to_list"]], "to_readout() (pytket.utils.outcomearray method)": [[25, "pytket.utils.OutcomeArray.to_readout"]], "to_readouts() (pytket.utils.outcomearray method)": [[25, "pytket.utils.OutcomeArray.to_readouts"]], "to_sparse_matrix() (pytket.utils.qubitpaulioperator method)": [[25, "pytket.utils.QubitPauliOperator.to_sparse_matrix"]], "total (pytket.utils.distribution.empiricaldistribution property)": [[25, "pytket.utils.distribution.EmpiricalDistribution.total"]], "variance() (pytket.utils.distribution.probabilitydistribution method)": [[25, "pytket.utils.distribution.ProbabilityDistribution.variance"]], "view_dag() (pytket.utils.graph method)": [[25, "pytket.utils.Graph.view_DAG"]], "view_qubit_graph() (pytket.utils.graph method)": [[25, "pytket.utils.Graph.view_qubit_graph"]], "width (pytket.utils.outcomearray property)": [[25, "pytket.utils.OutcomeArray.width"]], "wasmfilehandler (class in pytket.wasm)": [[26, "pytket.wasm.WasmFileHandler"]], "__init__() (pytket.wasm.wasmfilehandler method)": [[26, "pytket.wasm.WasmFileHandler.__init__"]], "__repr__() (pytket.wasm.wasmfilehandler method)": [[26, "pytket.wasm.WasmFileHandler.__repr__"]], "__str__() (pytket.wasm.wasmfilehandler method)": [[26, "pytket.wasm.WasmFileHandler.__str__"]], "check_function() (pytket.wasm.wasmfilehandler method)": [[26, "pytket.wasm.WasmFileHandler.check_function"]], "pytket.wasm": [[26, "module-pytket.wasm"]], "cliffordgen (class in pytket.zx)": [[27, "pytket.zx.CliffordGen"]], "directedgen (class in pytket.zx)": [[27, "pytket.zx.DirectedGen"]], "phasedgen (class in pytket.zx)": [[27, "pytket.zx.PhasedGen"]], "quantumtype (class in pytket.zx)": [[27, "pytket.zx.QuantumType"]], "rewrite (class in pytket.zx)": [[27, "pytket.zx.Rewrite"]], "zxbox (class in pytket.zx)": [[27, "pytket.zx.ZXBox"]], "zxdiagram (class in pytket.zx)": [[27, "pytket.zx.ZXDiagram"]], "zxgen (class in pytket.zx)": [[27, "pytket.zx.ZXGen"]], "zxtype (class in pytket.zx)": [[27, "pytket.zx.ZXType"]], "zxvert (class in pytket.zx)": [[27, "pytket.zx.ZXVert"]], "zxwire (class in pytket.zx)": [[27, "pytket.zx.ZXWire"]], "zxwiretype (class in pytket.zx)": [[27, "pytket.zx.ZXWireType"]], "__init__() (pytket.zx.cliffordgen method)": [[27, "pytket.zx.CliffordGen.__init__"]], "__init__() (pytket.zx.directedgen method)": [[27, "pytket.zx.DirectedGen.__init__"]], "__init__() (pytket.zx.phasedgen method)": [[27, "pytket.zx.PhasedGen.__init__"]], "__init__() (pytket.zx.quantumtype method)": [[27, "pytket.zx.QuantumType.__init__"]], "__init__() (pytket.zx.rewrite method)": [[27, "pytket.zx.Rewrite.__init__"]], "__init__() (pytket.zx.zxbox method)": [[27, "pytket.zx.ZXBox.__init__"]], "__init__() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.__init__"]], "__init__() (pytket.zx.zxgen method)": [[27, "pytket.zx.ZXGen.__init__"]], "__init__() (pytket.zx.zxtype method)": [[27, "pytket.zx.ZXType.__init__"]], "__init__() (pytket.zx.zxvert method)": [[27, "pytket.zx.ZXVert.__init__"]], "__init__() (pytket.zx.zxwire method)": [[27, "pytket.zx.ZXWire.__init__"]], "__init__() (pytket.zx.zxwiretype method)": [[27, "pytket.zx.ZXWireType.__init__"]], "add_vertex() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.add_vertex"]], "add_wire() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.add_wire"]], "add_zxbox() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.add_zxbox"]], "adj_wires() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.adj_wires"]], "apply() (pytket.zx.rewrite method)": [[27, "pytket.zx.Rewrite.apply"]], "basic_wires() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.basic_wires"]], "check_validity() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.check_validity"]], "circuit_to_zx() (in module pytket.zx)": [[27, "pytket.zx.circuit_to_zx"]], "count_vertices() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.count_vertices"]], "count_wires() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.count_wires"]], "create() (pytket.zx.zxgen static method)": [[27, "pytket.zx.ZXGen.create"]], "decompose_boxes() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.decompose_boxes"]], "degree() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.degree"]], "diagram (pytket.zx.zxbox property)": [[27, "pytket.zx.ZXBox.diagram"]], "extend_at_boundary_paulis() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.extend_at_boundary_paulis"]], "extend_for_px_outputs() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.extend_for_PX_outputs"]], "free_symbols() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.free_symbols"]], "gadgetise_interior_paulis() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.gadgetise_interior_paulis"]], "get_boundary() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.get_boundary"]], "get_name() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.get_name"]], "get_qtype() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.get_qtype"]], "get_vertex_zxgen() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.get_vertex_ZXGen"]], "get_wire_ends() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.get_wire_ends"]], "get_wire_qtype() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.get_wire_qtype"]], "get_wire_type() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.get_wire_type"]], "get_zxtype() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.get_zxtype"]], "internalise_gadgets() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.internalise_gadgets"]], "io_extension() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.io_extension"]], "is_symbolic() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.is_symbolic"]], "merge_gadgets() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.merge_gadgets"]], "multiply_scalar() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.multiply_scalar"]], "n_ports (pytket.zx.directedgen property)": [[27, "pytket.zx.DirectedGen.n_ports"]], "n_ports (pytket.zx.zxbox property)": [[27, "pytket.zx.ZXBox.n_ports"]], "n_vertices (pytket.zx.zxdiagram property)": [[27, "pytket.zx.ZXDiagram.n_vertices"]], "n_wires (pytket.zx.zxdiagram property)": [[27, "pytket.zx.ZXDiagram.n_wires"]], "name (pytket.zx.quantumtype property)": [[27, "pytket.zx.QuantumType.name"]], "name (pytket.zx.zxtype property)": [[27, "pytket.zx.ZXType.name"]], "name (pytket.zx.zxwiretype property)": [[27, "pytket.zx.ZXWireType.name"]], "neighbours() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.neighbours"]], "other_end() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.other_end"]], "parallel_h_removal() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.parallel_h_removal"]], "param (pytket.zx.cliffordgen property)": [[27, "pytket.zx.CliffordGen.param"]], "param (pytket.zx.phasedgen property)": [[27, "pytket.zx.PhasedGen.param"]], "pytket.zx": [[27, "module-pytket.zx"]], "qtype (pytket.zx.zxgen property)": [[27, "pytket.zx.ZXGen.qtype"]], "rebase_to_mbqc() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.rebase_to_mbqc"]], "rebase_to_zx() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.rebase_to_zx"]], "red_to_green() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.red_to_green"]], "reduce_graphlike_form() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.reduce_graphlike_form"]], "remove_interior_cliffords() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.remove_interior_cliffords"]], "remove_interior_paulis() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.remove_interior_paulis"]], "remove_vertex() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.remove_vertex"]], "remove_wire() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.remove_wire"]], "repeat() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.repeat"]], "scalar (pytket.zx.zxdiagram property)": [[27, "pytket.zx.ZXDiagram.scalar"]], "self_loop_removal() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.self_loop_removal"]], "separate_boundaries() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.separate_boundaries"]], "sequence() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.sequence"]], "set_vertex_zxgen() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.set_vertex_ZXGen"]], "set_wire_qtype() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.set_wire_qtype"]], "set_wire_type() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.set_wire_type"]], "signature (pytket.zx.directedgen property)": [[27, "pytket.zx.DirectedGen.signature"]], "signature (pytket.zx.zxbox property)": [[27, "pytket.zx.ZXBox.signature"]], "spider_fusion() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.spider_fusion"]], "symbol_substitution() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.symbol_substitution"]], "to_mbqc_diag() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.to_MBQC_diag"]], "to_circuit() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.to_circuit"]], "to_doubled_diagram() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.to_doubled_diagram"]], "to_graphlike_form() (pytket.zx.rewrite static method)": [[27, "pytket.zx.Rewrite.to_graphlike_form"]], "to_graphviz_str() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.to_graphviz_str"]], "type (pytket.zx.zxgen property)": [[27, "pytket.zx.ZXGen.type"]], "vertices (pytket.zx.zxdiagram property)": [[27, "pytket.zx.ZXDiagram.vertices"]], "wire_at_port() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.wire_at_port"]], "wire_between() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.wire_between"]], "wires (pytket.zx.zxdiagram property)": [[27, "pytket.zx.ZXDiagram.wires"]], "wires_between() (pytket.zx.zxdiagram method)": [[27, "pytket.zx.ZXDiagram.wires_between"]]}})