from typing import List, Tuple

from typing import overload
import pytket._tket.unit_id

class Architecture:
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, connections: List[Tuple[int,int]]) -> None: ...
    @overload
    def __init__(self, connections: List[Tuple[pytket._tket.unit_id.Node,pytket._tket.unit_id.Node]]) -> None: ...
    @classmethod
    def from_dict(cls, arg0: dict) -> Architecture: ...
    def get_adjacent_nodes(self, node: pytket._tket.unit_id.Node) -> set[pytket._tket.unit_id.Node]: ...
    def get_distance(self, node_0: pytket._tket.unit_id.Node, node_1: pytket._tket.unit_id.Node) -> int: ...
    def to_dict(self) -> dict: ...
    def valid_operation(self, uids: List[pytket._tket.unit_id.Node]) -> bool: ...
    def __deepcopy__(self, arg0: dict) -> Architecture: ...
    def __eq__(self, arg0: object) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def coupling(self) -> List[Tuple[pytket._tket.unit_id.Node,pytket._tket.unit_id.Node]]: ...
    @property
    def nodes(self) -> List[pytket._tket.unit_id.Node]: ...

class FullyConnected:
    def __init__(self, n: int, label: str = ...) -> None: ...
    @classmethod
    def from_dict(cls, arg0: dict) -> FullyConnected: ...
    def to_dict(self) -> dict: ...
    def __deepcopy__(self, arg0: dict) -> FullyConnected: ...
    def __eq__(self, arg0: object) -> bool: ...
    def __hash__(self) -> int: ...
    @property
    def nodes(self) -> List[pytket._tket.unit_id.Node]: ...

class RingArch(Architecture):
    def __init__(self, nodes: int, label: str = ...) -> None: ...
    def __deepcopy__(self, arg0: dict) -> RingArch: ...

class SquareGrid(Architecture):
    @overload
    def __init__(self, n_rows: int, n_columns: int, label: str = ...) -> None: ...
    @overload
    def __init__(self, n_rows: int, n_columns: int, n_layers: int = ..., label: str = ...) -> None: ...
    def qind_to_squind(self, index: int) -> Tuple[int,int]: ...
    def squind_to_qind(self, row: int, column: int) -> int: ...
    def __deepcopy__(self, arg0: dict) -> SquareGrid: ...
