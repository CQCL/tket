from typing import Any, List

from typing import overload
import numpy
import numpy.typing as npt
import pytket._tket.circuit

class UnitaryTableau:
    @overload
    def __init__(self, nqb: int) -> None: ...
    @overload
    def __init__(self, xx: npt.NDArray[bool], xz: npt.NDArray[bool], xph: npt.NDArray[bool], zx: npt.NDArray[bool], zz: npt.NDArray[bool], zph: npt.NDArray[bool]) -> None: ...
    def apply_gate_at_end(self, arg0: pytket._tket.circuit.OpType, arg1: List[pytket._tket.circuit.Qubit]) -> None: ...
    def apply_gate_at_front(self, arg0: pytket._tket.circuit.OpType, arg1: List[pytket._tket.circuit.Qubit]) -> None: ...
    def get_row_product(self, *args, **kwargs: Any) -> Any: ...
    def get_xrow(self, *args, **kwargs: Any) -> Any: ...
    def get_zrow(self, *args, **kwargs: Any) -> Any: ...

class UnitaryTableauBox(pytket._tket.circuit.Op):
    @overload
    def __init__(self, tab: UnitaryTableau) -> None: ...
    @overload
    def __init__(self, xx: npt.NDArray[bool], xz: npt.NDArray[bool], xph: npt.NDArray[bool], zx: npt.NDArray[bool], zz: npt.NDArray[bool], zph: npt.NDArray[bool]) -> None: ...
    def get_circuit(self) -> pytket._tket.circuit.Circuit: ...
    def get_tableau(self) -> UnitaryTableau: ...
