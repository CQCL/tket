from typing import Any
from typing import Callable, ClassVar, Dict, List, Tuple

from typing import overload
import pytket._tket.architecture
import pytket._tket.circuit
import pytket._tket.unit_id

class PauliSynthStrat:
    __members__: ClassVar[dict] = ...  # read-only
    Individual: ClassVar[PauliSynthStrat] = ...
    Pairwise: ClassVar[PauliSynthStrat] = ...
    Sets: ClassVar[PauliSynthStrat] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Transform:
    def __init__(self, arg0: Callable[[pytket._tket.circuit.Circuit],bool]) -> None: ...
    @classmethod
    def CnXPairwiseDecomposition(cls) -> Transform: ...
    @overload
    @classmethod
    def CommuteSQThroughSWAP(cls, avg_node_errors: Dict[pytket._tket.unit_id.Node,float]) -> Transform: ...
    @overload
    @classmethod
    def CommuteSQThroughSWAP(cls, op_node_errors: Dict[pytket._tket.unit_id.Node,Dict[pytket._tket.circuit.OpType,float]]) -> Transform: ...
    @classmethod
    def CommuteThroughMultis(cls) -> Transform: ...
    @classmethod
    def DecomposeBRIDGE(cls) -> Transform: ...
    @classmethod
    def DecomposeBoxes(cls) -> Transform: ...
    @classmethod
    def DecomposeCCX(cls) -> Transform: ...
    @classmethod
    def DecomposeCXDirected(cls, arc: pytket._tket.architecture.Architecture) -> Transform: ...
    @classmethod
    def DecomposeControlledRys(cls) -> Transform: ...
    @classmethod
    def DecomposeNPhasedX(cls) -> Transform: ...
    @classmethod
    def DecomposeSWAP(cls, circuit: pytket._tket.circuit.Circuit) -> Transform: ...
    @classmethod
    def DecomposeSWAPtoCX(cls, arc: pytket._tket.architecture.Architecture) -> Transform: ...
    @classmethod
    def DecomposeTK2(cls, allow_swaps: bool = ..., **kwargs: Any) -> Transform: ...
    @classmethod
    def GlobalisePhasedX(cls, squash: bool = ...) -> Transform: ...
    @overload
    @classmethod
    def KAKDecomposition(cls, target_2qb_gate: pytket._tket.circuit.OpType = ..., cx_fidelity: float = ..., allow_swaps: bool = ...) -> Transform: ...
    @overload
    @classmethod
    def KAKDecomposition(cls, cx_fidelity: float) -> Transform: ...
    @classmethod
    def NormaliseTK2(cls) -> Transform: ...
    @classmethod
    def OptimiseCliffords(cls, allow_swaps: bool = ...) -> Transform: ...
    @classmethod
    def OptimisePauliGadgets(cls, cx_config: pytket._tket.circuit.CXConfigType = ...) -> Transform: ...
    @classmethod
    def OptimisePhaseGadgets(cls, cx_config: pytket._tket.circuit.CXConfigType = ...) -> Transform: ...
    @classmethod
    def OptimisePostRouting(cls) -> Transform: ...
    @classmethod
    def OptimiseStandard(cls) -> Transform: ...
    @classmethod
    def RebaseToCirq(cls) -> Transform: ...
    @classmethod
    def RebaseToCliffordSingles(cls) -> Transform: ...
    @classmethod
    def RebaseToProjectQ(cls) -> Transform: ...
    @classmethod
    def RebaseToPyZX(cls) -> Transform: ...
    @classmethod
    def RebaseToQuil(cls) -> Transform: ...
    @classmethod
    def RebaseToRzRx(cls) -> Transform: ...
    @classmethod
    def RebaseToTket(cls) -> Transform: ...
    @classmethod
    def ReduceSingles(cls) -> Transform: ...
    @classmethod
    def RemoveRedundancies(cls) -> Transform: ...
    @classmethod
    def SynthesisePauliGraph(cls, synth_strat: PauliSynthStrat = ..., cx_config: pytket._tket.circuit.CXConfigType = ...) -> Transform: ...
    @classmethod
    def ThreeQubitSquash(cls, target_2qb_gate: pytket._tket.circuit.OpType = ...) -> Transform: ...
    @classmethod
    def UCCSynthesis(cls, synth_strat: PauliSynthStrat = ..., cx_config: pytket._tket.circuit.CXConfigType = ...) -> Transform: ...
    @classmethod
    def ZZPhaseToRz(cls) -> Transform: ...
    def apply(self, circuit: pytket._tket.circuit.Circuit) -> bool: ...
    @classmethod
    def repeat(cls, transform: Transform) -> Transform: ...
    @classmethod
    def round_angles(cls, n: int, only_zeros: bool = ...) -> Transform: ...
    @classmethod
    def sequence(cls, sequence: List[Transform]) -> Transform: ...
    @classmethod
    def while_repeat(cls, condition: Transform, body: Transform) -> Transform: ...
    def __rshift__(self, arg0: Transform) -> Transform: ...

def separate_classical(circ: pytket._tket.circuit.Circuit) -> Tuple[pytket._tket.circuit.Circuit,pytket._tket.circuit.Circuit]: ...
