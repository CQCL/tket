# Copyright 2019-2022 Cambridge Quantum Computing
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Helper file to convert gate definitions of any .inc files in this directory
in to python files containing dictionaries of pytket CustomGateDefs. To be used
with qasm parsing."""

from pathlib import Path
from typing import Dict, Iterator, TextIO, cast
from lark import Lark
from pytket.qasm.qasm import grammar, CircuitTransformer

_WARNING = '"""DO NOT EDIT! GENERATED BY load_includes.py."""\n'


def _get_files() -> Iterator[Path]:
    return Path(__file__).parent.glob("*.inc")


def _get_defpath(incfile: Path) -> Path:
    return Path(__file__).parent / f"_{incfile.stem}_defs.py"


def _get_declpath(incfile: Path) -> Path:
    return Path(__file__).parent / f"_{incfile.stem}_decls.py"


def _load_gdict(fi: Path) -> Dict[str, Dict]:
    with open(fi) as inc_file:
        parser = Lark(
            grammar,
            start="prog",
            debug=False,
            parser="lalr",
            cache=True,
            transformer=CircuitTransformer(return_gate_dict=True),
        )
        return cast(Dict[str, Dict], parser.parse(inc_file.read()))


def _write_defs(f_out: TextIO, gdict: Dict[str, Dict]) -> None:
    f_out.write(_WARNING)
    f_out.write("_INCLUDE_DEFS=")
    f_out.write(repr(gdict))


def _write_decls(f_out: TextIO, gdict: Dict[str, Dict]) -> None:
    for gate in gdict:
        del gdict[gate]["definition"]
    f_out.write(_WARNING)
    f_out.write("_INCLUDE_DECLS=")
    f_out.write(repr(gdict))


if __name__ == "__main__":
    for fi in _get_files():
        gdict = _load_gdict(fi)
        with open(_get_defpath(fi), "w") as f_out:
            _write_defs(f_out, gdict)
        with open(_get_declpath(fi), "w") as f_out:
            _write_decls(f_out, gdict)
