#!/usr/bin/env python3

from collections import Counter
import importlib
import os
import pkgutil
import re
from pathlib import Path
import warnings

from stubgen import PytketStubGen

import pytket


def replace_in_string(stub: str, matcher: str, replacement: str) -> tuple[str, bool]:
    split_text = re.split(matcher, stub)
    modified_text = replacement.join(split_text)
    return modified_text, len(split_text) > 1


def handle_any_insertion(stub: str) -> str:
    modified, b_args = replace_in_string(stub, "\\*args(?=[^:])", "*args: Any")
    modified, b_kwargs = replace_in_string(
        modified, "\\*\\*kwargs(?=[^:])", "**kwargs: Any"
    )
    modified, b_call = replace_in_string(
        modified,
        "Callable\\[\\[pytket\\._tket\\.predicates\\.CompilationUnit, object\\], None\\]",
        "Callable[[pytket._tket.predicates.CompilationUnit, Any], None]",
    )
    any_changes = b_args or b_kwargs or b_call
    if any_changes and not re.search("from typing import .*Any", modified):
        modified = "from typing import Any" + os.linesep + modified
    return modified


def sub_and_check(pattern: str, repl: str, string: str, n_special_replacements: Counter[str]) -> str:
    new_string, number_of_subs_made = re.subn(pattern, repl, string)
    n_special_replacements[pattern] += number_of_subs_made
    return new_string


def gen_module_stubs(modname, private_exceptions, output_file, n_special_replacements):
    mod_imported = importlib.import_module(f"pytket._tket.{modname}")
    sg = PytketStubGen(
        module=mod_imported,
        private_exceptions=private_exceptions,
        private_submodule="_tket",
        output_file=output_file,
    )
    sg.put(mod_imported)
    with open(output_file, "w", encoding="utf-8") as f:
        stub: str = sg.get()

        stub = handle_any_insertion(stub)
        stub = sub_and_check("ArrayLike", "NDArray", stub, n_special_replacements)
        stub = sub_and_check(" = OpType\\.", " = pytket._tket.circuit.OpType.", stub, n_special_replacements)
        stub = sub_and_check(
            "def to_dict\\(self\\) -> JSON:", "def to_dict(self) -> dict:", stub, n_special_replacements
        )
        stub = sub_and_check(
            "Mapping\\[Sequence\\[bool\\],", "dict[tuple[bool, ...],", stub, n_special_replacements
        )
        stub = sub_and_check(
            "types.UnionType\\[Sequence\\[int\\], None\\]", "Sequence[int] | None", stub, n_special_replacements
        )
        f.write(stub)


if __name__ == "__main__":
    output_dir = Path(__file__).parent.parent.resolve() / "pytket" / "_tket"
    private_exceptions = {
        "circuit": set(
            [
                "_add_wasm",
                "_add_w_register",
                "_set_rng_seed",
                "_set_rng_bound",
                "_set_rng_index",
                "_get_rng_num",
                "_get_job_shot_num",
                "_add_r_register",
                "_classical_eval",
                "_dag_data",
                "_n_vertices",
            ]
        ),
        "unit_id": set(
            [
                "_current",
                "_DEBUG_ONE_REG_PREFIX",
                "_DEBUG_ZERO_REG_PREFIX",
                "_TEMP_BIT_NAME",
                "_TEMP_BIT_REG_BASE",
                "_TEMP_REG_SIZE",
            ]
        ),
    }
    n_special_replacements: Counter[str] = Counter()
    for mod in pkgutil.iter_modules(pytket._tket.__path__):
        modname = mod.name
        if not modname.startswith("lib"):
            print(f"Generate {modname}.pyi")
            gen_module_stubs(
                modname,
                private_exceptions=private_exceptions.get(modname, set()),
                output_file=output_dir / f"{modname}.pyi",
                n_special_replacements=n_special_replacements
            )
    for pattern, n in n_special_replacements.items():
        if n == 0:
            warnings.warn(
                f"No matches for pattern '{pattern}'. Is this string replacement still "
                "necessary?"
            )
