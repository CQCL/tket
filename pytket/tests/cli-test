#! /usr/bin/env python3

# Copyright 2019-2022 Cambridge Quantum Computing
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import os
import subprocess

exe = os.path.join(os.curdir, "tket")

if __name__ == "__main__":
    process = subprocess.Popen([exe], stdout=subprocess.PIPE, universal_newlines=True)
    out, _ = process.communicate()
    assert process.returncode == 0

    process = subprocess.Popen(
        [exe, "--list-passes"], stdout=subprocess.PIPE, universal_newlines=True
    )
    out, _ = process.communicate()
    assert process.returncode == 0
    assert "Available passes:" in out

    qasmfile = os.path.join(os.curdir, "tests", "qasm_test_files", "test1.qasm")

    latexfile = "test1.latex"
    process = subprocess.Popen(
        [
            exe,
            "--infile",
            qasmfile,
            "--informat",
            "qasm",
            "--outfile",
            latexfile,
            "--outformat",
            "latex",
        ],
        stdout=subprocess.PIPE,
        universal_newlines=True,
    )
    out, _ = process.communicate()
    assert process.returncode == 0
    with open(latexfile) as f:
        latex = f.read()
    assert latex.startswith("\\documentclass[tikz]{standalone}")
    os.remove(latexfile)

    # REQUIRES PYTKET_QISKIT
    # process = subprocess.Popen(
    #     [
    #         exe,
    #         "--infile",
    #         qasmfile,
    #         "--informat",
    #         "qasm",
    #         "--backend",
    #         "AerStateBackend",
    #         "--passname",
    #         "default",
    #         "--run",
    #         "--show-state",
    #     ],
    #     stdout=subprocess.PIPE,
    #     universal_newlines=True,
    # )
    # out, _ = process.communicate()
    # assert process.returncode == 0
    # assert "[-1.673" in out

    process = subprocess.Popen(
        [exe, "--wibble"],
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        universal_newlines=True,
    )
    out, _ = process.communicate()
    assert process.returncode != 0
    assert "usage:" in out
