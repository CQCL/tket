{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "http://cambridgequantum.com/schemas/tket/compiler_pass_v1.json",
  "type": "object",
  "description": "Serialization of a pytket compiler pass v1",
  "properties": {
    "pass_class": {
      "enum": [
        "StandardPass",
        "SequencePass",
        "RepeatPass",
        "RepeatWithMetricPass",
        "RepeatUntilSatisfiedPass"
      ],
      "description": "The subclass of \"BasePass\" implemented, defining whether this is an elementary pass or some recursive combination of passes."
    },
    "StandardPass": {
      "$ref": "#/definitions/StandardPass"
    },
    "SequencePass": {
      "$ref": "#/definitions/SequencePass"
    },
    "RepeatPass": {
      "$ref": "#/definitions/RepeatPass"
    },
    "RepeatWithMetricPass": {
      "$ref": "#/definitions/RepeatWithMetricPass"
    },
    "RepeatUntilSatisfiedPass": {
      "$ref": "#/definitions/RepeatUntilSatisfiedPass"
    }
  },
  "required": [
    "pass_class"
  ],
  "allOf": [
    {
      "if": {
        "properties": {
          "type": {
            "const": "StandardPass"
          }
        }
      },
      "then": {
        "required": [
          "StandardPass"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "SequencePass"
          }
        }
      },
      "then": {
        "required": [
          "SequencePass"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "RepeatPass"
          }
        }
      },
      "then": {
        "required": [
          "RepeatPass"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "RepeatWithMetricPass"
          }
        }
      },
      "then": {
        "required": [
          "RepeatWithMetricPass"
        ]
      }
    },
    {
      "if": {
        "properties": {
          "type": {
            "const": "RepeatUntilSatisfiedPass"
          }
        }
      },
      "then": {
        "required": [
          "RepeatUntilSatisfiedPass"
        ]
      }
    }
  ],
  "definitions": {
    "StandardPass": {
      "type": "object",
      "description": "Additional content to describe an elementary compiler pass.",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the compiler pass. Matches the name of the pytket method used to generate it."
        },
        "basis_allowed": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "OpTypes of supported gates. Used in \"RebaseCustom\"."
        },
        "basis_cx_replacement": {
          "$ref": "file:///circuit_v1.json#",
          "description": "A circuit implementing a CX gate in a target gate set. Used in \"RebaseCustom\"."
        },
        "basis_tk1_replacement": {
          "type": "string",
          "description": "A method for generating optimised single-qubit unitary circuits in a target gate set. This string should be interpreted by Python \"dill\" into a function. Used in \"RebaseCustom\" and \"SquashCustom\"."
        },
        "euler_p": {
          "type": "string",
          "description": "The choice of P rotation for \"EulerAngleReduction\" for P-Q-P and Q-P-Q triples.",
          "enum": [
            "Rx",
            "Ry",
            "Rz"
          ]
        },
        "euler_q": {
          "type": "string",
          "description": "The choice of Q rotation for \"EulerAngleReduction\" for P-Q-P and Q-P-Q triples.",
          "enum": [
            "Rx",
            "Ry",
            "Rz"
          ]
        },
        "euler_strict": {
          "type": "boolean",
          "description": "False allows context-dependent reduction to just P-Q or Q-P by commuting the third rotation through the subsequent gate. Used in \"EulerAngleReduction\"."
        },
        "allow_swaps": {
          "type": "boolean",
          "description": "Permit Clifford simplifications that introduce implicit swaps. Used in \"CliffordSimp\"."
        },
        "qubit_map": {
          "type": "array",
          "description": "Map for renaming qubits in \"RenameQubitsPass\".",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/unitid"
              },
              {
                "$ref": "#/definitions/unitid"
              }
            ]
          }
        },
        "placement": {
          "$ref": "#/definitions/placement"
        },
        "architecture": {
          "$ref": "#/definitions/architecture"
        },
        "directed": {
          "type": "boolean",
          "description": "Whether to consider directedness of the architecture for CXs in \"DecomposeSwapsToCXs\"."
        },
        "swap_replacement": {
          "$ref": "file:///circuit_v1.json#"
        },
        "fidelity": {
          "type": "number",
          "definition": "If <1, \"KAKDecomposition\" may not preserve semantics in order to optimise for the given CX fidelity.",
          "minimum": 0,
          "maximum": 1
        },
        "cx_config": {
          "type": "string",
          "enum": [
            "Snake",
            "Tree",
            "Star"
          ],
          "definition": "A preference of CX configuration for building parities. Used in \"OptimisePhaseGadgets\", \"PauliSimp\", \"GuidedPauliSimp\", and \"PauliSquash\"."
        },
        "pauli_synth_strat": {
          "type": "string",
          "enum": [
            "Individual",
            "Pairwise",
            "Sets"
          ],
          "definition": "Whether to synthesise Pauli gadget sequences as individual rotations, pairwise, or in sets of commuting operations. Used in \"PauliSimp\", \"GuidedPauliSimp\", and \"PauliSquash\"."
        },
        "allow_classical": {
          "type": "boolean",
          "description": "Whether to allow measurements on known states to be removed during \"SimplifyInitial\" and \"ContextSimp\"."
        },
        "create_all_qubits": {
          "type": "boolean",
          "description": "Whether to automatically annotate all qubits as initialised to the zero state for \"SimplifyInitial\"."
        },
        "c_xircuit": {
          "$ref": "file:///circuit_v1.json#"
        },
        "delay_measures": {
          "type": "boolean",
          "description": "Whether to include a \"DelayMeasures\" pass in a \"CXMappingPass\"."
        }
      },
      "required": [
        "name"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "name": {
                "const": "RebaseCustom"
              }
            }
          },
          "then": {
            "required": [
              "basis_allowed",
              "basis_cx_replacement",
              "basis_tk1_replacement"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "SquashCustom"
              }
            }
          },
          "then": {
            "required": [
              "basis_singleqs",
              "basis_tk1_replacement"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "EulerAngleReduction"
              }
            }
          },
          "then": {
            "required": [
              "euler_p",
              "euler_q",
              "euler_strict"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "KAKDecomposition"
              }
            }
          },
          "then": {
            "required": [
              "fidelity"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "CliffordSimp"
              }
            }
          },
          "then": {
            "required": [
              "allow_swaps"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "ThreeQubitSquash"
              }
            }
          },
          "then": {
            "required": [
              "allow_swaps"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "OptimisePhaseGadgets"
              }
            }
          },
          "then": {
            "required": [
              "cx_config"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "PauliSimp"
              }
            }
          },
          "then": {
            "required": [
              "pauli_synth_strat",
              "cx_config"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "GuidedPauliSimp"
              }
            }
          },
          "then": {
            "required": [
              "pauli_synth_strat",
              "cx_config"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "SimplifyInitial"
              }
            }
          },
          "then": {
            "required": [
              "allow_classical",
              "create_all_qubits"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "RenameQubitsPass"
              }
            }
          },
          "then": {
            "required": [
              "qubit_map"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "PlacementPass"
              }
            }
          },
          "then": {
            "required": [
              "placement"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "NaivePlacementPass"
              }
            }
          },
          "then": {
            "required": [
              "architecture"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "CustomRoutingPass"
              }
            }
          },
          "then": {
            "required": [
              "architecture",
              "routing_config"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "RoutingPass"
              }
            }
          },
          "then": {
            "required": [
              "architecture",
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "DecomposeSwapsToCXs"
              }
            }
          },
          "then": {
            "required": [
              "architecture",
              "directed"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "DecomposeSwapsToCircuit"
              }
            }
          },
          "then": {
            "required": [
              "swap_replacement"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "FullMappingPass"
              }
            }
          },
          "then": {
            "required": [
              "architecture",
              "placement",
              "routing_config"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "DefaultMappingPass"
              }
            }
          },
          "then": {
            "required": [
              "architecture",
              "delay_measures"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "CXMappingPass"
              }
            }
          },
          "then": {
            "required": [
              "architecture",
              "placement",
              "routing_config",
              "directed",
              "delay_measures"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "PauliSquash"
              }
            }
          },
          "then": {
            "required": [
              "pauli_synth_strat",
              "cx_config"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "name": {
                "const": "ContextSimp"
              }
            }
          },
          "then": {
            "required": [
              "allow_classical",
              "x_circuit"
            ]
          }
        }
      ]
    },
    "SequencePass": {
      "type": "object",
      "description": "Additional content to describe a compiler pass that executes as a sequence of passes in order.",
      "properties": {
        "sequence": {
          "type": "array",
          "items": {
            "$ref": "#"
          },
          "description": "The passes to be executed in order."
        }
      },
      "required": [
        "sequence"
      ]
    },
    "RepeatPass": {
      "type": "object",
      "description": "Additional content to describe a compiler pass that iterates another to a fixpoint.",
      "properties": {
        "body": {
          "$ref": "#",
          "description": "The body of the loop, to be iterated until no further change."
        }
      },
      "required": [
        "body"
      ]
    },
    "RepeatWithMetricPass": {
      "type": "object",
      "description": "Additional content to describe a compiler pass that iterates another whilst some metric decreases.",
      "properties": {
        "body": {
          "$ref": "#",
          "description": "The body of the loop."
        },
        "metric": {
          "type": "string",
          "description": "The metric that conditions the loop, stored as a dill string of the python function."
        }
      },
      "required": [
        "body",
        "metric"
      ]
    },
    "RepeatUntilSatisfiedPass": {
      "type": "object",
      "description": "Additional content to describe a compiler pass that iterates another until some predicate is satisfied.",
      "properties": {
        "body": {
          "$ref": "#",
          "description": "The body of the loop."
        },
        "predicate": {
          "$ref": "#/definitions/predicate",
          "description": "The predicate that conditions the loop. The loop is terminated when this predicate returns True."
        }
      },
      "required": [
        "body",
        "predicate"
      ]
    },
    "predicate": {
      "type": "object",
      "description": "A function of a Circuit which determines the success of a part of compilation.",
      "properties": {
        "type": {
          "type": "string",
          "description": "The subclass of \"Predicate\" implemented."
        },
        "allowed_types": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of allowed \"OpType\"s for a \"GateSetPredicate\"."
        },
        "node_set": {
          "type": "array",
          "items": {
            "$ref": "file:///circuit_v1.json#/definitions/unitid"
          },
          "description": "The set of allowed node names for a \"PlacementPredicate\"."
        },
        "architecture": {
          "$ref": "#/definitions/architecture",
          "description": "The coupling map required by \"ConnectivityPredicate\" or \"DirectednessPredicate\"."
        },
        "n_qubits": {
          "type": "integer",
          "minimum": 0,
          "description": "The maximum number of qubits supported by \"MaxNQubitsPredicate\"."
        },
        "custom": {
          "type": "string",
          "description": "The python dill string of a custom predicate function for \"UserDefinedPredicate\"."
        }
      },
      "required": [
        "class"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "class": {
                "const": "GateSetPredicate"
              }
            }
          },
          "then": {
            "required": [
              "allowed_types"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "class": {
                "const": "PlacementPredicate"
              }
            }
          },
          "then": {
            "required": [
              "node_set"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "class": {
                "const": "ConnectivityPredicate"
              }
            }
          },
          "then": {
            "required": [
              "architecture"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "class": {
                "const": "DirectednessPredicate"
              }
            }
          },
          "then": {
            "required": [
              "architecture"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "class": {
                "const": "MaxNQubitsPredicate"
              }
            }
          },
          "then": {
            "required": [
              "n_qubits"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "class": {
                "const": "UserDefinedPredicate"
              }
            }
          },
          "then": {
            "required": [
              "custom"
            ]
          }
        }
      ]
    },
    "placement": {
      "type": "object",
      "description": "A configuration for the placement procedure.",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Placement",
            "GraphPlacement",
            "NoiseAwarePlacement",
            "LinePlacement"
          ],
          "description": "The placement algorithm in use."
        },
        "architecture": {
          "$ref": "#/definitions/architecture"
        },
        "config": {
          "$ref": "#/definitions/placement_config"
        },
        "characterisation": {
          "$ref": "#/definitions/device_characterisation"
        }
      },
      "required": [
        "type",
        "architecture"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "type": {
                "const": "GraphPlacement"
              }
            }
          },
          "then": {
            "required": [
              "config"
            ]
          }
        },
        {
          "if": {
            "properties": {
              "type": {
                "const": "NoiseAwarePlacement"
              }
            }
          },
          "then": {
            "required": [
              "config",
              "characterisation"
            ]
          }
        }
      ]
    },
    "placement_config": {
      "type": "object",
      "description": "A finer-grained set of parameters for placement.",
      "properties": {
        "depth_limit": {
          "type": "integer",
          "minimum": 0,
          "description": "The look ahead limit for placement."
        },
        "max_interaction_edges": {
          "type": "integer",
          "minimum": 0,
          "description": "The maximum number of edges in the interaction graph."
        },
        "vf2_max_matches": {
          "type": "integer",
          "minimum": 0,
          "description": "The maximum number of matches from the vf2 monomorphism solver."
        },
        "arc_contraction_ratio": {
          "type": "integer",
          "minimum": 0,
          "description": "Tradeoff parameter between swap count and initial noise minimisation."
        },
        "timeout": {
          "type": "integer",
          "minimum": 0,
          "description": "Timeout for vf2 search, in seconds."
        }
      },
      "required": [
        "depth_limit",
        "max_interaction_edges",
        "vf2_max_matches",
        "arc_contraction_ratio",
        "timeout"
      ]
    },
    "architecture": {
      "type": "object",
      "description": "A description of a target coupling map.",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "link": {
                "type": "array",
                "items": [
                  {
                    "$ref": "file:///circuit_v1.json#/definitions/unitid"
                  },
                  {
                    "$ref": "file:///circuit_v1.json#/definitions/unitid"
                  }
                ]
              },
              "weight": {
                "type": "number"
              }
            },
            "required": [
              "link",
              "weight"
            ]
          },
          "description": "The set of weighted edges in the coupling map."
        },
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "file:///circuit_v1.json#/definitions/unitid"
          },
          "description": "The set of nodes present on the device. This may include nodes not present in the list of links if the qubits are disconnected."
        }
      },
      "required": [
        "links",
        "nodes"
      ]
    },
    "device_characterisation": {
      "type": "object",
      "description": "A description of the error levels on the qubits and links of a particular device.",
      "properties": {
        "def_node_errors": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "file:///circuit_v1.json#/definitions/unitid"
              },
              {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              }
            ]
          }
        },
        "def_link_errors": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "array",
                "items": [
                  {
                    "$ref": "file:///circuit_v1.json#/definitions/unitid"
                  },
                  {
                    "$ref": "file:///circuit_v1.json#/definitions/unitid"
                  }
                ]
              },
              {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              }
            ]
          }
        },
        "readouts": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "file:///circuit_v1.json#/definitions/unitid"
              },
              {
                "type": "number",
                "minimum": 0,
                "maximum": 1
              }
            ]
          }
        },
        "op_node_errors": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "file:///circuit_v1.json#/definitions/unitid"
              },
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1
                    }
                  ]
                }
              }
            ]
          }
        },
        "op_link_errors": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "array",
                "items": [
                  {
                    "$ref": "file:///circuit_v1.json#/definitions/unitid"
                  },
                  {
                    "$ref": "file:///circuit_v1.json#/definitions/unitid"
                  }
                ]
              },
              {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "number",
                      "minimum": 0,
                      "maximum": 1
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "required": [
        "def_node_errors",
        "def_link_errors",
        "readouts",
        "op_node_errors",
        "op_link_errors"
      ]
    },
    "routingmethod": {
      "type": "object",
      "description": "A method used during circuit mapping.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of method."
        },
      },
    },
    "routing_config": {
      "type": "array",
      "description": "A configuration for routing defined by an array of RoutingMethod.",
      "items": {
        "$ref": "#/definitions/routingmethod"
      },
    },
  }
}